
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.2.0.134

// ldbanno -n Verilog -o Parallel2CSI2_Parallel2CSI2_mapvo.vo -w -neg -gui Parallel2CSI2_Parallel2CSI2_map.ncd 
// Netlist created on Wed Oct 15 13:44:53 2014
// Netlist written on Wed Oct 15 13:45:00 2014
// Design is for device LFE5U-85F
// Design is for package CSFBGA285
// Design is for performance grade 6

`timescale 1 ns / 1 ps

module packetheader ( reset_n, short_en, long_en, byte_clk, byte_data, vc, dt, 
                      wc, chksum_rdy, chksum, bytepkt_en, bytepkt, EoTp );
  input  reset_n, short_en, long_en, byte_clk;
  input  [31:0] byte_data;
  input  [1:0] vc;
  input  [5:0] dt;
  input  [15:0] wc;
  input  chksum_rdy;
  input  [15:0] chksum;
  input  EoTp;
  output bytepkt_en;
  output [31:0] bytepkt;
  wire   \lpkt_cnt[15] , un9_wc_end_flag_a_4_cry_14, un9_wc_end_flag_15, 
         \un9_wc_end_flag_a_4_i[16] , \u_PH_DLY_FIFO/w_gcount_4 , 
         \u_PH_DLY_FIFO/w_gcount_5 , un1_q_bytepkt_en_0, byte_clk1_c, 
         \u_PH_DLY_FIFO/w_gcount_r5 , \u_PH_DLY_FIFO/w_gcount_r4 , 
         \u_PH_DLY_FIFO/w_gctr_ci , \u_PH_DLY_FIFO/wcount_1 , 
         \u_PH_DLY_FIFO/wcount_0 , \u_PH_DLY_FIFO/iwcount_1 , 
         \u_PH_DLY_FIFO/iwcount_0 , \u_PH_DLY_FIFO/wren_i , 
         \u_PH_DLY_FIFO/co0 , \u_PH_DLY_FIFO/wcount_3 , 
         \u_PH_DLY_FIFO/wcount_2 , \u_PH_DLY_FIFO/iwcount_3 , 
         \u_PH_DLY_FIFO/iwcount_2 , \u_PH_DLY_FIFO/co1 , 
         \u_PH_DLY_FIFO/wcount_5 , \u_PH_DLY_FIFO/wcount_4 , 
         \u_PH_DLY_FIFO/iwcount_5 , \u_PH_DLY_FIFO/iwcount_4 , 
         \u_PH_DLY_FIFO/co2 , \u_PH_DLY_FIFO/wcount_7 , 
         \u_PH_DLY_FIFO/wcount_6 , \u_PH_DLY_FIFO/iwcount_7 , 
         \u_PH_DLY_FIFO/iwcount_6 , \u_PH_DLY_FIFO/co3 , 
         \u_PH_DLY_FIFO/wcount_9 , \u_PH_DLY_FIFO/wcount_8 , 
         \u_PH_DLY_FIFO/iwcount_9 , \u_PH_DLY_FIFO/iwcount_8 , 
         \u_PH_DLY_FIFO/w_gcount_6 , \u_PH_DLY_FIFO/w_gcount_7 , 
         \u_PH_DLY_FIFO/w_gcount_r7 , \u_PH_DLY_FIFO/w_gcount_r6 , 
         \u_PH_DLY_FIFO/r_gctr_ci , \u_PH_DLY_FIFO/rcount_1 , 
         \u_PH_DLY_FIFO/rcount_0 , \u_PH_DLY_FIFO/ircount_1 , 
         \u_PH_DLY_FIFO/ircount_0 , \u_PH_DLY_FIFO/rden_i , 
         \u_PH_DLY_FIFO/co0_1 , \u_PH_DLY_FIFO/rcount_3 , 
         \u_PH_DLY_FIFO/rcount_2 , \u_PH_DLY_FIFO/ircount_3 , 
         \u_PH_DLY_FIFO/ircount_2 , \u_PH_DLY_FIFO/co1_1 , 
         \u_PH_DLY_FIFO/rcount_5 , \u_PH_DLY_FIFO/rcount_4 , 
         \u_PH_DLY_FIFO/ircount_5 , \u_PH_DLY_FIFO/ircount_4 , 
         \u_PH_DLY_FIFO/co2_1 , \u_PH_DLY_FIFO/rcount_7 , 
         \u_PH_DLY_FIFO/rcount_6 , \u_PH_DLY_FIFO/ircount_7 , 
         \u_PH_DLY_FIFO/ircount_6 , \u_PH_DLY_FIFO/co3_1 , 
         \u_PH_DLY_FIFO/rcount_9 , \u_PH_DLY_FIFO/rcount_8 , 
         \u_PH_DLY_FIFO/ircount_9 , \u_PH_DLY_FIFO/ircount_8 , 
         \u_PH_DLY_FIFO/w_gcount_r0 , \u_PH_DLY_FIFO/w_gcount_r1 , 
         \u_PH_DLY_FIFO/w_gcount_r21 , \u_PH_DLY_FIFO/w_gcount_r20 , 
         \u_PH_DLY_FIFO/cmp_ci , \u_PH_DLY_FIFO/wcount_r1 , 
         \u_PH_DLY_FIFO/wcount_r0 , \u_PH_DLY_FIFO/r_gcount_w0 , 
         \u_PH_DLY_FIFO/r_gcount_w1 , \u_PH_DLY_FIFO/r_gcount_w21 , 
         \u_PH_DLY_FIFO/r_gcount_w20 , \u_PH_DLY_FIFO/co0_2 , 
         \u_PH_DLY_FIFO/wcount_r3 , \u_PH_DLY_FIFO/wcount_r2 , 
         \u_PH_DLY_FIFO/w_gcount_r8 , \u_PH_DLY_FIFO/w_gcount_r9 , 
         \u_PH_DLY_FIFO/w_gcount_r29 , \u_PH_DLY_FIFO/w_gcount_r28 , 
         \u_PH_DLY_FIFO/co1_2 , \u_PH_DLY_FIFO/wcount_r5 , 
         \u_PH_DLY_FIFO/wcount_r4 , \u_PH_DLY_FIFO/w_gcount_r27 , 
         \u_PH_DLY_FIFO/w_gcount_r26 , \u_PH_DLY_FIFO/co2_2 , 
         \u_PH_DLY_FIFO/wcount_r7 , \u_PH_DLY_FIFO/w_g2b_xor_cluster_0 , 
         \u_PH_DLY_FIFO/w_gcount_r25 , \u_PH_DLY_FIFO/w_gcount_r24 , 
         \u_PH_DLY_FIFO/co3_2 , \u_PH_DLY_FIFO/empty_cmp_clr , 
         \u_PH_DLY_FIFO/empty_cmp_set , \u_PH_DLY_FIFO/wcount_r8 , 
         \u_PH_DLY_FIFO/w_gcount_r2 , \u_PH_DLY_FIFO/w_gcount_r3 , 
         \u_PH_DLY_FIFO/w_gcount_r23 , \u_PH_DLY_FIFO/w_gcount_r22 , 
         \u_PH_DLY_FIFO/empty_d_c , \u_PH_DLY_FIFO/empty_d , 
         \u_PH_DLY_FIFO/Empty , \u_PH_DLY_FIFO/w_gcount_8 , 
         \u_PH_DLY_FIFO/w_gcount_9 , \u_PH_DLY_FIFO/cmp_ci_1 , 
         \u_PH_DLY_FIFO/rcount_w1 , \u_PH_DLY_FIFO/rcount_w0 , 
         \u_PH_DLY_FIFO/r_gcount_8 , \u_PH_DLY_FIFO/r_gcount_9 , 
         \u_PH_DLY_FIFO/r_gcount_w9 , \u_PH_DLY_FIFO/r_gcount_w8 , 
         \u_PH_DLY_FIFO/co0_3 , \u_PH_DLY_FIFO/rcount_w3 , 
         \u_PH_DLY_FIFO/rcount_w2 , \u_PH_DLY_FIFO/r_gcount_6 , 
         \u_PH_DLY_FIFO/r_gcount_7 , \u_PH_DLY_FIFO/r_gcount_w7 , 
         \u_PH_DLY_FIFO/r_gcount_w6 , \u_PH_DLY_FIFO/co1_3 , 
         \u_PH_DLY_FIFO/rcount_w5 , \u_PH_DLY_FIFO/rcount_w4 , 
         \u_PH_DLY_FIFO/r_gcount_4 , \u_PH_DLY_FIFO/r_gcount_5 , 
         \u_PH_DLY_FIFO/r_gcount_w5 , \u_PH_DLY_FIFO/r_gcount_w4 , 
         \u_PH_DLY_FIFO/co2_3 , \u_PH_DLY_FIFO/rcount_w7 , 
         \u_PH_DLY_FIFO/r_g2b_xor_cluster_0 , \u_PH_DLY_FIFO/r_gcount_2 , 
         \u_PH_DLY_FIFO/r_gcount_3 , \u_PH_DLY_FIFO/r_gcount_w3 , 
         \u_PH_DLY_FIFO/r_gcount_w2 , \u_PH_DLY_FIFO/co3_3 , 
         \u_PH_DLY_FIFO/full_cmp_clr , \u_PH_DLY_FIFO/full_cmp_set , 
         \u_PH_DLY_FIFO/rcount_w8 , \u_PH_DLY_FIFO/r_gcount_0 , 
         \u_PH_DLY_FIFO/r_gcount_1 , \u_PH_DLY_FIFO/full_d_c , 
         \u_PH_DLY_FIFO/full_d , \u_PH_DLY_FIFO/Full , \lpkt_cnt[0] , lpkt_cnt, 
         \lpkt_cnt_s[0] , \lpkt_cnt_cry[0] , \lpkt_cnt[2] , \lpkt_cnt[1] , 
         \lpkt_cnt_s[2] , \lpkt_cnt_s[1] , \lpkt_cnt_cry[2] , \lpkt_cnt[4] , 
         \lpkt_cnt[3] , \lpkt_cnt_s[4] , \lpkt_cnt_s[3] , \lpkt_cnt_cry[4] , 
         \lpkt_cnt[6] , \lpkt_cnt[5] , \lpkt_cnt_s[6] , \lpkt_cnt_s[5] , 
         \lpkt_cnt_cry[6] , \lpkt_cnt[8] , \lpkt_cnt[7] , \lpkt_cnt_s[8] , 
         \lpkt_cnt_s[7] , \lpkt_cnt_cry[8] , \lpkt_cnt[10] , \lpkt_cnt[9] , 
         \lpkt_cnt_s[10] , \lpkt_cnt_s[9] , \lpkt_cnt_cry[10] , \lpkt_cnt[12] , 
         \lpkt_cnt[11] , \lpkt_cnt_s[12] , \lpkt_cnt_s[11] , 
         \lpkt_cnt_cry[12] , \lpkt_cnt[14] , \lpkt_cnt[13] , \lpkt_cnt_s[14] , 
         \lpkt_cnt_s[13] , \lpkt_cnt_cry[14] , \lpkt_cnt_s[15] , \q_wc[1] , 
         un9_wc_end_flag_a_4_cry_0, \q_wc[3] , \q_wc[2] , un9_wc_end_flag_1, 
         un9_wc_end_flag_2, un9_wc_end_flag_a_4_cry_2, \q_wc[5] , \q_wc[4] , 
         un9_wc_end_flag_3, un9_wc_end_flag_4, un9_wc_end_flag_a_4_cry_4, 
         \q_wc[7] , \q_wc[6] , un9_wc_end_flag_5, un9_wc_end_flag_6, 
         un9_wc_end_flag_a_4_cry_6, \q_wc[9] , \q_wc[8] , un9_wc_end_flag_7, 
         un9_wc_end_flag_8, un9_wc_end_flag_a_4_cry_8, \q_wc[11] , \q_wc[10] , 
         un9_wc_end_flag_9, un9_wc_end_flag_10, un9_wc_end_flag_a_4_cry_10, 
         \q_wc[13] , \q_wc[12] , un9_wc_end_flag_11, un9_wc_end_flag_12, 
         un9_wc_end_flag_a_4_cry_12, \q_wc[15] , \q_wc[14] , 
         un9_wc_end_flag_13, un9_wc_end_flag_14, \byte_data1_fifo[6] , WC_1_En, 
         N_28, q_long_pkt_indicator, chksum_En, EoTp_c, \un2_EoTp_En_0[0] , 
         \EoTp_En[0] , \bytepkt_2_0_iv_0_0[6] , \EoTp_En[1] , short_en_c, 
         q_short_en, q_long_en, long_en_c, un1_q_long_pkt_indicator_1_1_i, 
         un1_q_long_pkt_indicator_1_i, PH_En, un1_q_long_pkt_indicator_1_1, 
         \PH_cnt[1] , \PH_cnt[0] , \PH_cnt_RNO[1] , \un7_PH_cnt_0[0] , 
         \PH_cnt[3] , \PH_cnt[2] , CO1, \un7_PH_cnt_0[3] , \PH_cnt_RNO[2] , 
         DataID_En_2, WC_0_En, ECC_En_2, un2_lpkt_cnt_En_1, q_chksum_En, 
         hsSync_En, bytepkt_en_2_i_a2_4, bytepkt_en_2_i_a2_3, N_78_i, 
         bytepkt_en_c, un9_wc_end_flag_NE_11, un9_wc_end_flag_NE_7, 
         un9_wc_end_flag_NE_14, un9_wc_end_flag_NE_10, un9_wc_end_flag_NE_9, 
         un9_wc_end_flag_NE_i, hsSync_En_2, un2_lpkt_cnt_En_0, 
         un15_lpkt_cnt_En_i, un87_q_ECC_0_a2_4, un87_q_ECC_0_a2_3, N_31_i, 
         N_22, un108_q_ECC_0_a2_3, un108_q_ECC_0_a2_2, un87_q_ECC, un108_q_ECC, 
         un5_q_ECC_0, \q_ECC[0] , \q_ECC[1] , un47_q_ECC_0_a2_5, 
         un47_q_ECC_0_a2_4, un47_q_ECC_0_a2_3, un7_q_ECC_0_a2_2, un67_q_ECC_4, 
         un67_q_ECC_0_a2_5, un67_q_ECC_0_a2_4, un47_q_ECC, un67_q_ECC, 
         \q_ECC[2] , \q_ECC[3] , un7_q_ECC_0_a2_6, un7_q_ECC_0_a2_4, N_19, 
         un27_q_ECC_0_a2_4, un27_q_ECC_0_a2_3, un27_q_ECC_0_a2_0, un7_q_ECC, 
         un27_q_ECC, \q_ECC[4] , \q_ECC[5] , un2_q_long_pkt_indicator_i, 
         \u_PH_DLY_FIFO/r_gdata_1 , \u_PH_DLY_FIFO/r_gdata_0 , 
         \u_PH_DLY_FIFO/r_gdata_3 , \u_PH_DLY_FIFO/r_gdata_2 , 
         \u_PH_DLY_FIFO/r_gdata_5 , \u_PH_DLY_FIFO/r_gdata_4 , 
         \u_PH_DLY_FIFO/r_gdata_7 , \u_PH_DLY_FIFO/r_gdata_6 , 
         \u_PH_DLY_FIFO/r_gdata_8 , \u_PH_DLY_FIFO/w_gdata_1 , 
         \u_PH_DLY_FIFO/w_gdata_0 , \u_PH_DLY_FIFO/w_gcount_0 , 
         \u_PH_DLY_FIFO/w_gcount_1 , \u_PH_DLY_FIFO/w_gdata_3 , 
         \u_PH_DLY_FIFO/w_gdata_2 , \u_PH_DLY_FIFO/w_gcount_2 , 
         \u_PH_DLY_FIFO/w_gcount_3 , \u_PH_DLY_FIFO/w_gdata_5 , 
         \u_PH_DLY_FIFO/w_gdata_4 , \u_PH_DLY_FIFO/w_gdata_7 , 
         \u_PH_DLY_FIFO/w_gdata_6 , \u_PH_DLY_FIFO/w_gdata_8 , gnd1, 
         \u_PH_DLY_FIFO/wptr_6 , \u_PH_DLY_FIFO/wptr_7 , 
         \u_PH_DLY_FIFO/wptr_8 , \u_PH_DLY_FIFO/wptr_9 , \byte_data1_fifo[14] , 
         \bytepkt_2_0_iv_0[14] , \u_PH_DLY_FIFO/w_g2b_xor_cluster_1 , 
         \u_PH_DLY_FIFO/r_gcount_w23 , \u_PH_DLY_FIFO/r_gcount_w22 , 
         \u_PH_DLY_FIFO/r_gcount_w25 , \u_PH_DLY_FIFO/r_gcount_w24 , 
         \u_PH_DLY_FIFO/r_gcount_w27 , \u_PH_DLY_FIFO/r_gcount_w26 , 
         \u_PH_DLY_FIFO/r_gcount_w29 , \u_PH_DLY_FIFO/r_gcount_w28 , 
         \u_PH_DLY_FIFO/r_g2b_xor_cluster_1 , \u_PH_DLY_FIFO/rptr_3 , 
         \u_PH_DLY_FIFO/rptr_2 , \u_PH_DLY_FIFO/rptr_5 , 
         \u_PH_DLY_FIFO/rptr_4 , \u_PH_DLY_FIFO/rptr_7 , 
         \u_PH_DLY_FIFO/rptr_6 , \u_PH_DLY_FIFO/rptr_9 , 
         \u_PH_DLY_FIFO/rptr_8 , un10_bytepkt, \q_chksum[5] , N_55, 
         \q_chksum_m[13] , \bytepkt_2_0_iv_1[13] , \byte_data1_fifo[13] , 
         \q_chksum[13] , \bytepkt_2[13] , \bytepkt_2_0_iv_0_1[4] , 
         \byte_data1_fifo[4] , N_51, \q_chksum[4] , \bytepkt_2[4] , 
         \bytepkt_2_0_iv_0_1[12] , \byte_data1_fifo[12] , N_43, \q_chksum[12] , 
         \bytepkt_2[12] , \q_chksum[3] , \bytepkt_2_0_iv_0_1[3] , N_36, N_29, 
         \bytepkt_2_0_iv_i[3] , \bytepkt_2_1_iv_0_2_1[8] , \byte_data1_fifo[8] , 
         \q_chksum[8] , \bytepkt_2_1_iv_0_2[8] , \bytepkt_2_1_iv_i[8] , 
         \q_chksum[6] , \q_vc[0] , \bytepkt_2_0_iv_0_1[6] , N_32, 
         \bytepkt_2[6] , \bytepkt_2_1_iv_0_2_1[7] , \byte_data1_fifo[7] , 
         \q_vc[1] , \bytepkt_2_1_iv_0_2[7] , \bytepkt_2[7] , 
         \bytepkt_2_0_iv_0_0[2] , \byte_data1_fifo[2] , \q_chksum[2] , 
         \bytepkt_2_0_iv_0_1[2] , N_61, \bytepkt_2[2] , 
         \bytepkt_2_0_iv_0_0[0] , \byte_data1_fifo[0] , \q_chksum[0] , 
         \bytepkt_2_0_iv_0_1[0] , \bytepkt_2[0] , \bytepkt_2_0_iv_0_0[1] , 
         \byte_data1_fifo[1] , \q_chksum[1] , \bytepkt_2_0_iv_0_1[1] , 
         \bytepkt_2[1] , \q_chksum[10] , \bytepkt_2_0_iv_2[10] , 
         \bytepkt_2_0_iv_0[10] , \byte_data1_fifo[10] , \bytepkt_2[10] , 
         \q_chksum[9] , \bytepkt_2_0_iv_2[9] , \bytepkt_2_0_iv_0[9] , 
         \byte_data1_fifo[9] , \bytepkt_2[9] , \q_chksum[11] , 
         \bytepkt_2_1_iv_3[11] , \bytepkt_2_1_iv_1[11] , \byte_data1_fifo[11] , 
         \bytepkt_2[11] , \q_dt[5] , N_54, \bytepkt_2_0_iv_0_1[5] , 
         \byte_data1_fifo[5] , \bytepkt_2[5] , \q_dt[3] , 
         \bytepkt_2_0_iv_0_0[3] , \byte_data1_fifo[3] , un18_PH_En_2, N_41, 
         \q_ECC_m[5] , \q_dt[4] , N_49, \q_wc_m[3] , \bytepkt_2_0_iv_0_1[15] , 
         \byte_data1_fifo[15] , \q_chksum[15] , \bytepkt_2[15] , 
         \u_PH_DLY_FIFO/wptr_5 , \u_PH_DLY_FIFO/wptr_4 , 
         \u_PH_DLY_FIFO/wptr_3 , \u_PH_DLY_FIFO/wptr_2 , \q_wc[0] , 
         q_bytepkt_en, \q_chksum[14] , \bytepkt_2[14] , un3_q_wc_0, \q_dt[2] , 
         \q_dt[1] , \q_dt[0] , \u_PH_DLY_FIFO/rptr_1 , \u_PH_DLY_FIFO/rptr_0 , 
         \u_PH_DLY_FIFO/wptr_1 , \u_PH_DLY_FIFO/wptr_0 , \q_chksum[7] , 
         reset_n1_c, \bytepkt_c[15] , \bytepkt_c[14] , \bytepkt_c[13] , 
         \bytepkt_c[12] , \bytepkt_c[11] , \bytepkt_c[10] , \bytepkt_c[9] , 
         \bytepkt_c[8] , \bytepkt_c[7] , \bytepkt_c[6] , \bytepkt_c[5] , 
         \bytepkt_c[4] , \bytepkt_c[3] , \bytepkt_c[2] , \bytepkt_c[1] , 
         \bytepkt_c[0] , \chksum_c[15] , chksum_rdy_c, \chksum_c[14] , 
         \chksum_c[13] , \chksum_c[12] , \chksum_c[11] , \chksum_c[10] , 
         \chksum_c[9] , \chksum_c[8] , \chksum_c[7] , \chksum_c[6] , 
         \chksum_c[5] , \chksum_c[4] , \chksum_c[3] , \chksum_c[2] , 
         \chksum_c[1] , \chksum_c[0] , \wc_c[15] , \wc_c[14] , \wc_c[13] , 
         \wc_c[12] , \wc_c[11] , \wc_c[10] , \wc_c[9] , \wc_c[8] , \wc_c[7] , 
         \wc_c[6] , \wc_c[5] , \wc_c[4] , \wc_c[3] , \wc_c[2] , \wc_c[1] , 
         \wc_c[0] , \dt_c[5] , \dt_c[4] , \dt_c[3] , \dt_c[2] , \dt_c[1] , 
         \dt_c[0] , \vc_c[1] , \vc_c[0] , \byte_data1_c[31] , \q_byte_data1[31] , 
         \byte_data1_c[30] , \q_byte_data1[30] , \byte_data1_c[29] , 
         \q_byte_data1[29] , \byte_data1_c[28] , \q_byte_data1[28] , 
         \byte_data1_c[27] , \q_byte_data1[27] , \byte_data1_c[26] , 
         \q_byte_data1[26] , \byte_data1_c[25] , \q_byte_data1[25] , 
         \byte_data1_c[24] , \q_byte_data1[24] , \byte_data1_c[23] , 
         \q_byte_data1[23] , \byte_data1_c[22] , \q_byte_data1[22] , 
         \byte_data1_c[21] , \q_byte_data1[21] , \byte_data1_c[20] , 
         \q_byte_data1[20] , \byte_data1_c[19] , \q_byte_data1[19] , 
         \byte_data1_c[18] , \q_byte_data1[18] , \byte_data1_c[17] , 
         \q_byte_data1[17] , \byte_data1_c[16] , \q_byte_data1[16] , 
         \byte_data1_c[15] , \q_byte_data1[15] , \byte_data1_c[14] , 
         \q_byte_data1[14] , \byte_data1_c[13] , \q_byte_data1[13] , 
         \byte_data1_c[12] , \q_byte_data1[12] , \byte_data1_c[11] , 
         \q_byte_data1[11] , \byte_data1_c[10] , \q_byte_data1[10] , 
         \byte_data1_c[9] , \q_byte_data1[9] , \byte_data1_c[8] , 
         \q_byte_data1[8] , \byte_data1_c[7] , \q_byte_data1[7] , 
         \byte_data1_c[6] , \q_byte_data1[6] , \byte_data1_c[5] , 
         \q_byte_data1[5] , \byte_data1_c[4] , \q_byte_data1[4] , 
         \byte_data1_c[3] , \q_byte_data1[3] , \byte_data1_c[2] , 
         \q_byte_data1[2] , \byte_data1_c[1] , \q_byte_data1[1] , 
         \byte_data1_c[0] , \q_byte_data1[0] , vcc2I;

  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h5000), .INIT1_INITVAL(16'ha003)) SLICE_0( .M1(1'bX), 
    .A1(1'b1), .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(1'bX), .DI0(1'bX), 
    .A0(\lpkt_cnt[15] ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_14), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(), .F1(\un9_wc_end_flag_a_4_i[16] ), .Q1(), 
    .F0(un9_wc_end_flag_15), .Q0());
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h0000), 
    .INIT1_INITVAL(16'h66AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_1 ( .M1(\u_PH_DLY_FIFO/w_gcount_4 ), 
    .A1(1'b1), .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(1'bX), .DI0(1'bX), 
    .A0(1'bX), .B0(1'bX), .C0(1'b1), .D0(1'b1), .FCI(1'bX), 
    .M0(\u_PH_DLY_FIFO/w_gcount_5 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/w_gctr_ci ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r4 ), .F0(), .Q0(\u_PH_DLY_FIFO/w_gcount_r5 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .REG0_REGSET("SET"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), 
    .INIT1_INITVAL(16'hAA00), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_2 ( .M1(1'bX), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(\u_PH_DLY_FIFO/iwcount_1 ), 
    .DI0(\u_PH_DLY_FIFO/iwcount_0 ), .A0(\u_PH_DLY_FIFO/wcount_0 ), .B0(1'b1), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/w_gctr_ci ), .M0(1'bX), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .FCO(\u_PH_DLY_FIFO/co0 ), .F1(\u_PH_DLY_FIFO/iwcount_1 ), 
    .Q1(\u_PH_DLY_FIFO/wcount_1 ), .F0(\u_PH_DLY_FIFO/iwcount_0 ), 
    .Q0(\u_PH_DLY_FIFO/wcount_0 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_3 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/wcount_3 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/iwcount_3 ), .DI0(\u_PH_DLY_FIFO/iwcount_2 ), 
    .A0(\u_PH_DLY_FIFO/wcount_2 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co0 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co1 ), 
    .F1(\u_PH_DLY_FIFO/iwcount_3 ), .Q1(\u_PH_DLY_FIFO/wcount_3 ), 
    .F0(\u_PH_DLY_FIFO/iwcount_2 ), .Q0(\u_PH_DLY_FIFO/wcount_2 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_4 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/wcount_5 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/iwcount_5 ), .DI0(\u_PH_DLY_FIFO/iwcount_4 ), 
    .A0(\u_PH_DLY_FIFO/wcount_4 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co1 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co2 ), 
    .F1(\u_PH_DLY_FIFO/iwcount_5 ), .Q1(\u_PH_DLY_FIFO/wcount_5 ), 
    .F0(\u_PH_DLY_FIFO/iwcount_4 ), .Q0(\u_PH_DLY_FIFO/wcount_4 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_5 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/wcount_7 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/iwcount_7 ), .DI0(\u_PH_DLY_FIFO/iwcount_6 ), 
    .A0(\u_PH_DLY_FIFO/wcount_6 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co2 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co3 ), 
    .F1(\u_PH_DLY_FIFO/iwcount_7 ), .Q1(\u_PH_DLY_FIFO/wcount_7 ), 
    .F0(\u_PH_DLY_FIFO/iwcount_6 ), .Q0(\u_PH_DLY_FIFO/wcount_6 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_6 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/wcount_9 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/iwcount_9 ), .DI0(\u_PH_DLY_FIFO/iwcount_8 ), 
    .A0(\u_PH_DLY_FIFO/wcount_8 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co3 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(), 
    .F1(\u_PH_DLY_FIFO/iwcount_9 ), .Q1(\u_PH_DLY_FIFO/wcount_9 ), 
    .F0(\u_PH_DLY_FIFO/iwcount_8 ), .Q0(\u_PH_DLY_FIFO/wcount_8 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h0000), 
    .INIT1_INITVAL(16'h66AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_7 ( .M1(\u_PH_DLY_FIFO/w_gcount_6 ), 
    .A1(1'b1), .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(1'bX), .DI0(1'bX), 
    .A0(1'bX), .B0(1'bX), .C0(1'b1), .D0(1'b1), .FCI(1'bX), 
    .M0(\u_PH_DLY_FIFO/w_gcount_7 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/r_gctr_ci ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r6 ), .F0(), .Q0(\u_PH_DLY_FIFO/w_gcount_r7 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .REG0_REGSET("SET"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), 
    .INIT1_INITVAL(16'hAA00), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_8 ( .M1(1'bX), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(\u_PH_DLY_FIFO/ircount_1 ), 
    .DI0(\u_PH_DLY_FIFO/ircount_0 ), .A0(\u_PH_DLY_FIFO/rcount_0 ), .B0(1'b1), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/r_gctr_ci ), .M0(1'bX), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .FCO(\u_PH_DLY_FIFO/co0_1 ), .F1(\u_PH_DLY_FIFO/ircount_1 ), 
    .Q1(\u_PH_DLY_FIFO/rcount_1 ), .F0(\u_PH_DLY_FIFO/ircount_0 ), 
    .Q0(\u_PH_DLY_FIFO/rcount_0 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_9 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/rcount_3 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/ircount_3 ), .DI0(\u_PH_DLY_FIFO/ircount_2 ), 
    .A0(\u_PH_DLY_FIFO/rcount_2 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co0_1 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co1_1 ), 
    .F1(\u_PH_DLY_FIFO/ircount_3 ), .Q1(\u_PH_DLY_FIFO/rcount_3 ), 
    .F0(\u_PH_DLY_FIFO/ircount_2 ), .Q0(\u_PH_DLY_FIFO/rcount_2 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_10 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/rcount_5 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/ircount_5 ), .DI0(\u_PH_DLY_FIFO/ircount_4 ), 
    .A0(\u_PH_DLY_FIFO/rcount_4 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co1_1 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co2_1 ), 
    .F1(\u_PH_DLY_FIFO/ircount_5 ), .Q1(\u_PH_DLY_FIFO/rcount_5 ), 
    .F0(\u_PH_DLY_FIFO/ircount_4 ), .Q0(\u_PH_DLY_FIFO/rcount_4 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_11 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/rcount_7 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/ircount_7 ), .DI0(\u_PH_DLY_FIFO/ircount_6 ), 
    .A0(\u_PH_DLY_FIFO/rcount_6 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co2_1 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co3_1 ), 
    .F1(\u_PH_DLY_FIFO/ircount_7 ), .Q1(\u_PH_DLY_FIFO/rcount_7 ), 
    .F0(\u_PH_DLY_FIFO/ircount_6 ), .Q0(\u_PH_DLY_FIFO/rcount_6 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'hAA00), .INIT1_INITVAL(16'hAA00), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_12 ( .M1(1'bX), 
    .A1(\u_PH_DLY_FIFO/rcount_9 ), .B1(1'b1), .C1(1'b1), .D1(1'b1), 
    .DI1(\u_PH_DLY_FIFO/ircount_9 ), .DI0(\u_PH_DLY_FIFO/ircount_8 ), 
    .A0(\u_PH_DLY_FIFO/rcount_8 ), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co3_1 ), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(), 
    .F1(\u_PH_DLY_FIFO/ircount_9 ), .Q1(\u_PH_DLY_FIFO/rcount_9 ), 
    .F0(\u_PH_DLY_FIFO/ircount_8 ), .Q0(\u_PH_DLY_FIFO/rcount_8 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h0000), 
    .INIT1_INITVAL(16'h66AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_13 ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_r0 ), .A1(\u_PH_DLY_FIFO/rden_i ), 
    .B1(\u_PH_DLY_FIFO/rden_i ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), .DI0(1'bX), 
    .A0(1'bX), .B0(1'bX), .C0(1'b1), .D0(1'b1), .FCI(1'bX), 
    .M0(\u_PH_DLY_FIFO/w_gcount_r1 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/cmp_ci ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r20 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r21 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_14 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_w0 ), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B1(\u_PH_DLY_FIFO/wcount_r1 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/rcount_0 ), .B0(\u_PH_DLY_FIFO/wcount_r0 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/cmp_ci ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_w1 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co0_2 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w20 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w21 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_15 ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_r8 ), .A1(\u_PH_DLY_FIFO/rcount_3 ), 
    .B1(\u_PH_DLY_FIFO/wcount_r3 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/rcount_2 ), .B0(\u_PH_DLY_FIFO/wcount_r2 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/co0_2 ), 
    .M0(\u_PH_DLY_FIFO/w_gcount_r9 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co1_2 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r28 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r29 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_16 ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_r6 ), .A1(\u_PH_DLY_FIFO/rcount_5 ), 
    .B1(\u_PH_DLY_FIFO/wcount_r5 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/rcount_4 ), .B0(\u_PH_DLY_FIFO/wcount_r4 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/co1_2 ), 
    .M0(\u_PH_DLY_FIFO/w_gcount_r7 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co2_2 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r26 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r27 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_17 ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_r4 ), .A1(\u_PH_DLY_FIFO/rcount_7 ), 
    .B1(\u_PH_DLY_FIFO/wcount_r7 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/rcount_6 ), 
    .B0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co2_2 ), .M0(\u_PH_DLY_FIFO/w_gcount_r5 ), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co3_2 ), 
    .F1(), .Q1(\u_PH_DLY_FIFO/w_gcount_r24 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r25 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_18 ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_r2 ), .A1(\u_PH_DLY_FIFO/empty_cmp_set ), 
    .B1(\u_PH_DLY_FIFO/empty_cmp_clr ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/rcount_8 ), .B0(\u_PH_DLY_FIFO/wcount_r8 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/co3_2 ), 
    .M0(\u_PH_DLY_FIFO/w_gcount_r3 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/empty_d_c ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r22 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r23 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .REG0_REGSET("SET"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h0000), 
    .INIT1_INITVAL(16'h0000), .REG0_SD("VHI"), .CHECK_DI0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_19 ( .M1(1'bX), .A1(1'b1), 
    .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(1'bX), .DI0(\u_PH_DLY_FIFO/empty_d ), 
    .A0(1'b1), .B0(1'b1), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/empty_d_c ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(), .F1(), .Q1(), 
    .F0(\u_PH_DLY_FIFO/empty_d ), .Q0(\u_PH_DLY_FIFO/Empty ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h0000), 
    .INIT1_INITVAL(16'h66AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_20 ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_8 ), .A1(\u_PH_DLY_FIFO/wren_i ), 
    .B1(\u_PH_DLY_FIFO/wren_i ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), .DI0(1'bX), 
    .A0(1'bX), .B0(1'bX), .C0(1'b1), .D0(1'b1), .FCI(1'bX), 
    .M0(\u_PH_DLY_FIFO/w_gcount_9 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/cmp_ci_1 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r8 ), .F0(), .Q0(\u_PH_DLY_FIFO/w_gcount_r9 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_21 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_8 ), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B1(\u_PH_DLY_FIFO/rcount_w1 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/wcount_0 ), .B0(\u_PH_DLY_FIFO/rcount_w0 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/cmp_ci_1 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_9 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co0_3 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w8 ), .F0(), .Q0(\u_PH_DLY_FIFO/r_gcount_w9 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_22 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_6 ), .A1(\u_PH_DLY_FIFO/wcount_3 ), 
    .B1(\u_PH_DLY_FIFO/rcount_w3 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/wcount_2 ), .B0(\u_PH_DLY_FIFO/rcount_w2 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/co0_3 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_7 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co1_3 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w6 ), .F0(), .Q0(\u_PH_DLY_FIFO/r_gcount_w7 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_23 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_4 ), .A1(\u_PH_DLY_FIFO/wcount_5 ), 
    .B1(\u_PH_DLY_FIFO/rcount_w5 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/wcount_4 ), .B0(\u_PH_DLY_FIFO/rcount_w4 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/co1_3 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_5 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co2_3 ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w4 ), .F0(), .Q0(\u_PH_DLY_FIFO/r_gcount_w5 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_24 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_2 ), .A1(\u_PH_DLY_FIFO/wcount_7 ), 
    .B1(\u_PH_DLY_FIFO/rcount_w7 ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/wcount_6 ), 
    .B0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .C0(1'b1), .D0(1'b1), 
    .FCI(\u_PH_DLY_FIFO/co2_3 ), .M0(\u_PH_DLY_FIFO/r_gcount_3 ), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/co3_3 ), 
    .F1(), .Q1(\u_PH_DLY_FIFO/r_gcount_w2 ), .F0(), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w3 ));
  SCCU2C #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h99AA), 
    .INIT1_INITVAL(16'h99AA), .CHECK_M1(1'b1), .CHECK_M0(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_25 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_0 ), .A1(\u_PH_DLY_FIFO/full_cmp_set ), 
    .B1(\u_PH_DLY_FIFO/full_cmp_clr ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/wcount_8 ), .B0(\u_PH_DLY_FIFO/rcount_w8 ), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/co3_3 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_1 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .FCO(\u_PH_DLY_FIFO/full_d_c ), .F1(), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w0 ), .F0(), .Q0(\u_PH_DLY_FIFO/r_gcount_w1 ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .LSRMUX("SIG"), 
    .CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .INIT0_INITVAL(16'h0000), .INIT1_INITVAL(16'h0000), 
    .REG0_SD("VHI"), .CHECK_DI0(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_26 ( .M1(1'bX), .A1(1'b1), .B1(1'b1), .C1(1'b1), 
    .D1(1'b1), .DI1(1'bX), .DI0(\u_PH_DLY_FIFO/full_d ), .A0(1'b1), .B0(1'b1), 
    .C0(1'b1), .D0(1'b1), .FCI(\u_PH_DLY_FIFO/full_d_c ), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .FCO(), .F1(), .Q1(), 
    .F0(\u_PH_DLY_FIFO/full_d ), .Q0(\u_PH_DLY_FIFO/Full ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h500c), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .CHECK_DI1(1'b1)) SLICE_27( 
    .M1(1'bX), .A1(lpkt_cnt), .B1(\lpkt_cnt[0] ), .C1(1'b1), .D1(1'b1), 
    .DI1(\lpkt_cnt_s[0] ), .DI0(1'bX), .A0(1'b1), .B0(lpkt_cnt), .C0(1'b1), 
    .D0(1'b1), .FCI(1'bX), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), 
    .FCO(\lpkt_cnt_cry[0] ), .F1(\lpkt_cnt_s[0] ), .Q1(\lpkt_cnt[0] ), .F0(), 
    .Q0());
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_28( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[2] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[2] ), 
    .DI0(\lpkt_cnt_s[1] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[1] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[0] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(1'bX), .FCO(\lpkt_cnt_cry[2] ), .F1(\lpkt_cnt_s[2] ), 
    .Q1(\lpkt_cnt[2] ), .F0(\lpkt_cnt_s[1] ), .Q0(\lpkt_cnt[1] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_29( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[4] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[4] ), 
    .DI0(\lpkt_cnt_s[3] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[3] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[2] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(1'bX), .FCO(\lpkt_cnt_cry[4] ), .F1(\lpkt_cnt_s[4] ), 
    .Q1(\lpkt_cnt[4] ), .F0(\lpkt_cnt_s[3] ), .Q0(\lpkt_cnt[3] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_30( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[6] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[6] ), 
    .DI0(\lpkt_cnt_s[5] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[5] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[4] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(1'bX), .FCO(\lpkt_cnt_cry[6] ), .F1(\lpkt_cnt_s[6] ), 
    .Q1(\lpkt_cnt[6] ), .F0(\lpkt_cnt_s[5] ), .Q0(\lpkt_cnt[5] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_31( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[8] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[8] ), 
    .DI0(\lpkt_cnt_s[7] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[7] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[6] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(1'bX), .FCO(\lpkt_cnt_cry[8] ), .F1(\lpkt_cnt_s[8] ), 
    .Q1(\lpkt_cnt[8] ), .F0(\lpkt_cnt_s[7] ), .Q0(\lpkt_cnt[7] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_32( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[10] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[10] ), 
    .DI0(\lpkt_cnt_s[9] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[9] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[8] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(1'bX), .FCO(\lpkt_cnt_cry[10] ), .F1(\lpkt_cnt_s[10] ), 
    .Q1(\lpkt_cnt[10] ), .F0(\lpkt_cnt_s[9] ), .Q0(\lpkt_cnt[9] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_33( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[12] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[12] ), 
    .DI0(\lpkt_cnt_s[11] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[11] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[10] ), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(1'bX), .FCO(\lpkt_cnt_cry[12] ), 
    .F1(\lpkt_cnt_s[12] ), .Q1(\lpkt_cnt[12] ), .F0(\lpkt_cnt_s[11] ), 
    .Q0(\lpkt_cnt[11] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h8000), 
    .INIT1_INITVAL(16'h8000), .REG1_SD("VHI"), .REG0_SD("VHI"), 
    .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_34( .M1(1'bX), .A1(lpkt_cnt), 
    .B1(\lpkt_cnt[14] ), .C1(1'b1), .D1(1'b1), .DI1(\lpkt_cnt_s[14] ), 
    .DI0(\lpkt_cnt_s[13] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[13] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[12] ), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(1'bX), .FCO(\lpkt_cnt_cry[14] ), 
    .F1(\lpkt_cnt_s[14] ), .Q1(\lpkt_cnt[14] ), .F0(\lpkt_cnt_s[13] ), 
    .Q0(\lpkt_cnt[13] ));
  SCCU2C #(.CLKMUX("SIG"), .CEMUX("VHI"), .CCU2_INJECT1_0("NO"), 
    .CCU2_INJECT1_1("NO"), .SRMODE("ASYNC"), .INIT0_INITVAL(16'h800a), 
    .INIT1_INITVAL(16'h5003), .REG0_SD("VHI"), .CHECK_DI0(1'b1)) SLICE_35( 
    .M1(1'bX), .A1(1'b1), .B1(1'b1), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(\lpkt_cnt_s[15] ), .A0(lpkt_cnt), .B0(\lpkt_cnt[15] ), .C0(1'b1), 
    .D0(1'b1), .FCI(\lpkt_cnt_cry[14] ), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(1'bX), .FCO(), .F1(), .Q1(), .F0(\lpkt_cnt_s[15] ), 
    .Q0(\lpkt_cnt[15] ));
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h5003), .INIT1_INITVAL(16'h900a)) SLICE_36( .M1(1'bX), 
    .A1(\q_wc[1] ), .B1(\lpkt_cnt[0] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(1'b1), .B0(1'b1), .C0(1'b1), .D0(1'b1), .FCI(1'bX), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), 
    .FCO(un9_wc_end_flag_a_4_cry_0), .F1(), .Q1(), .F0(), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_37( .M1(1'bX), 
    .A1(\q_wc[3] ), .B1(\lpkt_cnt[2] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[2] ), .B0(\lpkt_cnt[1] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_0), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_2), .F1(un9_wc_end_flag_2), .Q1(), 
    .F0(un9_wc_end_flag_1), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_38( .M1(1'bX), 
    .A1(\q_wc[5] ), .B1(\lpkt_cnt[4] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[4] ), .B0(\lpkt_cnt[3] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_2), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_4), .F1(un9_wc_end_flag_4), .Q1(), 
    .F0(un9_wc_end_flag_3), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_39( .M1(1'bX), 
    .A1(\q_wc[7] ), .B1(\lpkt_cnt[6] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[6] ), .B0(\lpkt_cnt[5] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_4), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_6), .F1(un9_wc_end_flag_6), .Q1(), 
    .F0(un9_wc_end_flag_5), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_40( .M1(1'bX), 
    .A1(\q_wc[9] ), .B1(\lpkt_cnt[8] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[8] ), .B0(\lpkt_cnt[7] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_6), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_8), .F1(un9_wc_end_flag_8), .Q1(), 
    .F0(un9_wc_end_flag_7), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_41( .M1(1'bX), 
    .A1(\q_wc[11] ), .B1(\lpkt_cnt[10] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[10] ), .B0(\lpkt_cnt[9] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_8), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_10), .F1(un9_wc_end_flag_10), 
    .Q1(), .F0(un9_wc_end_flag_9), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_42( .M1(1'bX), 
    .A1(\q_wc[13] ), .B1(\lpkt_cnt[12] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[12] ), .B0(\lpkt_cnt[11] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_10), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_12), .F1(un9_wc_end_flag_12), 
    .Q1(), .F0(un9_wc_end_flag_11), .Q0());
  SCCU2C #(.CCU2_INJECT1_0("NO"), .CCU2_INJECT1_1("NO"), 
    .INIT0_INITVAL(16'h900a), .INIT1_INITVAL(16'h900a)) SLICE_43( .M1(1'bX), 
    .A1(\q_wc[15] ), .B1(\lpkt_cnt[14] ), .C1(1'b1), .D1(1'b1), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_wc[14] ), .B0(\lpkt_cnt[13] ), .C0(1'b1), .D0(1'b1), 
    .FCI(un9_wc_end_flag_a_4_cry_12), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .FCO(un9_wc_end_flag_a_4_cry_14), .F1(un9_wc_end_flag_14), 
    .Q1(), .F0(un9_wc_end_flag_13), .Q0());
  SLOGICB #(.M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'hA0A8), .LUT1_INITVAL(16'hDC50), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1), .CHECK_M1(1'b1)) SLICE_44( .M1(\EoTp_En[0] ), .FXA(1'bX), 
    .FXB(1'bX), .A1(N_28), .B1(WC_1_En), .C1(\byte_data1_fifo[6] ), 
    .D1(\q_wc[14] ), .DI1(1'bX), .DI0(\un2_EoTp_En_0[0] ), .A0(EoTp_c), 
    .B0(WC_1_En), .C0(chksum_En), .D0(q_long_pkt_indicator), .M0(1'bX), 
    .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2_0_iv_0_0[6] ), .Q1(\EoTp_En[1] ), .OFX0(), 
    .F0(\un2_EoTp_En_0[0] ), .Q0(\EoTp_En[0] ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h2F22), .LUT1_INITVAL(16'hD0DD), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1), .CHECK_CE(1'b1)) SLICE_45( .M1(1'bX), .FXA(1'bX), 
    .FXB(1'bX), .A1(long_en_c), .B1(q_long_en), .C1(q_short_en), 
    .D1(short_en_c), .DI1(1'bX), .DI0(un1_q_long_pkt_indicator_1_1_i), 
    .A0(short_en_c), .B0(q_short_en), .C0(q_long_en), .D0(long_en_c), 
    .M0(1'bX), .CE(un1_q_long_pkt_indicator_1_i), .CLK(byte_clk1_c), .LSR(1'bX), 
    .OFX1(), .F1(un1_q_long_pkt_indicator_1_1), .Q1(), .OFX0(), 
    .F0(un1_q_long_pkt_indicator_1_1_i), .Q0(PH_En));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h2222), .LUT1_INITVAL(16'h6666), .REG1_SD("VHI"), 
    .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_46( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\PH_cnt[0] ), .B1(\PH_cnt[1] ), .C1(1'bX), 
    .D1(1'bX), .DI1(\PH_cnt_RNO[1] ), .DI0(\un7_PH_cnt_0[0] ), .A0(PH_En), 
    .B0(\PH_cnt[0] ), .C0(1'bX), .D0(1'bX), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), .F1(\PH_cnt_RNO[1] ), 
    .Q1(\PH_cnt[1] ), .OFX0(), .F0(\un7_PH_cnt_0[0] ), .Q0(\PH_cnt[0] ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6A6A), .LUT1_INITVAL(16'h4C80), .REG1_SD("VHI"), 
    .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1)) SLICE_47( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(CO1), .B1(PH_En), .C1(\PH_cnt[2] ), 
    .D1(\PH_cnt[3] ), .DI1(\un7_PH_cnt_0[3] ), .DI0(\PH_cnt_RNO[2] ), 
    .A0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), .C0(\PH_cnt[0] ), .D0(1'bX), .M0(1'bX), 
    .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), .F1(\un7_PH_cnt_0[3] ), 
    .Q1(\PH_cnt[3] ), .OFX0(), .F0(\PH_cnt_RNO[2] ), .Q0(\PH_cnt[2] ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h0004), .REG0_SD("VHI"), .CHECK_DI0(1'b1)) SLICE_48( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(1'bX), .B1(1'bX), .C1(1'bX), 
    .D1(1'bX), .DI1(1'bX), .DI0(DataID_En_2), .A0(\PH_cnt[2] ), 
    .B0(\PH_cnt[1] ), .C0(\PH_cnt[3] ), .D0(\PH_cnt[0] ), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), .F1(), .Q1(), .OFX0(), 
    .F0(DataID_En_2), .Q0(WC_0_En));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h1000), .LUT1_INITVAL(16'h4444), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1)) SLICE_49( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), 
    .A1(\PH_cnt[0] ), .B1(\PH_cnt[2] ), .C1(1'bX), .D1(1'bX), .DI1(1'bX), 
    .DI0(ECC_En_2), .A0(\PH_cnt[3] ), .B0(\PH_cnt[2] ), .C0(\PH_cnt[1] ), 
    .D0(\PH_cnt[0] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), 
    .OFX1(), .F1(un2_lpkt_cnt_En_1), .Q1(), .OFX0(), .F0(ECC_En_2), 
    .Q0(WC_1_En));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'hFFBF), .LUT1_INITVAL(16'h0001), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1)) SLICE_50( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), 
    .A1(\EoTp_En[0] ), .B1(\EoTp_En[1] ), .C1(chksum_En), .D1(q_chksum_En), 
    .DI1(1'bX), .DI0(N_78_i), .A0(WC_0_En), .B0(bytepkt_en_2_i_a2_3), 
    .C0(bytepkt_en_2_i_a2_4), .D0(hsSync_En), .M0(1'bX), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), .F1(bytepkt_en_2_i_a2_4), .Q1(), 
    .OFX0(), .F0(N_78_i), .Q0(bytepkt_en_c));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h0101), .LUT1_INITVAL(16'hFFFE), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1)) SLICE_51( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), 
    .A1(un9_wc_end_flag_14), .B1(un9_wc_end_flag_15), 
    .C1(un9_wc_end_flag_NE_7), .D1(un9_wc_end_flag_NE_11), .DI1(1'bX), 
    .DI0(un9_wc_end_flag_NE_i), .A0(un9_wc_end_flag_NE_9), 
    .B0(un9_wc_end_flag_NE_10), .C0(un9_wc_end_flag_NE_14), .D0(1'bX), 
    .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), 
    .F1(un9_wc_end_flag_NE_14), .Q1(), .OFX0(), .F0(un9_wc_end_flag_NE_i), 
    .Q0(chksum_En));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("VHI"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h0002), .LUT1_INITVAL(16'h8888), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1)) SLICE_52( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), 
    .A1(\PH_cnt[0] ), .B1(\PH_cnt[1] ), .C1(1'bX), .D1(1'bX), .DI1(1'bX), 
    .DI0(hsSync_En_2), .A0(\PH_cnt[0] ), .B0(\PH_cnt[1] ), .C0(\PH_cnt[2] ), 
    .D0(\PH_cnt[3] ), .M0(1'bX), .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), 
    .OFX1(), .F1(CO1), .Q1(), .OFX0(), .F0(hsSync_En_2), .Q0(hsSync_En));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h1000), .LUT1_INITVAL(16'hAAAB), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1), .CHECK_CE(1'b1)) SLICE_53( .M1(1'bX), .FXA(1'bX), 
    .FXB(1'bX), .A1(un2_lpkt_cnt_En_0), .B1(un9_wc_end_flag_NE_9), 
    .C1(un9_wc_end_flag_NE_10), .D1(un9_wc_end_flag_NE_14), .DI1(1'bX), 
    .DI0(un2_lpkt_cnt_En_0), .A0(\PH_cnt[1] ), .B0(\PH_cnt[3] ), 
    .C0(q_long_pkt_indicator), .D0(un2_lpkt_cnt_En_1), .M0(1'bX), 
    .CE(un15_lpkt_cnt_En_i), .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), 
    .F1(un15_lpkt_cnt_En_i), .Q1(), .OFX0(), .F0(un2_lpkt_cnt_En_0), 
    .Q0(lpkt_cnt));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h9669), .LUT1_INITVAL(16'h9669), .REG1_SD("VHI"), 
    .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), .CHECK_CE(1'b1)) 
    SLICE_54( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_22), .B1(N_31_i), 
    .C1(un87_q_ECC_0_a2_3), .D1(un87_q_ECC_0_a2_4), .DI1(un87_q_ECC), 
    .DI0(un108_q_ECC), .A0(N_22), .B0(N_31_i), .C0(un108_q_ECC_0_a2_2), 
    .D0(un108_q_ECC_0_a2_3), .M0(1'bX), .CE(un5_q_ECC_0), .CLK(byte_clk1_c), 
    .LSR(1'bX), .OFX1(), .F1(un87_q_ECC), .Q1(\q_ECC[1] ), .OFX0(), 
    .F0(un108_q_ECC), .Q0(\q_ECC[0] ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h9669), .LUT1_INITVAL(16'h6996), .REG1_SD("VHI"), 
    .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), .CHECK_CE(1'b1)) 
    SLICE_55( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(un7_q_ECC_0_a2_2), 
    .B1(un47_q_ECC_0_a2_3), .C1(un47_q_ECC_0_a2_4), .D1(un47_q_ECC_0_a2_5), 
    .DI1(un47_q_ECC), .DI0(un67_q_ECC), .A0(N_31_i), .B0(un67_q_ECC_0_a2_4), 
    .C0(un67_q_ECC_0_a2_5), .D0(un67_q_ECC_4), .M0(1'bX), .CE(un5_q_ECC_0), 
    .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), .F1(un47_q_ECC), .Q1(\q_ECC[3] ), 
    .OFX0(), .F0(un67_q_ECC), .Q0(\q_ECC[2] ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6996), .REG1_SD("VHI"), 
    .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), .CHECK_CE(1'b1)) 
    SLICE_56( .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_19), 
    .B1(un7_q_ECC_0_a2_4), .C1(un7_q_ECC_0_a2_6), .D1(un67_q_ECC_4), 
    .DI1(un7_q_ECC), .DI0(un27_q_ECC), .A0(N_22), .B0(un27_q_ECC_0_a2_0), 
    .C0(un27_q_ECC_0_a2_3), .D0(un27_q_ECC_0_a2_4), .M0(1'bX), 
    .CE(un5_q_ECC_0), .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), .F1(un7_q_ECC), 
    .Q1(\q_ECC[5] ), .OFX0(), .F0(un27_q_ECC), .Q0(\q_ECC[4] ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'hBBBB), .LUT1_INITVAL(16'h2222), .REG0_SD("VHI"), 
    .CHECK_DI0(1'b1), .CHECK_CE(1'b1)) SLICE_59( .M1(1'bX), .FXA(1'bX), 
    .FXB(1'bX), .A1(q_long_en), .B1(\u_PH_DLY_FIFO/Full ), .C1(1'bX), 
    .D1(1'bX), .DI1(1'bX), .DI0(un2_q_long_pkt_indicator_i), .A0(q_short_en), 
    .B0(short_en_c), .C0(1'bX), .D0(1'bX), .M0(1'bX), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .LSR(1'bX), .OFX1(), 
    .F1(\u_PH_DLY_FIFO/wren_i ), .Q1(), .OFX0(), 
    .F0(un2_q_long_pkt_indicator_i), .Q0(q_long_pkt_indicator));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_60 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B1(\u_PH_DLY_FIFO/rcount_2 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/r_gdata_1 ), .DI0(\u_PH_DLY_FIFO/r_gdata_0 ), 
    .A0(\u_PH_DLY_FIFO/rcount_0 ), .B0(\u_PH_DLY_FIFO/rcount_1 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/r_gdata_1 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_1 ), .OFX0(), .F0(\u_PH_DLY_FIFO/r_gdata_0 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_0 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_61 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/rcount_3 ), 
    .B1(\u_PH_DLY_FIFO/rcount_4 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/r_gdata_3 ), .DI0(\u_PH_DLY_FIFO/r_gdata_2 ), 
    .A0(\u_PH_DLY_FIFO/rcount_2 ), .B0(\u_PH_DLY_FIFO/rcount_3 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/r_gdata_3 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_3 ), .OFX0(), .F0(\u_PH_DLY_FIFO/r_gdata_2 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_2 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_62 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/rcount_5 ), 
    .B1(\u_PH_DLY_FIFO/rcount_6 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/r_gdata_5 ), .DI0(\u_PH_DLY_FIFO/r_gdata_4 ), 
    .A0(\u_PH_DLY_FIFO/rcount_4 ), .B0(\u_PH_DLY_FIFO/rcount_5 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/r_gdata_5 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_5 ), .OFX0(), .F0(\u_PH_DLY_FIFO/r_gdata_4 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_4 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_63 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/rcount_7 ), 
    .B1(\u_PH_DLY_FIFO/rcount_8 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/r_gdata_7 ), .DI0(\u_PH_DLY_FIFO/r_gdata_6 ), 
    .A0(\u_PH_DLY_FIFO/rcount_6 ), .B0(\u_PH_DLY_FIFO/rcount_7 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/r_gdata_7 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_7 ), .OFX0(), .F0(\u_PH_DLY_FIFO/r_gdata_6 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_6 ));
  SLOGICB #(.M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), 
    .REG0_SD("VHI"), .CHECK_DI0(1'b1), .CHECK_M1(1'b1), .CHECK_CE(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_64 ( .M1(\u_PH_DLY_FIFO/rcount_9 ), 
    .FXA(1'bX), .FXB(1'bX), .A1(1'bX), .B1(1'bX), .C1(1'bX), .D1(1'bX), 
    .DI1(1'bX), .DI0(\u_PH_DLY_FIFO/r_gdata_8 ), .A0(\u_PH_DLY_FIFO/rcount_8 ), 
    .B0(\u_PH_DLY_FIFO/rcount_9 ), .C0(1'bX), .D0(1'bX), .M0(1'bX), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .OFX1(), .F1(), .Q1(\u_PH_DLY_FIFO/r_gcount_9 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/r_gdata_8 ), .Q0(\u_PH_DLY_FIFO/r_gcount_8 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_80 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B1(\u_PH_DLY_FIFO/wcount_2 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/w_gdata_1 ), .DI0(\u_PH_DLY_FIFO/w_gdata_0 ), 
    .A0(\u_PH_DLY_FIFO/wcount_0 ), .B0(\u_PH_DLY_FIFO/wcount_1 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/w_gdata_1 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_1 ), .OFX0(), .F0(\u_PH_DLY_FIFO/w_gdata_0 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_0 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_81 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/wcount_3 ), 
    .B1(\u_PH_DLY_FIFO/wcount_4 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/w_gdata_3 ), .DI0(\u_PH_DLY_FIFO/w_gdata_2 ), 
    .A0(\u_PH_DLY_FIFO/wcount_2 ), .B0(\u_PH_DLY_FIFO/wcount_3 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/w_gdata_3 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_3 ), .OFX0(), .F0(\u_PH_DLY_FIFO/w_gdata_2 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_2 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_82 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/wcount_5 ), 
    .B1(\u_PH_DLY_FIFO/wcount_6 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/w_gdata_5 ), .DI0(\u_PH_DLY_FIFO/w_gdata_4 ), 
    .A0(\u_PH_DLY_FIFO/wcount_4 ), .B0(\u_PH_DLY_FIFO/wcount_5 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/w_gdata_5 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_5 ), .OFX0(), .F0(\u_PH_DLY_FIFO/w_gdata_4 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_4 ));
  SLOGICB #(.CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), .GSR("DISABLED"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6666), 
    .REG1_SD("VHI"), .REG0_SD("VHI"), .CHECK_DI1(1'b1), .CHECK_DI0(1'b1), 
    .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_83 ( .M1(1'bX), 
    .FXA(1'bX), .FXB(1'bX), .A1(\u_PH_DLY_FIFO/wcount_7 ), 
    .B1(\u_PH_DLY_FIFO/wcount_8 ), .C1(1'bX), .D1(1'bX), 
    .DI1(\u_PH_DLY_FIFO/w_gdata_7 ), .DI0(\u_PH_DLY_FIFO/w_gdata_6 ), 
    .A0(\u_PH_DLY_FIFO/wcount_6 ), .B0(\u_PH_DLY_FIFO/wcount_7 ), .C0(1'bX), 
    .D0(1'bX), .M0(1'bX), .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/w_gdata_7 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_7 ), .OFX0(), .F0(\u_PH_DLY_FIFO/w_gdata_6 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_6 ));
  SLOGICB #(.M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), .LSRMUX("SIG"), 
    .GSR("DISABLED"), .SRMODE("ASYNC"), .LUT0_INITVAL(16'h6666), 
    .REG0_SD("VHI"), .CHECK_DI0(1'b1), .CHECK_M1(1'b1), .CHECK_CE(1'b1), 
    .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_84 ( .M1(\u_PH_DLY_FIFO/wcount_9 ), 
    .FXA(1'bX), .FXB(1'bX), .A1(1'bX), .B1(1'bX), .C1(1'bX), .D1(1'bX), 
    .DI1(1'bX), .DI0(\u_PH_DLY_FIFO/w_gdata_8 ), .A0(\u_PH_DLY_FIFO/wcount_8 ), 
    .B0(\u_PH_DLY_FIFO/wcount_9 ), .C0(1'bX), .D0(1'bX), .M0(1'bX), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .OFX1(), .F1(), .Q1(\u_PH_DLY_FIFO/w_gcount_9 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/w_gdata_8 ), .Q0(\u_PH_DLY_FIFO/w_gcount_8 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h0000), .CHECK_M1(1'b1), .CHECK_M0(1'b1), .CHECK_CE(1'b1), 
    .CHECK_LSR(1'b1)) SLICE_98( .M1(\u_PH_DLY_FIFO/wcount_7 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(1'bX), .B1(1'bX), .C1(1'bX), .D1(1'bX), .DI1(1'bX), 
    .DI0(1'bX), .A0(1'bX), .B0(1'bX), .C0(1'bX), .D0(1'bX), 
    .M0(\u_PH_DLY_FIFO/wcount_6 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(), 
    .Q1(\u_PH_DLY_FIFO/wptr_7 ), .OFX0(), .F0(gnd1), 
    .Q0(\u_PH_DLY_FIFO/wptr_6 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'hFFFE), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) SLICE_99( 
    .M1(\u_PH_DLY_FIFO/wcount_9 ), .FXA(1'bX), .FXB(1'bX), 
    .A1(un9_wc_end_flag_9), .B1(un9_wc_end_flag_10), .C1(un9_wc_end_flag_11), 
    .D1(un9_wc_end_flag_12), .DI1(1'bX), .DI0(1'bX), .A0(\q_wc[1] ), 
    .B0(\q_wc[7] ), .C0(\q_wc[10] ), .D0(\q_wc[14] ), 
    .M0(\u_PH_DLY_FIFO/wcount_8 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), 
    .F1(un9_wc_end_flag_NE_11), .Q1(\u_PH_DLY_FIFO/wptr_9 ), .OFX0(), 
    .F0(un67_q_ECC_0_a2_5), .Q0(\u_PH_DLY_FIFO/wptr_8 ));
  SLOGICB #(.LUT0_INITVAL(16'hDC50), .LUT1_INITVAL(16'hFEFF)) SLICE_100( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(WC_1_En), 
    .C1(hsSync_En), .D1(lpkt_cnt), .DI1(1'bX), .DI0(1'bX), .A0(N_28), 
    .B0(WC_0_En), .C0(\byte_data1_fifo[14] ), .D0(\q_wc[6] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(N_28), .Q1(), .OFX0(), 
    .F0(\bytepkt_2_0_iv_0[14] ), .Q0());
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6996), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_101 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_w2 ), .FXA(1'bX), .FXB(1'bX), 
    .A1(\u_PH_DLY_FIFO/w_gcount_r21 ), .B1(\u_PH_DLY_FIFO/w_gcount_r20 ), 
    .C1(\u_PH_DLY_FIFO/w_g2b_xor_cluster_1 ), 
    .D1(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\u_PH_DLY_FIFO/w_gcount_r29 ), .B0(\u_PH_DLY_FIFO/w_gcount_r28 ), 
    .C0(\u_PH_DLY_FIFO/w_gcount_r27 ), .D0(\u_PH_DLY_FIFO/w_gcount_r26 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_w3 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/wcount_r0 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w22 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w23 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h9696), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_102 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_w4 ), .FXA(1'bX), .FXB(1'bX), 
    .A1(\u_PH_DLY_FIFO/w_gcount_r21 ), 
    .B1(\u_PH_DLY_FIFO/w_g2b_xor_cluster_1 ), 
    .C1(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), .D1(1'bX), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/w_gcount_r25 ), 
    .B0(\u_PH_DLY_FIFO/w_gcount_r24 ), .C0(\u_PH_DLY_FIFO/w_gcount_r23 ), 
    .D0(\u_PH_DLY_FIFO/w_gcount_r22 ), .M0(\u_PH_DLY_FIFO/r_gcount_w5 ), 
    .CE(1'bX), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), 
    .F1(\u_PH_DLY_FIFO/wcount_r1 ), .Q1(\u_PH_DLY_FIFO/r_gcount_w24 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_1 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w25 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6996), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_103 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_w6 ), .FXA(1'bX), .FXB(1'bX), 
    .A1(\u_PH_DLY_FIFO/wcount_r8 ), .B1(\u_PH_DLY_FIFO/w_gcount_r27 ), 
    .C1(\u_PH_DLY_FIFO/w_gcount_r26 ), .D1(\u_PH_DLY_FIFO/w_gcount_r25 ), 
    .DI1(1'bX), .DI0(1'bX), .A0(\u_PH_DLY_FIFO/w_gcount_r29 ), 
    .B0(\u_PH_DLY_FIFO/w_gcount_r28 ), .C0(1'bX), .D0(1'bX), 
    .M0(\u_PH_DLY_FIFO/r_gcount_w7 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/wcount_r5 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w26 ), .OFX0(), .F0(\u_PH_DLY_FIFO/wcount_r8 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w27 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h9696), .LUT1_INITVAL(16'h6996), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_LSR(1'b1)) \u_PH_DLY_FIFO/SLICE_104 ( 
    .M1(\u_PH_DLY_FIFO/r_gcount_w8 ), .FXA(1'bX), .FXB(1'bX), 
    .A1(\u_PH_DLY_FIFO/wcount_r7 ), .B1(\u_PH_DLY_FIFO/w_gcount_r26 ), 
    .C1(\u_PH_DLY_FIFO/w_gcount_r25 ), .D1(\u_PH_DLY_FIFO/w_gcount_r24 ), 
    .DI1(1'bX), .DI0(1'bX), .A0(\u_PH_DLY_FIFO/w_gcount_r29 ), 
    .B0(\u_PH_DLY_FIFO/w_gcount_r28 ), .C0(\u_PH_DLY_FIFO/w_gcount_r27 ), 
    .D0(1'bX), .M0(\u_PH_DLY_FIFO/r_gcount_w9 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\u_PH_DLY_FIFO/wcount_r4 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w28 ), .OFX0(), .F0(\u_PH_DLY_FIFO/wcount_r7 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w29 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6996), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_105 ( .M1(\u_PH_DLY_FIFO/rcount_2 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/r_gcount_w21 ), 
    .B1(\u_PH_DLY_FIFO/r_gcount_w20 ), 
    .C1(\u_PH_DLY_FIFO/r_g2b_xor_cluster_1 ), 
    .D1(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\u_PH_DLY_FIFO/r_gcount_w29 ), .B0(\u_PH_DLY_FIFO/r_gcount_w28 ), 
    .C0(\u_PH_DLY_FIFO/r_gcount_w27 ), .D0(\u_PH_DLY_FIFO/r_gcount_w26 ), 
    .M0(\u_PH_DLY_FIFO/rcount_3 ), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), 
    .F1(\u_PH_DLY_FIFO/rcount_w0 ), .Q1(\u_PH_DLY_FIFO/rptr_2 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .Q0(\u_PH_DLY_FIFO/rptr_3 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h9696), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_106 ( .M1(\u_PH_DLY_FIFO/rcount_4 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/r_gcount_w21 ), 
    .B1(\u_PH_DLY_FIFO/r_g2b_xor_cluster_1 ), 
    .C1(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .D1(1'bX), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/r_gcount_w25 ), 
    .B0(\u_PH_DLY_FIFO/r_gcount_w24 ), .C0(\u_PH_DLY_FIFO/r_gcount_w23 ), 
    .D0(\u_PH_DLY_FIFO/r_gcount_w22 ), .M0(\u_PH_DLY_FIFO/rcount_5 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .OFX1(), .F1(\u_PH_DLY_FIFO/rcount_w1 ), .Q1(\u_PH_DLY_FIFO/rptr_4 ), 
    .OFX0(), .F0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_1 ), 
    .Q0(\u_PH_DLY_FIFO/rptr_5 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6666), .LUT1_INITVAL(16'h6996), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_107 ( .M1(\u_PH_DLY_FIFO/rcount_6 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/rcount_w8 ), 
    .B1(\u_PH_DLY_FIFO/r_gcount_w27 ), .C1(\u_PH_DLY_FIFO/r_gcount_w26 ), 
    .D1(\u_PH_DLY_FIFO/r_gcount_w25 ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\u_PH_DLY_FIFO/r_gcount_w29 ), .B0(\u_PH_DLY_FIFO/r_gcount_w28 ), 
    .C0(1'bX), .D0(1'bX), .M0(\u_PH_DLY_FIFO/rcount_7 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .OFX1(), .F1(\u_PH_DLY_FIFO/rcount_w5 ), .Q1(\u_PH_DLY_FIFO/rptr_6 ), 
    .OFX0(), .F0(\u_PH_DLY_FIFO/rcount_w8 ), .Q0(\u_PH_DLY_FIFO/rptr_7 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h9696), .LUT1_INITVAL(16'h6996), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_108 ( .M1(\u_PH_DLY_FIFO/rcount_8 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/rcount_w7 ), 
    .B1(\u_PH_DLY_FIFO/r_gcount_w26 ), .C1(\u_PH_DLY_FIFO/r_gcount_w25 ), 
    .D1(\u_PH_DLY_FIFO/r_gcount_w24 ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\u_PH_DLY_FIFO/r_gcount_w29 ), .B0(\u_PH_DLY_FIFO/r_gcount_w28 ), 
    .C0(\u_PH_DLY_FIFO/r_gcount_w27 ), .D0(1'bX), 
    .M0(\u_PH_DLY_FIFO/rcount_9 ), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), 
    .F1(\u_PH_DLY_FIFO/rcount_w4 ), .Q1(\u_PH_DLY_FIFO/rptr_8 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/rcount_w7 ), .Q0(\u_PH_DLY_FIFO/rptr_9 ));
  SLOGICB #(.LUT0_INITVAL(16'h8080), .LUT1_INITVAL(16'h0001)) SLICE_109( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(WC_1_En), 
    .C1(hsSync_En), .D1(lpkt_cnt), .DI1(1'bX), .DI0(1'bX), .A0(\q_chksum[5] ), 
    .B0(un10_bytepkt), .C0(chksum_En), .D0(1'bX), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un10_bytepkt), .Q1(), .OFX0(), 
    .F0(N_55), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h8080), .LUT1_INITVAL(16'hFFF4)) SLICE_110( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[13] ), 
    .C1(\bytepkt_2_0_iv_1[13] ), .D1(\q_chksum_m[13] ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\q_chksum[13] ), .B0(un10_bytepkt), .C0(chksum_En), .D0(1'bX), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2[13] ), .Q1(), .OFX0(), .F0(\q_chksum_m[13] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h8080), .LUT1_INITVAL(16'hFFDC)) SLICE_111( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(N_51), 
    .C1(\byte_data1_fifo[4] ), .D1(\bytepkt_2_0_iv_0_1[4] ), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_chksum[4] ), .B0(un10_bytepkt), .C0(chksum_En), 
    .D0(1'bX), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2[4] ), .Q1(), .OFX0(), .F0(N_51), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h8080), .LUT1_INITVAL(16'hFFDC)) SLICE_112( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(N_43), 
    .C1(\byte_data1_fifo[12] ), .D1(\bytepkt_2_0_iv_0_1[12] ), .DI1(1'bX), 
    .DI0(1'bX), .A0(\q_chksum[12] ), .B0(un10_bytepkt), .C0(chksum_En), 
    .D0(1'bX), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2[12] ), .Q1(), .OFX0(), .F0(N_43), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h0302), .LUT1_INITVAL(16'h7777)) SLICE_113( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(chksum_En), .B1(un10_bytepkt), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(N_29), .B0(N_36), 
    .C0(\bytepkt_2_0_iv_0_1[3] ), .D0(\q_chksum[3] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(N_29), .Q1(), .OFX0(), 
    .F0(\bytepkt_2_0_iv_i[3] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h0302), .LUT1_INITVAL(16'hFFF1)) SLICE_114( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[8] ), 
    .C1(\bytepkt_2_1_iv_0_2_1[8] ), .D1(hsSync_En), .DI1(1'bX), .DI0(1'bX), 
    .A0(N_29), .B0(N_36), .C0(\bytepkt_2_1_iv_0_2[8] ), .D0(\q_chksum[8] ), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2_1_iv_0_2[8] ), .Q1(), .OFX0(), .F0(\bytepkt_2_1_iv_i[8] ), 
    .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFDF0), .LUT1_INITVAL(16'hF8F0)) SLICE_115( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(chksum_En), .B1(un10_bytepkt), 
    .C1(\bytepkt_2_0_iv_0_0[6] ), .D1(\q_chksum[6] ), .DI1(1'bX), .DI0(1'bX), 
    .A0(N_32), .B0(WC_0_En), .C0(\bytepkt_2_0_iv_0_1[6] ), .D0(\q_vc[0] ), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2_0_iv_0_1[6] ), .Q1(), .OFX0(), .F0(\bytepkt_2[6] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFDF0), .LUT1_INITVAL(16'hFF4F)) SLICE_116( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[7] ), 
    .C1(\bytepkt_2_1_iv_0_2_1[7] ), .D1(hsSync_En), .DI1(1'bX), .DI0(1'bX), 
    .A0(N_32), .B0(WC_0_En), .C0(\bytepkt_2_1_iv_0_2[7] ), .D0(\q_vc[1] ), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2_1_iv_0_2[7] ), .Q1(), .OFX0(), .F0(\bytepkt_2[7] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFDFC), .LUT1_INITVAL(16'hF4F4)) SLICE_117( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[2] ), 
    .C1(\bytepkt_2_0_iv_0_0[2] ), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(N_29), 
    .B0(N_61), .C0(\bytepkt_2_0_iv_0_1[2] ), .D0(\q_chksum[2] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_0_iv_0_1[2] ), 
    .Q1(), .OFX0(), .F0(\bytepkt_2[2] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFDFC), .LUT1_INITVAL(16'hF4F4)) SLICE_118( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[0] ), 
    .C1(\bytepkt_2_0_iv_0_0[0] ), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(N_29), 
    .B0(N_61), .C0(\bytepkt_2_0_iv_0_1[0] ), .D0(\q_chksum[0] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_0_iv_0_1[0] ), 
    .Q1(), .OFX0(), .F0(\bytepkt_2[0] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFDFC), .LUT1_INITVAL(16'hF4F4)) SLICE_119( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[1] ), 
    .C1(\bytepkt_2_0_iv_0_0[1] ), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(N_29), 
    .B0(N_61), .C0(\bytepkt_2_0_iv_0_1[1] ), .D0(\q_chksum[1] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_0_iv_0_1[1] ), 
    .Q1(), .OFX0(), .F0(\bytepkt_2[1] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFF4), .LUT1_INITVAL(16'hE020)) SLICE_120( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\EoTp_En[0] ), .B1(chksum_En), 
    .C1(un10_bytepkt), .D1(\q_chksum[10] ), .DI1(1'bX), .DI0(1'bX), .A0(N_28), 
    .B0(\byte_data1_fifo[10] ), .C0(\bytepkt_2_0_iv_0[10] ), 
    .D0(\bytepkt_2_0_iv_2[10] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), 
    .OFX1(), .F1(\bytepkt_2_0_iv_2[10] ), .Q1(), .OFX0(), .F0(\bytepkt_2[10] ), 
    .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFF4), .LUT1_INITVAL(16'hE020)) SLICE_121( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\EoTp_En[0] ), .B1(chksum_En), 
    .C1(un10_bytepkt), .D1(\q_chksum[9] ), .DI1(1'bX), .DI0(1'bX), .A0(N_28), 
    .B0(\byte_data1_fifo[9] ), .C0(\bytepkt_2_0_iv_0[9] ), 
    .D0(\bytepkt_2_0_iv_2[9] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), 
    .OFX1(), .F1(\bytepkt_2_0_iv_2[9] ), .Q1(), .OFX0(), .F0(\bytepkt_2[9] ), 
    .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFF4), .LUT1_INITVAL(16'hE020)) SLICE_122( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\EoTp_En[0] ), .B1(chksum_En), 
    .C1(un10_bytepkt), .D1(\q_chksum[11] ), .DI1(1'bX), .DI0(1'bX), .A0(N_28), 
    .B0(\byte_data1_fifo[11] ), .C0(\bytepkt_2_1_iv_1[11] ), 
    .D0(\bytepkt_2_1_iv_3[11] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), 
    .OFX1(), .F1(\bytepkt_2_1_iv_3[11] ), .Q1(), .OFX0(), .F0(\bytepkt_2[11] ), 
    .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFDC), .LUT1_INITVAL(16'hFEFA)) SLICE_123( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_54), .B1(WC_0_En), .C1(hsSync_En), 
    .D1(\q_dt[5] ), .DI1(1'bX), .DI0(1'bX), .A0(N_28), .B0(N_55), 
    .C0(\byte_data1_fifo[5] ), .D0(\bytepkt_2_0_iv_0_1[5] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_0_iv_0_1[5] ), 
    .Q1(), .OFX0(), .F0(\bytepkt_2[5] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hF1F1), .LUT1_INITVAL(16'h0ACE)) SLICE_124( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(WC_1_En), 
    .C1(\q_dt[3] ), .D1(\q_wc[11] ), .DI1(1'bX), .DI0(1'bX), .A0(N_28), 
    .B0(\byte_data1_fifo[3] ), .C0(\bytepkt_2_0_iv_0_0[3] ), .D0(1'bX), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(\bytepkt_2_0_iv_0_0[3] ), .Q1(), .OFX0(), .F0(\bytepkt_2_0_iv_0_1[3] ), 
    .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h8F0F), .LUT1_INITVAL(16'h1111)) SLICE_125( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\PH_cnt[0] ), .B1(\PH_cnt[3] ), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(\PH_cnt[1] ), 
    .B0(\PH_cnt[2] ), .C0(un1_q_long_pkt_indicator_1_1), .D0(un18_PH_En_2), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un18_PH_En_2), 
    .Q1(), .OFX0(), .F0(un1_q_long_pkt_indicator_1_i), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6666)) SLICE_126( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_wc[6] ), .B1(\q_wc[11] ), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(\q_wc[2] ), 
    .B0(\q_wc[10] ), .C0(\q_wc[13] ), .D0(un7_q_ECC_0_a2_2), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un7_q_ECC_0_a2_2), .Q1(), 
    .OFX0(), .F0(un7_q_ECC_0_a2_6), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFEFA), .LUT1_INITVAL(16'h8888)) SLICE_127( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(\q_wc[4] ), .C1(1'bX), 
    .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(N_41), .B0(WC_1_En), .C0(hsSync_En), 
    .D0(\q_ECC[4] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(N_41), .Q1(), .OFX0(), .F0(\bytepkt_2_0_iv_0_1[12] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFEFC), .LUT1_INITVAL(16'h8888)) SLICE_128( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_1_En), .B1(\q_ECC[5] ), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(WC_0_En), .B0(hsSync_En), 
    .C0(\q_ECC_m[5] ), .D0(\q_wc[5] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .OFX1(), .F1(\q_ECC_m[5] ), .Q1(), .OFX0(), 
    .F0(\bytepkt_2_0_iv_1[13] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFEFA), .LUT1_INITVAL(16'h8888)) SLICE_129( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(\q_dt[4] ), .C1(1'bX), 
    .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(N_49), .B0(WC_1_En), .C0(hsSync_En), 
    .D0(\q_wc[12] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), 
    .F1(N_49), .Q1(), .OFX0(), .F0(\bytepkt_2_0_iv_0_1[4] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFEC), .LUT1_INITVAL(16'h8888)) SLICE_130( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(\q_wc[3] ), .C1(1'bX), 
    .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(WC_1_En), .B0(hsSync_En), 
    .C0(\q_ECC[3] ), .D0(\q_wc_m[3] ), .M0(1'bX), .CE(1'bX), .CLK(1'bX), 
    .LSR(1'bX), .OFX1(), .F1(\q_wc_m[3] ), .Q1(), .OFX0(), 
    .F0(\bytepkt_2_1_iv_1[11] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h23AF), .LUT1_INITVAL(16'hFF4F)) SLICE_131( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_28), .B1(\byte_data1_fifo[15] ), 
    .C1(\bytepkt_2_0_iv_0_1[15] ), .D1(hsSync_En), .DI1(1'bX), .DI0(1'bX), 
    .A0(N_29), .B0(WC_0_En), .C0(\q_chksum[15] ), .D0(\q_wc[7] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2[15] ), .Q1(), 
    .OFX0(), .F0(\bytepkt_2_0_iv_0_1[15] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h0100), .LUT1_INITVAL(16'h0400)) SLICE_132( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\EoTp_En[0] ), .B1(\EoTp_En[1] ), 
    .C1(chksum_En), .D1(un10_bytepkt), .DI1(1'bX), .DI0(1'bX), 
    .A0(\EoTp_En[0] ), .B0(\EoTp_En[1] ), .C0(chksum_En), .D0(un10_bytepkt), 
    .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(N_61), .Q1(), 
    .OFX0(), .F0(N_36), .Q0());
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h8181), .LUT1_INITVAL(16'h1818), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_133 ( .M1(\u_PH_DLY_FIFO/wcount_4 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/r_gcount_w29 ), 
    .B1(\u_PH_DLY_FIFO/wcount_9 ), .C1(\u_PH_DLY_FIFO/wptr_9 ), .D1(1'bX), 
    .DI1(1'bX), .DI0(1'bX), .A0(\u_PH_DLY_FIFO/r_gcount_w29 ), 
    .B0(\u_PH_DLY_FIFO/wcount_9 ), .C0(\u_PH_DLY_FIFO/wptr_9 ), .D0(1'bX), 
    .M0(\u_PH_DLY_FIFO/wcount_5 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), 
    .F1(\u_PH_DLY_FIFO/full_cmp_set ), .Q1(\u_PH_DLY_FIFO/wptr_4 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/full_cmp_clr ), .Q0(\u_PH_DLY_FIFO/wptr_5 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h2424), .LUT1_INITVAL(16'h4242), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_134 ( .M1(\u_PH_DLY_FIFO/wcount_2 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/w_gcount_r29 ), 
    .B1(\u_PH_DLY_FIFO/rcount_9 ), .C1(\u_PH_DLY_FIFO/rptr_9 ), .D1(1'bX), 
    .DI1(1'bX), .DI0(1'bX), .A0(\u_PH_DLY_FIFO/w_gcount_r29 ), 
    .B0(\u_PH_DLY_FIFO/rcount_9 ), .C0(\u_PH_DLY_FIFO/rptr_9 ), .D0(1'bX), 
    .M0(\u_PH_DLY_FIFO/wcount_3 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), 
    .F1(\u_PH_DLY_FIFO/empty_cmp_clr ), .Q1(\u_PH_DLY_FIFO/wptr_2 ), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/empty_cmp_set ), .Q0(\u_PH_DLY_FIFO/wptr_3 ));
  SLOGICB #(.LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6666)) SLICE_135( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_vc[0] ), .B1(\q_wc[0] ), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(\q_wc[9] ), 
    .B0(\q_wc[2] ), .C0(\q_wc[0] ), .D0(\q_vc[0] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un27_q_ECC_0_a2_0), .Q1(), .OFX0(), 
    .F0(un87_q_ECC_0_a2_4), .Q0());
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .SRMODE("ASYNC"), .LUT0_INITVAL(16'h9696), .LUT1_INITVAL(16'h6666), 
    .CHECK_M1(1'b1), .CHECK_M0(1'b1)) SLICE_136( .M1(chksum_En), .FXA(1'bX), 
    .FXB(1'bX), .A1(\q_wc[14] ), .B1(\q_wc[15] ), .C1(1'bX), .D1(1'bX), 
    .DI1(1'bX), .DI0(1'bX), .A0(\q_dt[4] ), .B0(\q_wc[15] ), .C0(\q_wc[14] ), 
    .D0(1'bX), .M0(bytepkt_en_c), .CE(1'bX), .CLK(byte_clk1_c), .LSR(1'bX), 
    .OFX1(), .F1(N_19), .Q1(q_chksum_En), .OFX0(), .F0(N_22), 
    .Q0(q_bytepkt_en));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'hDFDF), .LUT1_INITVAL(16'hF8F0), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_LSR(1'b1)) SLICE_137( 
    .M1(\u_PH_DLY_FIFO/w_gcount_2 ), .FXA(1'bX), .FXB(1'bX), .A1(chksum_En), 
    .B1(un10_bytepkt), .C1(\bytepkt_2_0_iv_0[14] ), .D1(\q_chksum[14] ), 
    .DI1(1'bX), .DI0(1'bX), .A0(\EoTp_En[0] ), .B0(chksum_En), 
    .C0(un10_bytepkt), .D0(1'bX), .M0(\u_PH_DLY_FIFO/w_gcount_3 ), .CE(1'bX), 
    .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(\bytepkt_2[14] ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r2 ), .OFX0(), .F0(N_32), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r3 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("VHI"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'hF2F2), .LUT1_INITVAL(16'hEEEE), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_LSR(1'b1)) SLICE_138( 
    .M1(\u_PH_DLY_FIFO/w_gcount_0 ), .FXA(1'bX), .FXB(1'bX), .A1(q_long_en), 
    .B1(q_short_en), .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), 
    .A0(long_en_c), .B0(q_long_en), .C0(q_short_en), .D0(1'bX), 
    .M0(\u_PH_DLY_FIFO/w_gcount_1 ), .CE(1'bX), .CLK(byte_clk1_c), 
    .LSR(un1_q_bytepkt_en_0), .OFX1(), .F1(un5_q_ECC_0), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r0 ), .OFX0(), .F0(un3_q_wc_0), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r1 ));
  SLOGICB #(.LUT0_INITVAL(16'h6969), .LUT1_INITVAL(16'h6996)) SLICE_139( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_dt[1] ), .B1(\q_dt[2] ), 
    .C1(\q_wc[12] ), .D1(\q_wc[13] ), .DI1(1'bX), .DI0(1'bX), .A0(\q_dt[0] ), 
    .B0(\q_wc[12] ), .C0(\q_wc[13] ), .D0(1'bX), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un47_q_ECC_0_a2_5), .Q1(), .OFX0(), 
    .F0(N_31_i), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6996)) SLICE_140( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_wc[2] ), .B1(\q_wc[3] ), 
    .C1(\q_wc[5] ), .D1(\q_wc[8] ), .DI1(1'bX), .DI0(1'bX), .A0(\q_wc[5] ), 
    .B0(\q_wc[7] ), .C0(\q_wc[8] ), .D0(\q_wc[9] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un108_q_ECC_0_a2_2), .Q1(), .OFX0(), 
    .F0(un7_q_ECC_0_a2_4), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6996)) SLICE_141( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_dt[1] ), .B1(\q_dt[2] ), 
    .C1(\q_dt[5] ), .D1(\q_vc[1] ), .DI1(1'bX), .DI0(1'bX), .A0(\q_dt[2] ), 
    .B0(\q_dt[3] ), .C0(\q_dt[5] ), .D0(\q_vc[0] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un108_q_ECC_0_a2_3), .Q1(), .OFX0(), 
    .F0(un67_q_ECC_0_a2_4), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hEAC0), .LUT1_INITVAL(16'h0CAE)) SLICE_142( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(WC_1_En), 
    .C1(\q_ECC[0] ), .D1(\q_wc[0] ), .DI1(1'bX), .DI0(1'bX), .A0(WC_0_En), 
    .B0(WC_1_En), .C0(\q_ECC[1] ), .D0(\q_wc[1] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_1_iv_0_2_1[8] ), .Q1(), 
    .OFX0(), .F0(\bytepkt_2_0_iv_0[9] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hEAC0), .LUT1_INITVAL(16'hECA0)) SLICE_143( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(WC_1_En), 
    .C1(\q_dt[2] ), .D1(\q_wc[10] ), .DI1(1'bX), .DI0(1'bX), .A0(WC_0_En), 
    .B0(WC_1_En), .C0(\q_ECC[2] ), .D0(\q_wc[2] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_0_iv_0_0[2] ), .Q1(), 
    .OFX0(), .F0(\bytepkt_2_0_iv_0[10] ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hECA0), .LUT1_INITVAL(16'hECA0)) SLICE_144( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_0_En), .B1(WC_1_En), 
    .C1(\q_dt[0] ), .D1(\q_wc[8] ), .DI1(1'bX), .DI0(1'bX), .A0(WC_0_En), 
    .B0(WC_1_En), .C0(\q_dt[1] ), .D0(\q_wc[9] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_0_iv_0_0[0] ), .Q1(), 
    .OFX0(), .F0(\bytepkt_2_0_iv_0_0[1] ), .Q0());
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6666), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_145 ( .M1(\u_PH_DLY_FIFO/rcount_0 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/w_g2b_xor_cluster_1 ), 
    .B1(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), .C1(1'bX), .D1(1'bX), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), 
    .B0(\u_PH_DLY_FIFO/w_gcount_r25 ), .C0(\u_PH_DLY_FIFO/w_gcount_r24 ), 
    .D0(\u_PH_DLY_FIFO/w_gcount_r23 ), .M0(\u_PH_DLY_FIFO/rcount_1 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .OFX1(), .F1(\u_PH_DLY_FIFO/wcount_r2 ), .Q1(\u_PH_DLY_FIFO/rptr_0 ), 
    .OFX0(), .F0(\u_PH_DLY_FIFO/wcount_r3 ), .Q0(\u_PH_DLY_FIFO/rptr_1 ));
  SLOGICB #(.M0MUX("SIG"), .M1MUX("SIG"), .CLKMUX("SIG"), .CEMUX("SIG"), 
    .LSRMUX("SIG"), .GSR("DISABLED"), .SRMODE("ASYNC"), 
    .LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6666), .CHECK_M1(1'b1), 
    .CHECK_M0(1'b1), .CHECK_CE(1'b1), .CHECK_LSR(1'b1)) 
    \u_PH_DLY_FIFO/SLICE_146 ( .M1(\u_PH_DLY_FIFO/wcount_0 ), .FXA(1'bX), 
    .FXB(1'bX), .A1(\u_PH_DLY_FIFO/r_g2b_xor_cluster_1 ), 
    .B1(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .C1(1'bX), .D1(1'bX), .DI1(1'bX), 
    .DI0(1'bX), .A0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), 
    .B0(\u_PH_DLY_FIFO/r_gcount_w25 ), .C0(\u_PH_DLY_FIFO/r_gcount_w24 ), 
    .D0(\u_PH_DLY_FIFO/r_gcount_w23 ), .M0(\u_PH_DLY_FIFO/wcount_1 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .CLK(byte_clk1_c), .LSR(un1_q_bytepkt_en_0), 
    .OFX1(), .F1(\u_PH_DLY_FIFO/rcount_w2 ), .Q1(\u_PH_DLY_FIFO/wptr_0 ), 
    .OFX0(), .F0(\u_PH_DLY_FIFO/rcount_w3 ), .Q0(\u_PH_DLY_FIFO/wptr_1 ));
  SLOGICB #(.LUT0_INITVAL(16'h2222), .LUT1_INITVAL(16'h4444)) SLICE_147( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(bytepkt_en_c), .B1(q_bytepkt_en), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(bytepkt_en_c), 
    .B0(\u_PH_DLY_FIFO/Empty ), .C0(1'bX), .D0(1'bX), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un1_q_bytepkt_en_0), .Q1(), .OFX0(), 
    .F0(\u_PH_DLY_FIFO/rden_i ), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFF9), .LUT1_INITVAL(16'h6996)) SLICE_148( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_wc[1] ), .B1(\q_wc[8] ), 
    .C1(\q_wc[11] ), .D1(\q_wc[12] ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\lpkt_cnt[0] ), .B0(\q_wc[1] ), .C0(un9_wc_end_flag_1), 
    .D0(un9_wc_end_flag_13), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), 
    .OFX1(), .F1(un27_q_ECC_0_a2_3), .Q1(), .OFX0(), .F0(un9_wc_end_flag_NE_7), 
    .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h9696), .LUT1_INITVAL(16'h6996)) SLICE_149( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_dt[5] ), .B1(\q_vc[1] ), 
    .C1(\q_wc[9] ), .D1(\q_wc[10] ), .DI1(1'bX), .DI0(1'bX), .A0(\q_vc[1] ), 
    .B0(\q_wc[0] ), .C0(\q_wc[7] ), .D0(1'bX), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un27_q_ECC_0_a2_4), .Q1(), .OFX0(), 
    .F0(un47_q_ECC_0_a2_3), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h23AF)) SLICE_150( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(N_29), .B1(WC_1_En), 
    .C1(\q_chksum[7] ), .D1(\q_wc[15] ), .DI1(1'bX), .DI0(1'bX), 
    .A0(\q_dt[3] ), .B0(\q_wc[1] ), .C0(\q_wc[5] ), .D0(\q_wc[15] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(\bytepkt_2_1_iv_0_2_1[7] ), 
    .Q1(), .OFX0(), .F0(un47_q_ECC_0_a2_4), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h6996), .LUT1_INITVAL(16'h6666)) SLICE_151( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(\q_wc[3] ), .B1(\q_wc[4] ), 
    .C1(1'bX), .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(\q_dt[1] ), 
    .B0(\q_dt[3] ), .C0(\q_wc[4] ), .D0(\q_wc[6] ), .M0(1'bX), .CE(1'bX), 
    .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un67_q_ECC_4), .Q1(), .OFX0(), 
    .F0(un87_q_ECC_0_a2_3), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'h8888), .LUT1_INITVAL(16'h1111)) SLICE_152( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(WC_1_En), .B1(lpkt_cnt), .C1(1'bX), 
    .D1(1'bX), .DI1(1'bX), .DI0(1'bX), .A0(WC_1_En), .B0(\q_wc[13] ), 
    .C0(1'bX), .D0(1'bX), .M0(1'bX), .CE(1'bX), .CLK(1'bX), .LSR(1'bX), 
    .OFX1(), .F1(bytepkt_en_2_i_a2_3), .Q1(), .OFX0(), .F0(N_54), .Q0());
  SLOGICB #(.LUT0_INITVAL(16'hFFFE), .LUT1_INITVAL(16'hFFFE)) SLICE_153( 
    .M1(1'bX), .FXA(1'bX), .FXB(1'bX), .A1(un9_wc_end_flag_2), 
    .B1(un9_wc_end_flag_3), .C1(un9_wc_end_flag_4), .D1(un9_wc_end_flag_5), 
    .DI1(1'bX), .DI0(1'bX), .A0(un9_wc_end_flag_6), .B0(un9_wc_end_flag_7), 
    .C0(un9_wc_end_flag_8), .D0(\un9_wc_end_flag_a_4_i[16] ), .M0(1'bX), 
    .CE(1'bX), .CLK(1'bX), .LSR(1'bX), .OFX1(), .F1(un9_wc_end_flag_NE_9), 
    .Q1(), .OFX0(), .F0(un9_wc_end_flag_NE_10), .Q0());
  bytepkt_en bytepkt_en_I( .PADDO(bytepkt_en_c), .bytepkt_en(bytepkt_en));
  reset_n1 reset_n1_I( .PADDI(reset_n1_c), .reset_n1(reset_n));
  EoTp EoTp_I( .PADDI(EoTp_c), .EoTp(EoTp));
  bytepkt_31_ \bytepkt[31]_I ( .PADDO(gnd1), .bytepkt31(bytepkt[31]));
  bytepkt_30_ \bytepkt[30]_I ( .PADDO(gnd1), .bytepkt30(bytepkt[30]));
  bytepkt_29_ \bytepkt[29]_I ( .PADDO(gnd1), .bytepkt29(bytepkt[29]));
  bytepkt_28_ \bytepkt[28]_I ( .PADDO(gnd1), .bytepkt28(bytepkt[28]));
  bytepkt_27_ \bytepkt[27]_I ( .PADDO(gnd1), .bytepkt27(bytepkt[27]));
  bytepkt_26_ \bytepkt[26]_I ( .PADDO(gnd1), .bytepkt26(bytepkt[26]));
  bytepkt_25_ \bytepkt[25]_I ( .PADDO(gnd1), .bytepkt25(bytepkt[25]));
  bytepkt_24_ \bytepkt[24]_I ( .PADDO(gnd1), .bytepkt24(bytepkt[24]));
  bytepkt_23_ \bytepkt[23]_I ( .PADDO(gnd1), .bytepkt23(bytepkt[23]));
  bytepkt_22_ \bytepkt[22]_I ( .PADDO(gnd1), .bytepkt22(bytepkt[22]));
  bytepkt_21_ \bytepkt[21]_I ( .PADDO(gnd1), .bytepkt21(bytepkt[21]));
  bytepkt_20_ \bytepkt[20]_I ( .PADDO(gnd1), .bytepkt20(bytepkt[20]));
  bytepkt_19_ \bytepkt[19]_I ( .PADDO(gnd1), .bytepkt19(bytepkt[19]));
  bytepkt_18_ \bytepkt[18]_I ( .PADDO(gnd1), .bytepkt18(bytepkt[18]));
  bytepkt_17_ \bytepkt[17]_I ( .PADDO(gnd1), .bytepkt17(bytepkt[17]));
  bytepkt_16_ \bytepkt[16]_I ( .PADDO(gnd1), .bytepkt16(bytepkt[16]));
  bytepkt_15_ \bytepkt[15]_I ( .IOLDO(\bytepkt_c[15] ), 
    .bytepkt15(bytepkt[15]));
  bytepkt_15__MGIOL \bytepkt[15]_MGIOL ( .IOLDO(\bytepkt_c[15] ), 
    .TXDATA0(\bytepkt_2[15] ), .CLK(byte_clk1_c));
  bytepkt_14_ \bytepkt[14]_I ( .IOLDO(\bytepkt_c[14] ), 
    .bytepkt14(bytepkt[14]));
  bytepkt_14__MGIOL \bytepkt[14]_MGIOL ( .IOLDO(\bytepkt_c[14] ), 
    .TXDATA0(\bytepkt_2[14] ), .CLK(byte_clk1_c));
  bytepkt_13_ \bytepkt[13]_I ( .IOLDO(\bytepkt_c[13] ), 
    .bytepkt13(bytepkt[13]));
  bytepkt_13__MGIOL \bytepkt[13]_MGIOL ( .IOLDO(\bytepkt_c[13] ), 
    .TXDATA0(\bytepkt_2[13] ), .CLK(byte_clk1_c));
  bytepkt_12_ \bytepkt[12]_I ( .IOLDO(\bytepkt_c[12] ), 
    .bytepkt12(bytepkt[12]));
  bytepkt_12__MGIOL \bytepkt[12]_MGIOL ( .IOLDO(\bytepkt_c[12] ), 
    .TXDATA0(\bytepkt_2[12] ), .CLK(byte_clk1_c));
  bytepkt_11_ \bytepkt[11]_I ( .IOLDO(\bytepkt_c[11] ), 
    .bytepkt11(bytepkt[11]));
  bytepkt_11__MGIOL \bytepkt[11]_MGIOL ( .IOLDO(\bytepkt_c[11] ), 
    .TXDATA0(\bytepkt_2[11] ), .CLK(byte_clk1_c));
  bytepkt_10_ \bytepkt[10]_I ( .IOLDO(\bytepkt_c[10] ), 
    .bytepkt10(bytepkt[10]));
  bytepkt_10__MGIOL \bytepkt[10]_MGIOL ( .IOLDO(\bytepkt_c[10] ), 
    .TXDATA0(\bytepkt_2[10] ), .CLK(byte_clk1_c));
  bytepkt_9_ \bytepkt[9]_I ( .IOLDO(\bytepkt_c[9] ), .bytepkt9(bytepkt[9]));
  bytepkt_9__MGIOL \bytepkt[9]_MGIOL ( .IOLDO(\bytepkt_c[9] ), 
    .TXDATA0(\bytepkt_2[9] ), .CLK(byte_clk1_c));
  bytepkt_8_ \bytepkt[8]_I ( .IOLDO(\bytepkt_c[8] ), .bytepkt8(bytepkt[8]));
  bytepkt_8__MGIOL \bytepkt[8]_MGIOL ( .IOLDO(\bytepkt_c[8] ), 
    .TXDATA0(\bytepkt_2_1_iv_i[8] ), .CLK(byte_clk1_c));
  bytepkt_7_ \bytepkt[7]_I ( .IOLDO(\bytepkt_c[7] ), .bytepkt7(bytepkt[7]));
  bytepkt_7__MGIOL \bytepkt[7]_MGIOL ( .IOLDO(\bytepkt_c[7] ), 
    .TXDATA0(\bytepkt_2[7] ), .CLK(byte_clk1_c));
  bytepkt_6_ \bytepkt[6]_I ( .IOLDO(\bytepkt_c[6] ), .bytepkt6(bytepkt[6]));
  bytepkt_6__MGIOL \bytepkt[6]_MGIOL ( .IOLDO(\bytepkt_c[6] ), 
    .TXDATA0(\bytepkt_2[6] ), .CLK(byte_clk1_c));
  bytepkt_5_ \bytepkt[5]_I ( .IOLDO(\bytepkt_c[5] ), .bytepkt5(bytepkt[5]));
  bytepkt_5__MGIOL \bytepkt[5]_MGIOL ( .IOLDO(\bytepkt_c[5] ), 
    .TXDATA0(\bytepkt_2[5] ), .CLK(byte_clk1_c));
  bytepkt_4_ \bytepkt[4]_I ( .IOLDO(\bytepkt_c[4] ), .bytepkt4(bytepkt[4]));
  bytepkt_4__MGIOL \bytepkt[4]_MGIOL ( .IOLDO(\bytepkt_c[4] ), 
    .TXDATA0(\bytepkt_2[4] ), .CLK(byte_clk1_c));
  bytepkt_3_ \bytepkt[3]_I ( .IOLDO(\bytepkt_c[3] ), .bytepkt3(bytepkt[3]));
  bytepkt_3__MGIOL \bytepkt[3]_MGIOL ( .IOLDO(\bytepkt_c[3] ), 
    .TXDATA0(\bytepkt_2_0_iv_i[3] ), .CLK(byte_clk1_c));
  bytepkt_2_ \bytepkt[2]_I ( .IOLDO(\bytepkt_c[2] ), .bytepkt2(bytepkt[2]));
  bytepkt_2__MGIOL \bytepkt[2]_MGIOL ( .IOLDO(\bytepkt_c[2] ), 
    .TXDATA0(\bytepkt_2[2] ), .CLK(byte_clk1_c));
  bytepkt_1_ \bytepkt[1]_I ( .IOLDO(\bytepkt_c[1] ), .bytepkt1(bytepkt[1]));
  bytepkt_1__MGIOL \bytepkt[1]_MGIOL ( .IOLDO(\bytepkt_c[1] ), 
    .TXDATA0(\bytepkt_2[1] ), .CLK(byte_clk1_c));
  bytepkt_0_ \bytepkt[0]_I ( .IOLDO(\bytepkt_c[0] ), .bytepkt0(bytepkt[0]));
  bytepkt_0__MGIOL \bytepkt[0]_MGIOL ( .IOLDO(\bytepkt_c[0] ), 
    .TXDATA0(\bytepkt_2[0] ), .CLK(byte_clk1_c));
  chksum_15_ \chksum[15]_I ( .PADDI(\chksum_c[15] ), .chksum15(chksum[15]));
  chksum_15__MGIOL \chksum[15]_MGIOL ( .DI(\chksum_c[15] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[15] ));
  chksum_14_ \chksum[14]_I ( .PADDI(\chksum_c[14] ), .chksum14(chksum[14]));
  chksum_14__MGIOL \chksum[14]_MGIOL ( .DI(\chksum_c[14] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[14] ));
  chksum_13_ \chksum[13]_I ( .PADDI(\chksum_c[13] ), .chksum13(chksum[13]));
  chksum_13__MGIOL \chksum[13]_MGIOL ( .DI(\chksum_c[13] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[13] ));
  chksum_12_ \chksum[12]_I ( .PADDI(\chksum_c[12] ), .chksum12(chksum[12]));
  chksum_12__MGIOL \chksum[12]_MGIOL ( .DI(\chksum_c[12] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[12] ));
  chksum_11_ \chksum[11]_I ( .PADDI(\chksum_c[11] ), .chksum11(chksum[11]));
  chksum_11__MGIOL \chksum[11]_MGIOL ( .DI(\chksum_c[11] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[11] ));
  chksum_10_ \chksum[10]_I ( .PADDI(\chksum_c[10] ), .chksum10(chksum[10]));
  chksum_10__MGIOL \chksum[10]_MGIOL ( .DI(\chksum_c[10] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[10] ));
  chksum_9_ \chksum[9]_I ( .PADDI(\chksum_c[9] ), .chksum9(chksum[9]));
  chksum_9__MGIOL \chksum[9]_MGIOL ( .DI(\chksum_c[9] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[9] ));
  chksum_8_ \chksum[8]_I ( .PADDI(\chksum_c[8] ), .chksum8(chksum[8]));
  chksum_8__MGIOL \chksum[8]_MGIOL ( .DI(\chksum_c[8] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[8] ));
  chksum_7_ \chksum[7]_I ( .PADDI(\chksum_c[7] ), .chksum7(chksum[7]));
  chksum_7__MGIOL \chksum[7]_MGIOL ( .DI(\chksum_c[7] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[7] ));
  chksum_6_ \chksum[6]_I ( .PADDI(\chksum_c[6] ), .chksum6(chksum[6]));
  chksum_6__MGIOL \chksum[6]_MGIOL ( .DI(\chksum_c[6] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[6] ));
  chksum_5_ \chksum[5]_I ( .PADDI(\chksum_c[5] ), .chksum5(chksum[5]));
  chksum_5__MGIOL \chksum[5]_MGIOL ( .DI(\chksum_c[5] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[5] ));
  chksum_4_ \chksum[4]_I ( .PADDI(\chksum_c[4] ), .chksum4(chksum[4]));
  chksum_4__MGIOL \chksum[4]_MGIOL ( .DI(\chksum_c[4] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[4] ));
  chksum_3_ \chksum[3]_I ( .PADDI(\chksum_c[3] ), .chksum3(chksum[3]));
  chksum_3__MGIOL \chksum[3]_MGIOL ( .DI(\chksum_c[3] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[3] ));
  chksum_2_ \chksum[2]_I ( .PADDI(\chksum_c[2] ), .chksum2(chksum[2]));
  chksum_2__MGIOL \chksum[2]_MGIOL ( .DI(\chksum_c[2] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[2] ));
  chksum_1_ \chksum[1]_I ( .PADDI(\chksum_c[1] ), .chksum1(chksum[1]));
  chksum_1__MGIOL \chksum[1]_MGIOL ( .DI(\chksum_c[1] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[1] ));
  chksum_0_ \chksum[0]_I ( .PADDI(\chksum_c[0] ), .chksum0(chksum[0]));
  chksum_0__MGIOL \chksum[0]_MGIOL ( .DI(\chksum_c[0] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk1_c), .INFF(\q_chksum[0] ));
  chksum_rdy chksum_rdy_I( .PADDI(chksum_rdy_c), .chksum_rdy(chksum_rdy));
  wc_15_ \wc[15]_I ( .PADDI(\wc_c[15] ), .wc15(wc[15]));
  wc_15__MGIOL \wc[15]_MGIOL ( .DI(\wc_c[15] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk1_c), .INFF(\q_wc[15] ));
  wc_14_ \wc[14]_I ( .PADDI(\wc_c[14] ), .wc14(wc[14]));
  wc_14__MGIOL \wc[14]_MGIOL ( .DI(\wc_c[14] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk1_c), .INFF(\q_wc[14] ));
  wc_13_ \wc[13]_I ( .PADDI(\wc_c[13] ), .wc13(wc[13]));
  wc_13__MGIOL \wc[13]_MGIOL ( .DI(\wc_c[13] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk1_c), .INFF(\q_wc[13] ));
  wc_12_ \wc[12]_I ( .PADDI(\wc_c[12] ), .wc12(wc[12]));
  wc_12__MGIOL \wc[12]_MGIOL ( .DI(\wc_c[12] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk1_c), .INFF(\q_wc[12] ));
  wc_11_ \wc[11]_I ( .PADDI(\wc_c[11] ), .wc11(wc[11]));
  wc_11__MGIOL \wc[11]_MGIOL ( .DI(\wc_c[11] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk1_c), .INFF(\q_wc[11] ));
  wc_10_ \wc[10]_I ( .PADDI(\wc_c[10] ), .wc10(wc[10]));
  wc_10__MGIOL \wc[10]_MGIOL ( .DI(\wc_c[10] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk1_c), .INFF(\q_wc[10] ));
  wc_9_ \wc[9]_I ( .PADDI(\wc_c[9] ), .wc9(wc[9]));
  wc_9__MGIOL \wc[9]_MGIOL ( .DI(\wc_c[9] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[9] ));
  wc_8_ \wc[8]_I ( .PADDI(\wc_c[8] ), .wc8(wc[8]));
  wc_8__MGIOL \wc[8]_MGIOL ( .DI(\wc_c[8] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[8] ));
  wc_7_ \wc[7]_I ( .PADDI(\wc_c[7] ), .wc7(wc[7]));
  wc_7__MGIOL \wc[7]_MGIOL ( .DI(\wc_c[7] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[7] ));
  wc_6_ \wc[6]_I ( .PADDI(\wc_c[6] ), .wc6(wc[6]));
  wc_6__MGIOL \wc[6]_MGIOL ( .DI(\wc_c[6] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[6] ));
  wc_5_ \wc[5]_I ( .PADDI(\wc_c[5] ), .wc5(wc[5]));
  wc_5__MGIOL \wc[5]_MGIOL ( .DI(\wc_c[5] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[5] ));
  wc_4_ \wc[4]_I ( .PADDI(\wc_c[4] ), .wc4(wc[4]));
  wc_4__MGIOL \wc[4]_MGIOL ( .DI(\wc_c[4] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[4] ));
  wc_3_ \wc[3]_I ( .PADDI(\wc_c[3] ), .wc3(wc[3]));
  wc_3__MGIOL \wc[3]_MGIOL ( .DI(\wc_c[3] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[3] ));
  wc_2_ \wc[2]_I ( .PADDI(\wc_c[2] ), .wc2(wc[2]));
  wc_2__MGIOL \wc[2]_MGIOL ( .DI(\wc_c[2] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[2] ));
  wc_1_ \wc[1]_I ( .PADDI(\wc_c[1] ), .wc1(wc[1]));
  wc_1__MGIOL \wc[1]_MGIOL ( .DI(\wc_c[1] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[1] ));
  wc_0_ \wc[0]_I ( .PADDI(\wc_c[0] ), .wc0(wc[0]));
  wc_0__MGIOL \wc[0]_MGIOL ( .DI(\wc_c[0] ), .CE(un3_q_wc_0), .CLK(byte_clk1_c), 
    .INFF(\q_wc[0] ));
  dt_5_ \dt[5]_I ( .PADDI(\dt_c[5] ), .dt5(dt[5]));
  dt_5__MGIOL \dt[5]_MGIOL ( .DI(\dt_c[5] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_dt[5] ));
  dt_4_ \dt[4]_I ( .PADDI(\dt_c[4] ), .dt4(dt[4]));
  dt_4__MGIOL \dt[4]_MGIOL ( .DI(\dt_c[4] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_dt[4] ));
  dt_3_ \dt[3]_I ( .PADDI(\dt_c[3] ), .dt3(dt[3]));
  dt_3__MGIOL \dt[3]_MGIOL ( .DI(\dt_c[3] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_dt[3] ));
  dt_2_ \dt[2]_I ( .PADDI(\dt_c[2] ), .dt2(dt[2]));
  dt_2__MGIOL \dt[2]_MGIOL ( .DI(\dt_c[2] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_dt[2] ));
  dt_1_ \dt[1]_I ( .PADDI(\dt_c[1] ), .dt1(dt[1]));
  dt_1__MGIOL \dt[1]_MGIOL ( .DI(\dt_c[1] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_dt[1] ));
  dt_0_ \dt[0]_I ( .PADDI(\dt_c[0] ), .dt0(dt[0]));
  dt_0__MGIOL \dt[0]_MGIOL ( .DI(\dt_c[0] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_dt[0] ));
  vc_1_ \vc[1]_I ( .PADDI(\vc_c[1] ), .vc1(vc[1]));
  vc_1__MGIOL \vc[1]_MGIOL ( .DI(\vc_c[1] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_vc[1] ));
  vc_0_ \vc[0]_I ( .PADDI(\vc_c[0] ), .vc0(vc[0]));
  vc_0__MGIOL \vc[0]_MGIOL ( .DI(\vc_c[0] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk1_c), .INFF(\q_vc[0] ));
  byte_data1_31_ \byte_data1[31]_I ( .PADDI(\byte_data1_c[31] ), 
    .bytedata31(byte_data[31]));
  byte_data1_31__MGIOL \byte_data1[31]_MGIOL ( .DI(\byte_data1_c[31] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[31] ));
  byte_data1_30_ \byte_data[30]_I ( .PADDI(\byte_data1_c[30] ), 
    .bytedata30(byte_data[30]));
  byte_data1_30__MGIOL \byte_data1[30]_MGIOL ( .DI(\byte_data1_c[30] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[30] ));
  byte_data1_29_ \byte_data1[29]_I ( .PADDI(\byte_data1_c[29] ), 
    .bytedata29(byte_data[29]));
  byte_data1_29__MGIOL \byte_data1[29]_MGIOL ( .DI(\byte_data1_c[29] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[29] ));
  byte_data1_28_ \byte_data1[28]_I ( .PADDI(\byte_data1_c[28] ), 
    .bytedata28(byte_data[28]));
  byte_data1_28__MGIOL \byte_data1[28]_MGIOL ( .DI(\byte_data1_c[28] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[28] ));
  byte_data1_27_ \byte_data1[27]_I ( .PADDI(\byte_data1_c[27] ), 
    .bytedata27(byte_data[27]));
  byte_data1_27__MGIOL \byte_data1[27]_MGIOL ( .DI(\byte_data1_c[27] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[27] ));
  byte_data1_26_ \byte_data1[26]_I ( .PADDI(\byte_data1_c[26] ), 
    .bytedata26(byte_data[26]));
  byte_data1_26__MGIOL \byte_data1[26]_MGIOL ( .DI(\byte_data1_c[26] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[26] ));
  byte_data1_25_ \byte_data1[25]_I ( .PADDI(\byte_data1_c[25] ), 
    .bytedata25(byte_data[25]));
  byte_data1_25__MGIOL \byte_data1[25]_MGIOL ( .DI(\byte_data1_c[25] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[25] ));
  byte_data1_24_ \byte_data1[24]_I ( .PADDI(\byte_data1_c[24] ), 
    .bytedata24(byte_data[24]));
  byte_data1_24__MGIOL \byte_data1[24]_MGIOL ( .DI(\byte_data1_c[24] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[24] ));
  byte_data1_23_ \byte_data1[23]_I ( .PADDI(\byte_data1_c[23] ), 
    .bytedata23(byte_data[23]));
  byte_data1_23__MGIOL \byte_data1[23]_MGIOL ( .DI(\byte_data1_c[23] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[23] ));
  byte_data1_22_ \byte_data1[22]_I ( .PADDI(\byte_data1_c[22] ), 
    .bytedata22(byte_data[22]));
  byte_data1_22__MGIOL \byte_data1[22]_MGIOL ( .DI(\byte_data1_c[22] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[22] ));
  byte_data1_21_ \byte_data1[21]_I ( .PADDI(\byte_data1_c[21] ), 
    .bytedata21(byte_data[21]));
  byte_data1_21__MGIOL \byte_data1[21]_MGIOL ( .DI(\byte_data1_c[21] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[21] ));
  byte_data1_20_ \byte_data1[20]_I ( .PADDI(\byte_data1_c[20] ), 
    .bytedata20(byte_data[20]));
  byte_data1_20__MGIOL \byte_data1[20]_MGIOL ( .DI(\byte_data1_c[20] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[20] ));
  byte_data1_19_ \byte_data1[19]_I ( .PADDI(\byte_data1_c[19] ), 
    .bytedata19(byte_data[19]));
  byte_data1_19__MGIOL \byte_data1[19]_MGIOL ( .DI(\byte_data1_c[19] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[19] ));
  byte_data1_18_ \byte_data1[18]_I ( .PADDI(\byte_data1_c[18] ), 
    .bytedata18(byte_data[18]));
  byte_data1_18__MGIOL \byte_data1[18]_MGIOL ( .DI(\byte_data1_c[18] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[18] ));
  byte_data1_17_ \byte_data1[17]_I ( .PADDI(\byte_data1_c[17] ), 
    .bytedata17(byte_data[17]));
  byte_data1_17__MGIOL \byte_data1[17]_MGIOL ( .DI(\byte_data1_c[17] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[17] ));
  byte_data1_16_ \byte_data1[16]_I ( .PADDI(\byte_data1_c[16] ), 
    .bytedata16(byte_data[16]));
  byte_data1_16__MGIOL \byte_data1[16]_MGIOL ( .DI(\byte_data1_c[16] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[16] ));
  byte_data1_15_ \byte_data1[15]_I ( .PADDI(\byte_data1_c[15] ), 
    .bytedata15(byte_data[15]));
  byte_data1_15__MGIOL \byte_data1[15]_MGIOL ( .DI(\byte_data1_c[15] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[15] ));
  byte_data1_14_ \byte_data1[14]_I ( .PADDI(\byte_data1_c[14] ), 
    .bytedata14(byte_data[14]));
  byte_data1_14__MGIOL \byte_data1[14]_MGIOL ( .DI(\byte_data1_c[14] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[14] ));
  byte_data1_13_ \byte_data1[13]_I ( .PADDI(\byte_data1_c[13] ), 
    .bytedata13(byte_data[13]));
  byte_data1_13__MGIOL \byte_data1[13]_MGIOL ( .DI(\byte_data1_c[13] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[13] ));
  byte_data1_12_ \byte_data1[12]_I ( .PADDI(\byte_data1_c[12] ), 
    .bytedata12(byte_data[12]));
  byte_data1_12__MGIOL \byte_data1[12]_MGIOL ( .DI(\byte_data1_c[12] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[12] ));
  byte_data1_11_ \byte_data1[11]_I ( .PADDI(\byte_data1_c[11] ), 
    .bytedata11(byte_data[11]));
  byte_data1_11__MGIOL \byte_data1[11]_MGIOL ( .DI(\byte_data1_c[11] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[11] ));
  byte_data1_10_ \byte_data1[10]_I ( .PADDI(\byte_data1_c[10] ), 
    .bytedata10(byte_data[10]));
  byte_data1_10__MGIOL \byte_data1[10]_MGIOL ( .DI(\byte_data1_c[10] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[10] ));
  byte_data1_9_ \byte_data1[9]_I ( .PADDI(\byte_data1_c[9] ), 
    .bytedata9(byte_data[9]));
  byte_data1_9__MGIOL \byte_data1[9]_MGIOL ( .DI(\byte_data1_c[9] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[9] ));
  byte_data1_8_ \byte_data1[8]_I ( .PADDI(\byte_data1_c[8] ), 
    .bytedata8(byte_data[8]));
  byte_data1_8__MGIOL \byte_data1[8]_MGIOL ( .DI(\byte_data1_c[8] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[8] ));
  byte_data1_7_ \byte_data1[7]_I ( .PADDI(\byte_data1_c[7] ), 
    .bytedata7(byte_data[7]));
  byte_data1_7__MGIOL \byte_data1[7]_MGIOL ( .DI(\byte_data1_c[7] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[7] ));
  byte_data1_6_ \byte_data1[6]_I ( .PADDI(\byte_data1_c[6] ), 
    .bytedata6(byte_data[6]));
  byte_data1_6__MGIOL \byte_data1[6]_MGIOL ( .DI(\byte_data1_c[6] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[6] ));
  byte_data1_5_ \byte_data1[5]_I ( .PADDI(\byte_data1_c[5] ), 
    .bytedata5(byte_data[5]));
  byte_data1_5__MGIOL \byte_data1[5]_MGIOL ( .DI(\byte_data1_c[5] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[5] ));
  byte_data1_4_ \byte_data1[4]_I ( .PADDI(\byte_data1_c[4] ), 
    .bytedata4(byte_data[4]));
  byte_data1_4__MGIOL \byte_data1[4]_MGIOL ( .DI(\byte_data1_c[4] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[4] ));
  byte_data1_3_ \byte_data1[3]_I ( .PADDI(\byte_data1_c[3] ), 
    .bytedata3(byte_data[3]));
  byte_data1_3__MGIOL \byte_data1[3]_MGIOL ( .DI(\byte_data1_c[3] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[3] ));
  byte_data1_2_ \byte_data1[2]_I ( .PADDI(\byte_data1_c[2] ), 
    .bytedata2(byte_data[2]));
  byte_data1_2__MGIOL \byte_data1[2]_MGIOL ( .DI(\byte_data1_c[2] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[2] ));
  byte_data1_1_ \byte_data1[1]_I ( .PADDI(\byte_data1_c[1] ), 
    .bytedata1(byte_data[1]));
  byte_data1_1__MGIOL \byte_data1[1]_MGIOL ( .DI(\byte_data1_c[1] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[1] ));
  byte_data1_0_ \byte_data1[0]_I ( .PADDI(\byte_data1_c[0] ), 
    .bytedata0(byte_data[0]));
  byte_data1_0__MGIOL \byte_data1[0]_MGIOL ( .DI(\byte_data1_c[0] ), 
    .CLK(byte_clk1_c), .INFF(\q_byte_data1[0] ));
  byte_clk1 byte_clk1_I( .PADDI(byte_clk1_c), .byte_clk1(byte_clk));
  long_en long_en_I( .PADDI(long_en_c), .long_en(long_en));
  long_en_MGIOL long_en_MGIOL( .DI(long_en_c), .CLK(byte_clk1_c), 
    .INFF(q_long_en));
  short_en short_en_I( .PADDI(short_en_c), .short_en(short_en));
  short_en_MGIOL short_en_MGIOL( .DI(short_en_c), .CLK(byte_clk1_c), 
    .INFF(q_short_en));
  u_PH_DLY_FIFO_pdp_ram_0_0_0 \u_PH_DLY_FIFO/pdp_ram_0_0_0 ( 
    .DIA17(\q_byte_data1[17] ), .DIA16(\q_byte_data1[16] ), 
    .DIA15(\q_byte_data1[15] ), .DIA14(\q_byte_data1[14] ), 
    .DIA13(\q_byte_data1[13] ), .DIA12(\q_byte_data1[12] ), 
    .DIA11(\q_byte_data1[11] ), .DIA10(\q_byte_data1[10] ), 
    .DIA9(\q_byte_data1[9] ), .DIA8(\q_byte_data1[8] ), .DIA7(\q_byte_data1[7] ), 
    .DIA6(\q_byte_data1[6] ), .DIA5(\q_byte_data1[5] ), .DIA4(\q_byte_data1[4] ), 
    .DIA3(\q_byte_data1[3] ), .DIA2(\q_byte_data1[2] ), .DIA1(\q_byte_data1[1] ), 
    .DIA0(\q_byte_data1[0] ), .ADA13(\u_PH_DLY_FIFO/wptr_8 ), 
    .ADA12(\u_PH_DLY_FIFO/wptr_7 ), .ADA11(\u_PH_DLY_FIFO/wptr_6 ), 
    .ADA10(\u_PH_DLY_FIFO/wptr_5 ), .ADA9(\u_PH_DLY_FIFO/wptr_4 ), 
    .ADA8(\u_PH_DLY_FIFO/wptr_3 ), .ADA7(\u_PH_DLY_FIFO/wptr_2 ), 
    .ADA6(\u_PH_DLY_FIFO/wptr_1 ), .ADA5(\u_PH_DLY_FIFO/wptr_0 ), 
    .DOA15(\byte_data1_fifo[15] ), .DOA14(\byte_data1_fifo[14] ), 
    .DOA13(\byte_data1_fifo[13] ), .DOA12(\byte_data1_fifo[12] ), 
    .DOA11(\byte_data1_fifo[11] ), .DOA10(\byte_data1_fifo[10] ), 
    .DOA9(\byte_data1_fifo[9] ), .DOA8(\byte_data1_fifo[8] ), 
    .DOA7(\byte_data1_fifo[7] ), .DOA6(\byte_data1_fifo[6] ), 
    .DOA5(\byte_data1_fifo[5] ), .DOA4(\byte_data1_fifo[4] ), 
    .DOA3(\byte_data1_fifo[3] ), .DOA2(\byte_data1_fifo[2] ), 
    .DOA1(\byte_data1_fifo[1] ), .DOA0(\byte_data1_fifo[0] ), 
    .CEA(\u_PH_DLY_FIFO/wren_i ), .RSTA(un1_q_bytepkt_en_0), .CLKA(byte_clk1_c), 
    .CLKB(byte_clk1_c), .RSTB(un1_q_bytepkt_en_0), 
    .OCEB(\u_PH_DLY_FIFO/rden_i ), .CEB(\u_PH_DLY_FIFO/rden_i ), 
    .ADB5(\u_PH_DLY_FIFO/rptr_0 ), .ADB6(\u_PH_DLY_FIFO/rptr_1 ), 
    .ADB7(\u_PH_DLY_FIFO/rptr_2 ), .ADB8(\u_PH_DLY_FIFO/rptr_3 ), 
    .ADB9(\u_PH_DLY_FIFO/rptr_4 ), .ADB10(\u_PH_DLY_FIFO/rptr_5 ), 
    .ADB11(\u_PH_DLY_FIFO/rptr_6 ), .ADB12(\u_PH_DLY_FIFO/rptr_7 ), 
    .ADB13(\u_PH_DLY_FIFO/rptr_8 ), .DIB0(\q_byte_data1[18] ), 
    .DIB1(\q_byte_data1[19] ), .DIB2(\q_byte_data1[20] ), 
    .DIB3(\q_byte_data1[21] ), .DIB4(\q_byte_data1[22] ), 
    .DIB5(\q_byte_data1[23] ), .DIB6(\q_byte_data1[24] ), 
    .DIB7(\q_byte_data1[25] ), .DIB8(\q_byte_data1[26] ), 
    .DIB9(\q_byte_data1[27] ), .DIB10(\q_byte_data1[28] ), 
    .DIB11(\q_byte_data1[29] ), .DIB12(\q_byte_data1[30] ), 
    .DIB13(\q_byte_data1[31] ));
  GSR_INST1 GSR_INST1( .GSRNET(reset_n1_c));
  VHI VHI_INST( .Z(vcc2I));
  PUR PUR_INST( .PUR(vcc2I));
endmodule

module bytepkt_en ( input PADDO, output bytepkt_en );

  sapiobuf1 bytepkt_en_pad( .I(PADDO), .PAD(bytepkt_en));

  specify
    (PADDO => bytepkt_en) = (0:0:0,0:0:0);
  endspecify

endmodule

module sapiobuf1 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module gnd1 ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module reset_n1 ( output PADDI, input reset_n1 );

  sapiobuf10001 reset_n1_pad( .Z(PADDI), .PAD(reset_n1));

  specify
    (reset_n1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge reset_n1, 0:0:0);
    $width (negedge reset_n1, 0:0:0);
  endspecify

endmodule

module sapiobuf10001 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module EoTp ( output PADDI, input EoTp );

  sapiobuf10001 EoTp_pad( .Z(PADDI), .PAD(EoTp));

  specify
    (EoTp => PADDI) = (0:0:0,0:0:0);
    $width (posedge EoTp, 0:0:0);
    $width (negedge EoTp, 0:0:0);
  endspecify

endmodule

module bytepkt_31_ ( input PADDO, output bytepkt31 );

  sapiobuf1 \bytepkt_pad[31] ( .I(PADDO), .PAD(bytepkt31));

  specify
    (PADDO => bytepkt31) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_30_ ( input PADDO, output bytepkt30 );

  sapiobuf1 \bytepkt_pad[30] ( .I(PADDO), .PAD(bytepkt30));

  specify
    (PADDO => bytepkt30) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_29_ ( input PADDO, output bytepkt29 );

  sapiobuf1 \bytepkt_pad[29] ( .I(PADDO), .PAD(bytepkt29));

  specify
    (PADDO => bytepkt29) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_28_ ( input PADDO, output bytepkt28 );

  sapiobuf1 \bytepkt_pad[28] ( .I(PADDO), .PAD(bytepkt28));

  specify
    (PADDO => bytepkt28) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_27_ ( input PADDO, output bytepkt27 );

  sapiobuf1 \bytepkt_pad[27] ( .I(PADDO), .PAD(bytepkt27));

  specify
    (PADDO => bytepkt27) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_26_ ( input PADDO, output bytepkt26 );

  sapiobuf1 \bytepkt_pad[26] ( .I(PADDO), .PAD(bytepkt26));

  specify
    (PADDO => bytepkt26) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_25_ ( input PADDO, output bytepkt25 );

  sapiobuf1 \bytepkt_pad[25] ( .I(PADDO), .PAD(bytepkt25));

  specify
    (PADDO => bytepkt25) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_24_ ( input PADDO, output bytepkt24 );

  sapiobuf1 \bytepkt_pad[24] ( .I(PADDO), .PAD(bytepkt24));

  specify
    (PADDO => bytepkt24) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_23_ ( input PADDO, output bytepkt23 );

  sapiobuf1 \bytepkt_pad[23] ( .I(PADDO), .PAD(bytepkt23));

  specify
    (PADDO => bytepkt23) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_22_ ( input PADDO, output bytepkt22 );

  sapiobuf1 \bytepkt_pad[22] ( .I(PADDO), .PAD(bytepkt22));

  specify
    (PADDO => bytepkt22) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_21_ ( input PADDO, output bytepkt21 );

  sapiobuf1 \bytepkt_pad[21] ( .I(PADDO), .PAD(bytepkt21));

  specify
    (PADDO => bytepkt21) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_20_ ( input PADDO, output bytepkt20 );

  sapiobuf1 \bytepkt_pad[20] ( .I(PADDO), .PAD(bytepkt20));

  specify
    (PADDO => bytepkt20) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_19_ ( input PADDO, output bytepkt19 );

  sapiobuf1 \bytepkt_pad[19] ( .I(PADDO), .PAD(bytepkt19));

  specify
    (PADDO => bytepkt19) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_18_ ( input PADDO, output bytepkt18 );

  sapiobuf1 \bytepkt_pad[18] ( .I(PADDO), .PAD(bytepkt18));

  specify
    (PADDO => bytepkt18) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_17_ ( input PADDO, output bytepkt17 );

  sapiobuf1 \bytepkt_pad[17] ( .I(PADDO), .PAD(bytepkt17));

  specify
    (PADDO => bytepkt17) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_16_ ( input PADDO, output bytepkt16 );

  sapiobuf1 \bytepkt_pad[16] ( .I(PADDO), .PAD(bytepkt16));

  specify
    (PADDO => bytepkt16) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_15_ ( input IOLDO, output bytepkt15 );

  sapiobuf1 \bytepkt_pad[15] ( .I(IOLDO), .PAD(bytepkt15));

  specify
    (IOLDO => bytepkt15) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_15__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[15] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc2 ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module bytepkt_14_ ( input IOLDO, output bytepkt14 );

  sapiobuf1 \bytepkt_pad[14] ( .I(IOLDO), .PAD(bytepkt14));

  specify
    (IOLDO => bytepkt14) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_14__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[14] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_13_ ( input IOLDO, output bytepkt13 );

  sapiobuf1 \bytepkt_pad[13] ( .I(IOLDO), .PAD(bytepkt13));

  specify
    (IOLDO => bytepkt13) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_13__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[13] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_12_ ( input IOLDO, output bytepkt12 );

  sapiobuf1 \bytepkt_pad[12] ( .I(IOLDO), .PAD(bytepkt12));

  specify
    (IOLDO => bytepkt12) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_12__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[12] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_11_ ( input IOLDO, output bytepkt11 );

  sapiobuf1 \bytepkt_pad[11] ( .I(IOLDO), .PAD(bytepkt11));

  specify
    (IOLDO => bytepkt11) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_11__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[11] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_10_ ( input IOLDO, output bytepkt10 );

  sapiobuf1 \bytepkt_pad[10] ( .I(IOLDO), .PAD(bytepkt10));

  specify
    (IOLDO => bytepkt10) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_10__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[10] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_9_ ( input IOLDO, output bytepkt9 );

  sapiobuf1 \bytepkt_pad[9] ( .I(IOLDO), .PAD(bytepkt9));

  specify
    (IOLDO => bytepkt9) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_9__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[9] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_8_ ( input IOLDO, output bytepkt8 );

  sapiobuf1 \bytepkt_pad[8] ( .I(IOLDO), .PAD(bytepkt8));

  specify
    (IOLDO => bytepkt8) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_8__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[8] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_7_ ( input IOLDO, output bytepkt7 );

  sapiobuf1 \bytepkt_pad[7] ( .I(IOLDO), .PAD(bytepkt7));

  specify
    (IOLDO => bytepkt7) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_7__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[7] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_6_ ( input IOLDO, output bytepkt6 );

  sapiobuf1 \bytepkt_pad[6] ( .I(IOLDO), .PAD(bytepkt6));

  specify
    (IOLDO => bytepkt6) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_6__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[6] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_5_ ( input IOLDO, output bytepkt5 );

  sapiobuf1 \bytepkt_pad[5] ( .I(IOLDO), .PAD(bytepkt5));

  specify
    (IOLDO => bytepkt5) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_5__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[5] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_4_ ( input IOLDO, output bytepkt4 );

  sapiobuf1 \bytepkt_pad[4] ( .I(IOLDO), .PAD(bytepkt4));

  specify
    (IOLDO => bytepkt4) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_4__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[4] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_3_ ( input IOLDO, output bytepkt3 );

  sapiobuf1 \bytepkt_pad[3] ( .I(IOLDO), .PAD(bytepkt3));

  specify
    (IOLDO => bytepkt3) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_3__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[3] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_2_ ( input IOLDO, output bytepkt2 );

  sapiobuf1 \bytepkt_pad[2] ( .I(IOLDO), .PAD(bytepkt2));

  specify
    (IOLDO => bytepkt2) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_2__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[2] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_1_ ( input IOLDO, output bytepkt1 );

  sapiobuf1 \bytepkt_pad[1] ( .I(IOLDO), .PAD(bytepkt1));

  specify
    (IOLDO => bytepkt1) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_1__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[1] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_0_ ( input IOLDO, output bytepkt0 );

  sapiobuf1 \bytepkt_pad[0] ( .I(IOLDO), .PAD(bytepkt0));

  specify
    (IOLDO => bytepkt0) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_0__MGIOL ( output IOLDO, input TXDATA0, CLK );
  wire   vcc2I, gnd1I, TXDATA0_dly, CLK_dly;

  mfflsre2 \bytepkt_1_0io[0] ( .D0(TXDATA0_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(IOLDO));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, TXDATA0, 0:0:0, 0:0:0,,,, CLK_dly, TXDATA0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_15_ ( output PADDI, input chksum15 );

  sapiobuf10001 \chksum_pad[15] ( .Z(PADDI), .PAD(chksum15));

  specify
    (chksum15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum15, 0:0:0);
    $width (negedge chksum15, 0:0:0);
  endspecify

endmodule

module chksum_15__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre1 ( input D0, SP, CK, LSR, output Q );

  IFS1P3BX INST01( .D(D0), .SP(SP), .SCLK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module chksum_14_ ( output PADDI, input chksum14 );

  sapiobuf10001 \chksum_pad[14] ( .Z(PADDI), .PAD(chksum14));

  specify
    (chksum14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum14, 0:0:0);
    $width (negedge chksum14, 0:0:0);
  endspecify

endmodule

module chksum_14__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_13_ ( output PADDI, input chksum13 );

  sapiobuf10001 \chksum_pad[13] ( .Z(PADDI), .PAD(chksum13));

  specify
    (chksum13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum13, 0:0:0);
    $width (negedge chksum13, 0:0:0);
  endspecify

endmodule

module chksum_13__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_12_ ( output PADDI, input chksum12 );

  sapiobuf10001 \chksum_pad[12] ( .Z(PADDI), .PAD(chksum12));

  specify
    (chksum12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum12, 0:0:0);
    $width (negedge chksum12, 0:0:0);
  endspecify

endmodule

module chksum_12__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_11_ ( output PADDI, input chksum11 );

  sapiobuf10001 \chksum_pad[11] ( .Z(PADDI), .PAD(chksum11));

  specify
    (chksum11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum11, 0:0:0);
    $width (negedge chksum11, 0:0:0);
  endspecify

endmodule

module chksum_11__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_10_ ( output PADDI, input chksum10 );

  sapiobuf10001 \chksum_pad[10] ( .Z(PADDI), .PAD(chksum10));

  specify
    (chksum10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum10, 0:0:0);
    $width (negedge chksum10, 0:0:0);
  endspecify

endmodule

module chksum_10__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_9_ ( output PADDI, input chksum9 );

  sapiobuf10001 \chksum_pad[9] ( .Z(PADDI), .PAD(chksum9));

  specify
    (chksum9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum9, 0:0:0);
    $width (negedge chksum9, 0:0:0);
  endspecify

endmodule

module chksum_9__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_8_ ( output PADDI, input chksum8 );

  sapiobuf10001 \chksum_pad[8] ( .Z(PADDI), .PAD(chksum8));

  specify
    (chksum8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum8, 0:0:0);
    $width (negedge chksum8, 0:0:0);
  endspecify

endmodule

module chksum_8__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_7_ ( output PADDI, input chksum7 );

  sapiobuf10001 \chksum_pad[7] ( .Z(PADDI), .PAD(chksum7));

  specify
    (chksum7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum7, 0:0:0);
    $width (negedge chksum7, 0:0:0);
  endspecify

endmodule

module chksum_7__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_6_ ( output PADDI, input chksum6 );

  sapiobuf10001 \chksum_pad[6] ( .Z(PADDI), .PAD(chksum6));

  specify
    (chksum6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum6, 0:0:0);
    $width (negedge chksum6, 0:0:0);
  endspecify

endmodule

module chksum_6__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_5_ ( output PADDI, input chksum5 );

  sapiobuf10001 \chksum_pad[5] ( .Z(PADDI), .PAD(chksum5));

  specify
    (chksum5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum5, 0:0:0);
    $width (negedge chksum5, 0:0:0);
  endspecify

endmodule

module chksum_5__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_4_ ( output PADDI, input chksum4 );

  sapiobuf10001 \chksum_pad[4] ( .Z(PADDI), .PAD(chksum4));

  specify
    (chksum4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum4, 0:0:0);
    $width (negedge chksum4, 0:0:0);
  endspecify

endmodule

module chksum_4__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_3_ ( output PADDI, input chksum3 );

  sapiobuf10001 \chksum_pad[3] ( .Z(PADDI), .PAD(chksum3));

  specify
    (chksum3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum3, 0:0:0);
    $width (negedge chksum3, 0:0:0);
  endspecify

endmodule

module chksum_3__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_2_ ( output PADDI, input chksum2 );

  sapiobuf10001 \chksum_pad[2] ( .Z(PADDI), .PAD(chksum2));

  specify
    (chksum2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum2, 0:0:0);
    $width (negedge chksum2, 0:0:0);
  endspecify

endmodule

module chksum_2__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_1_ ( output PADDI, input chksum1 );

  sapiobuf10001 \chksum_pad[1] ( .Z(PADDI), .PAD(chksum1));

  specify
    (chksum1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum1, 0:0:0);
    $width (negedge chksum1, 0:0:0);
  endspecify

endmodule

module chksum_1__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_0_ ( output PADDI, input chksum0 );

  sapiobuf10001 \chksum_pad[0] ( .Z(PADDI), .PAD(chksum0));

  specify
    (chksum0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum0, 0:0:0);
    $width (negedge chksum0, 0:0:0);
  endspecify

endmodule

module chksum_0__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre1 \q_chksum_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_rdy ( output PADDI, input chksum_rdy );

  sapiobuf10001 chksum_rdy_pad( .Z(PADDI), .PAD(chksum_rdy));

  specify
    (chksum_rdy => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum_rdy, 0:0:0);
    $width (negedge chksum_rdy, 0:0:0);
  endspecify

endmodule

module wc_15_ ( output PADDI, input wc15 );

  sapiobuf10001 \wc_pad[15] ( .Z(PADDI), .PAD(wc15));

  specify
    (wc15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc15, 0:0:0);
    $width (negedge wc15, 0:0:0);
  endspecify

endmodule

module wc_15__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre10002 ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module wc_14_ ( output PADDI, input wc14 );

  sapiobuf10001 \wc_pad[14] ( .Z(PADDI), .PAD(wc14));

  specify
    (wc14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc14, 0:0:0);
    $width (negedge wc14, 0:0:0);
  endspecify

endmodule

module wc_14__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_13_ ( output PADDI, input wc13 );

  sapiobuf10001 \wc_pad[13] ( .Z(PADDI), .PAD(wc13));

  specify
    (wc13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc13, 0:0:0);
    $width (negedge wc13, 0:0:0);
  endspecify

endmodule

module wc_13__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_12_ ( output PADDI, input wc12 );

  sapiobuf10001 \wc_pad[12] ( .Z(PADDI), .PAD(wc12));

  specify
    (wc12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc12, 0:0:0);
    $width (negedge wc12, 0:0:0);
  endspecify

endmodule

module wc_12__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_11_ ( output PADDI, input wc11 );

  sapiobuf10001 \wc_pad[11] ( .Z(PADDI), .PAD(wc11));

  specify
    (wc11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc11, 0:0:0);
    $width (negedge wc11, 0:0:0);
  endspecify

endmodule

module wc_11__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_10_ ( output PADDI, input wc10 );

  sapiobuf10001 \wc_pad[10] ( .Z(PADDI), .PAD(wc10));

  specify
    (wc10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc10, 0:0:0);
    $width (negedge wc10, 0:0:0);
  endspecify

endmodule

module wc_10__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_9_ ( output PADDI, input wc9 );

  sapiobuf10001 \wc_pad[9] ( .Z(PADDI), .PAD(wc9));

  specify
    (wc9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc9, 0:0:0);
    $width (negedge wc9, 0:0:0);
  endspecify

endmodule

module wc_9__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_8_ ( output PADDI, input wc8 );

  sapiobuf10001 \wc_pad[8] ( .Z(PADDI), .PAD(wc8));

  specify
    (wc8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc8, 0:0:0);
    $width (negedge wc8, 0:0:0);
  endspecify

endmodule

module wc_8__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_7_ ( output PADDI, input wc7 );

  sapiobuf10001 \wc_pad[7] ( .Z(PADDI), .PAD(wc7));

  specify
    (wc7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc7, 0:0:0);
    $width (negedge wc7, 0:0:0);
  endspecify

endmodule

module wc_7__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_6_ ( output PADDI, input wc6 );

  sapiobuf10001 \wc_pad[6] ( .Z(PADDI), .PAD(wc6));

  specify
    (wc6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc6, 0:0:0);
    $width (negedge wc6, 0:0:0);
  endspecify

endmodule

module wc_6__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_5_ ( output PADDI, input wc5 );

  sapiobuf10001 \wc_pad[5] ( .Z(PADDI), .PAD(wc5));

  specify
    (wc5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc5, 0:0:0);
    $width (negedge wc5, 0:0:0);
  endspecify

endmodule

module wc_5__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_4_ ( output PADDI, input wc4 );

  sapiobuf10001 \wc_pad[4] ( .Z(PADDI), .PAD(wc4));

  specify
    (wc4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc4, 0:0:0);
    $width (negedge wc4, 0:0:0);
  endspecify

endmodule

module wc_4__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_3_ ( output PADDI, input wc3 );

  sapiobuf10001 \wc_pad[3] ( .Z(PADDI), .PAD(wc3));

  specify
    (wc3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc3, 0:0:0);
    $width (negedge wc3, 0:0:0);
  endspecify

endmodule

module wc_3__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_2_ ( output PADDI, input wc2 );

  sapiobuf10001 \wc_pad[2] ( .Z(PADDI), .PAD(wc2));

  specify
    (wc2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc2, 0:0:0);
    $width (negedge wc2, 0:0:0);
  endspecify

endmodule

module wc_2__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_1_ ( output PADDI, input wc1 );

  sapiobuf10001 \wc_pad[1] ( .Z(PADDI), .PAD(wc1));

  specify
    (wc1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc1, 0:0:0);
    $width (negedge wc1, 0:0:0);
  endspecify

endmodule

module wc_1__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_0_ ( output PADDI, input wc0 );

  sapiobuf10001 \wc_pad[0] ( .Z(PADDI), .PAD(wc0));

  specify
    (wc0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc0, 0:0:0);
    $width (negedge wc0, 0:0:0);
  endspecify

endmodule

module wc_0__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_wc_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_5_ ( output PADDI, input dt5 );

  sapiobuf10001 \dt_pad[5] ( .Z(PADDI), .PAD(dt5));

  specify
    (dt5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt5, 0:0:0);
    $width (negedge dt5, 0:0:0);
  endspecify

endmodule

module dt_5__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_dt_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_4_ ( output PADDI, input dt4 );

  sapiobuf10001 \dt_pad[4] ( .Z(PADDI), .PAD(dt4));

  specify
    (dt4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt4, 0:0:0);
    $width (negedge dt4, 0:0:0);
  endspecify

endmodule

module dt_4__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_dt_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_3_ ( output PADDI, input dt3 );

  sapiobuf10001 \dt_pad[3] ( .Z(PADDI), .PAD(dt3));

  specify
    (dt3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt3, 0:0:0);
    $width (negedge dt3, 0:0:0);
  endspecify

endmodule

module dt_3__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_dt_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_2_ ( output PADDI, input dt2 );

  sapiobuf10001 \dt_pad[2] ( .Z(PADDI), .PAD(dt2));

  specify
    (dt2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt2, 0:0:0);
    $width (negedge dt2, 0:0:0);
  endspecify

endmodule

module dt_2__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_dt_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_1_ ( output PADDI, input dt1 );

  sapiobuf10001 \dt_pad[1] ( .Z(PADDI), .PAD(dt1));

  specify
    (dt1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt1, 0:0:0);
    $width (negedge dt1, 0:0:0);
  endspecify

endmodule

module dt_1__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_dt_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_0_ ( output PADDI, input dt0 );

  sapiobuf10001 \dt_pad[0] ( .Z(PADDI), .PAD(dt0));

  specify
    (dt0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt0, 0:0:0);
    $width (negedge dt0, 0:0:0);
  endspecify

endmodule

module dt_0__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_dt_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vc_1_ ( output PADDI, input vc1 );

  sapiobuf10001 \vc_pad[1] ( .Z(PADDI), .PAD(vc1));

  specify
    (vc1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge vc1, 0:0:0);
    $width (negedge vc1, 0:0:0);
  endspecify

endmodule

module vc_1__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_vc_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vc_0_ ( output PADDI, input vc0 );

  sapiobuf10001 \vc_pad[0] ( .Z(PADDI), .PAD(vc0));

  specify
    (vc0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge vc0, 0:0:0);
    $width (negedge vc0, 0:0:0);
  endspecify

endmodule

module vc_0__MGIOL ( input DI, CE, CLK, output INFF );
  wire   gnd1I, DI_dly, CLK_dly, CE_dly;

  smuxlregsre10002 \q_vc_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_31_ ( output PADDI, input bytedata31 );

  sapiobuf10001 \byte_data1_pad[31] ( .Z(PADDI), .PAD(bytedata31));

  specify
    (bytedata31 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata31, 0:0:0);
    $width (negedge bytedata31, 0:0:0);
  endspecify

endmodule

module byte_data1_31__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[31] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_30_ ( output PADDI, input bytedata30 );

  sapiobuf10001 \byte_data1_pad[30] ( .Z(PADDI), .PAD(bytedata30));

  specify
    (bytedata30 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata30, 0:0:0);
    $width (negedge bytedata30, 0:0:0);
  endspecify

endmodule

module byte_data1_30__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[30] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_29_ ( output PADDI, input bytedata29 );

  sapiobuf10001 \byte_data1_pad[29] ( .Z(PADDI), .PAD(bytedata29));

  specify
    (bytedata29 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata29, 0:0:0);
    $width (negedge bytedata29, 0:0:0);
  endspecify

endmodule

module byte_data1_29__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[29] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_28_ ( output PADDI, input bytedata28 );

  sapiobuf10001 \byte_data1_pad[28] ( .Z(PADDI), .PAD(bytedata28));

  specify
    (bytedata28 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata28, 0:0:0);
    $width (negedge bytedata28, 0:0:0);
  endspecify

endmodule

module byte_data1_28__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[28] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_27_ ( output PADDI, input bytedata27 );

  sapiobuf10001 \byte_data1_pad[27] ( .Z(PADDI), .PAD(bytedata27));

  specify
    (bytedata27 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata27, 0:0:0);
    $width (negedge bytedata27, 0:0:0);
  endspecify

endmodule

module byte_data1_27__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[27] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_26_ ( output PADDI, input bytedata26 );

  sapiobuf10001 \byte_data1_pad[26] ( .Z(PADDI), .PAD(bytedata26));

  specify
    (bytedata26 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata26, 0:0:0);
    $width (negedge bytedata26, 0:0:0);
  endspecify

endmodule

module byte_data1_26__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[26] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_25_ ( output PADDI, input bytedata25 );

  sapiobuf10001 \byte_data1_pad[25] ( .Z(PADDI), .PAD(bytedata25));

  specify
    (bytedata25 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata25, 0:0:0);
    $width (negedge bytedata25, 0:0:0);
  endspecify

endmodule

module byte_data1_25__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[25] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_24_ ( output PADDI, input bytedata24 );

  sapiobuf10001 \byte_data1_pad[24] ( .Z(PADDI), .PAD(bytedata24));

  specify
    (bytedata24 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata24, 0:0:0);
    $width (negedge bytedata24, 0:0:0);
  endspecify

endmodule

module byte_data1_24__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[24] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_23_ ( output PADDI, input bytedata23 );

  sapiobuf10001 \byte_data1_pad[23] ( .Z(PADDI), .PAD(bytedata23));

  specify
    (bytedata23 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata23, 0:0:0);
    $width (negedge bytedata23, 0:0:0);
  endspecify

endmodule

module byte_data1_23__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[23] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_22_ ( output PADDI, input bytedata22 );

  sapiobuf10001 \byte_data1_pad[22] ( .Z(PADDI), .PAD(bytedata22));

  specify
    (bytedata22 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata22, 0:0:0);
    $width (negedge bytedata22, 0:0:0);
  endspecify

endmodule

module byte_data1_22__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[22] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_21_ ( output PADDI, input bytedata21 );

  sapiobuf10001 \byte_data1_pad[21] ( .Z(PADDI), .PAD(bytedata21));

  specify
    (bytedata21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata21, 0:0:0);
    $width (negedge bytedata21, 0:0:0);
  endspecify

endmodule

module byte_data1_21__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[21] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_20_ ( output PADDI, input bytedata20 );

  sapiobuf10001 \byte_data1_pad[20] ( .Z(PADDI), .PAD(bytedata20));

  specify
    (bytedata20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata20, 0:0:0);
    $width (negedge bytedata20, 0:0:0);
  endspecify

endmodule

module byte_data1_20__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[20] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_19_ ( output PADDI, input bytedata19 );

  sapiobuf10001 \byte_data1_pad[19] ( .Z(PADDI), .PAD(bytedata19));

  specify
    (bytedata19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata19, 0:0:0);
    $width (negedge bytedata19, 0:0:0);
  endspecify

endmodule

module byte_data1_19__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[19] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_18_ ( output PADDI, input bytedata18 );

  sapiobuf10001 \byte_data1_pad[18] ( .Z(PADDI), .PAD(bytedata18));

  specify
    (bytedata18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata18, 0:0:0);
    $width (negedge bytedata18, 0:0:0);
  endspecify

endmodule

module byte_data1_18__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[18] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_17_ ( output PADDI, input bytedata17 );

  sapiobuf10001 \byte_data1_pad[17] ( .Z(PADDI), .PAD(bytedata17));

  specify
    (bytedata17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata17, 0:0:0);
    $width (negedge bytedata17, 0:0:0);
  endspecify

endmodule

module byte_data1_17__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[17] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_16_ ( output PADDI, input bytedata16 );

  sapiobuf10001 \byte_data1_pad[16] ( .Z(PADDI), .PAD(bytedata16));

  specify
    (bytedata16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata16, 0:0:0);
    $width (negedge bytedata16, 0:0:0);
  endspecify

endmodule

module byte_data1_16__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[16] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_15_ ( output PADDI, input bytedata15 );

  sapiobuf10001 \byte_data1_pad[15] ( .Z(PADDI), .PAD(bytedata15));

  specify
    (bytedata15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata15, 0:0:0);
    $width (negedge bytedata15, 0:0:0);
  endspecify

endmodule

module byte_data1_15__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[15] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_14_ ( output PADDI, input bytedata14 );

  sapiobuf10001 \byte_data1_pad[14] ( .Z(PADDI), .PAD(bytedata14));

  specify
    (bytedata14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata14, 0:0:0);
    $width (negedge bytedata14, 0:0:0);
  endspecify

endmodule

module byte_data1_14__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[14] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_13_ ( output PADDI, input bytedata13 );

  sapiobuf10001 \byte_data1_pad[13] ( .Z(PADDI), .PAD(bytedata13));

  specify
    (bytedata13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata13, 0:0:0);
    $width (negedge bytedata13, 0:0:0);
  endspecify

endmodule

module byte_data1_13__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[13] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_12_ ( output PADDI, input bytedata12 );

  sapiobuf10001 \byte_data1_pad[12] ( .Z(PADDI), .PAD(bytedata12));

  specify
    (bytedata12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata12, 0:0:0);
    $width (negedge bytedata12, 0:0:0);
  endspecify

endmodule

module byte_data1_12__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[12] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_11_ ( output PADDI, input bytedata11 );

  sapiobuf10001 \byte_data1_pad[11] ( .Z(PADDI), .PAD(bytedata11));

  specify
    (bytedata11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata11, 0:0:0);
    $width (negedge bytedata11, 0:0:0);
  endspecify

endmodule

module byte_data1_11__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[11] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_10_ ( output PADDI, input bytedata10 );

  sapiobuf10001 \byte_data1_pad[10] ( .Z(PADDI), .PAD(bytedata10));

  specify
    (bytedata10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata10, 0:0:0);
    $width (negedge bytedata10, 0:0:0);
  endspecify

endmodule

module byte_data1_10__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[10] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_9_ ( output PADDI, input bytedata9 );

  sapiobuf10001 \byte_data1_pad[9] ( .Z(PADDI), .PAD(bytedata9));

  specify
    (bytedata9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata9, 0:0:0);
    $width (negedge bytedata9, 0:0:0);
  endspecify

endmodule

module byte_data1_9__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[9] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_8_ ( output PADDI, input bytedata8 );

  sapiobuf10001 \byte_data1_pad[8] ( .Z(PADDI), .PAD(bytedata8));

  specify
    (bytedata8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata8, 0:0:0);
    $width (negedge bytedata8, 0:0:0);
  endspecify

endmodule

module byte_data1_8__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[8] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_7_ ( output PADDI, input bytedata7 );

  sapiobuf10001 \byte_data1_pad[7] ( .Z(PADDI), .PAD(bytedata7));

  specify
    (bytedata7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata7, 0:0:0);
    $width (negedge bytedata7, 0:0:0);
  endspecify

endmodule

module byte_data1_7__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[7] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_6_ ( output PADDI, input bytedata6 );

  sapiobuf10001 \byte_data1_pad[6] ( .Z(PADDI), .PAD(bytedata6));

  specify
    (bytedata6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata6, 0:0:0);
    $width (negedge bytedata6, 0:0:0);
  endspecify

endmodule

module byte_data1_6__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[6] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_5_ ( output PADDI, input bytedata5 );

  sapiobuf10001 \byte_data1_pad[5] ( .Z(PADDI), .PAD(bytedata5));

  specify
    (bytedata5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata5, 0:0:0);
    $width (negedge bytedata5, 0:0:0);
  endspecify

endmodule

module byte_data1_5__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[5] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_4_ ( output PADDI, input bytedata4 );

  sapiobuf10001 \byte_data1_pad[4] ( .Z(PADDI), .PAD(bytedata4));

  specify
    (bytedata4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata4, 0:0:0);
    $width (negedge bytedata4, 0:0:0);
  endspecify

endmodule

module byte_data1_4__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[4] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_3_ ( output PADDI, input bytedata3 );

  sapiobuf10001 \byte_data1_pad[3] ( .Z(PADDI), .PAD(bytedata3));

  specify
    (bytedata3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata3, 0:0:0);
    $width (negedge bytedata3, 0:0:0);
  endspecify

endmodule

module byte_data1_3__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[3] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_2_ ( output PADDI, input bytedata2 );

  sapiobuf10001 \byte_data1_pad[2] ( .Z(PADDI), .PAD(bytedata2));

  specify
    (bytedata2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata2, 0:0:0);
    $width (negedge bytedata2, 0:0:0);
  endspecify

endmodule

module byte_data1_2__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[2] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_1_ ( output PADDI, input bytedata1 );

  sapiobuf10001 \byte_data1_pad[1] ( .Z(PADDI), .PAD(bytedata1));

  specify
    (bytedata1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata1, 0:0:0);
    $width (negedge bytedata1, 0:0:0);
  endspecify

endmodule

module byte_data1_1__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[1] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data1_0_ ( output PADDI, input bytedata0 );

  sapiobuf10001 \byte_data1_pad[0] ( .Z(PADDI), .PAD(bytedata0));

  specify
    (bytedata0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata0, 0:0:0);
    $width (negedge bytedata0, 0:0:0);
  endspecify

endmodule

module byte_data1_0__MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 \q_byte_data1_0io[0] ( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_clk1 ( output PADDI, input byte_clk1 );

  sapiobuf10001 byte_clk1_pad( .Z(PADDI), .PAD(byte_clk1));

  specify
    (byte_clk1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge byte_clk1, 0:0:0);
    $width (negedge byte_clk1, 0:0:0);
  endspecify

endmodule

module long_en ( output PADDI, input long_en );

  sapiobuf10001 long_en_pad( .Z(PADDI), .PAD(long_en));

  specify
    (long_en => PADDI) = (0:0:0,0:0:0);
    $width (posedge long_en, 0:0:0);
    $width (negedge long_en, 0:0:0);
  endspecify

endmodule

module long_en_MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 q_long_en_0io( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module short_en ( output PADDI, input short_en );

  sapiobuf10001 short_en_pad( .Z(PADDI), .PAD(short_en));

  specify
    (short_en => PADDI) = (0:0:0,0:0:0);
    $width (posedge short_en, 0:0:0);
    $width (negedge short_en, 0:0:0);
  endspecify

endmodule

module short_en_MGIOL ( input DI, CLK, output INFF );
  wire   vcc2I, gnd1I, DI_dly, CLK_dly;

  smuxlregsre10002 q_short_en_0io( .D0(DI_dly), .SP(vcc2I), .CK(CLK_dly), 
    .LSR(gnd1I), .Q(INFF));
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (CLK => INFF) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_pdp_ram_0_0_0 ( input DIA17, DIA16, DIA15, DIA14, DIA13, 
    DIA12, DIA11, DIA10, DIA9, DIA8, DIA7, DIA6, DIA5, DIA4, DIA3, DIA2, DIA1, 
    DIA0, ADA13, ADA12, ADA11, ADA10, ADA9, ADA8, ADA7, ADA6, ADA5, output 
    DOA15, DOA14, DOA13, DOA12, DOA11, DOA10, DOA9, DOA8, DOA7, DOA6, DOA5, 
    DOA4, DOA3, DOA2, DOA1, DOA0, input CEA, RSTA, CLKA, CLKB, RSTB, OCEB, CEB, 
    ADB5, ADB6, ADB7, ADB8, ADB9, ADB10, ADB11, ADB12, ADB13, DIB0, DIB1, DIB2, 
    DIB3, DIB4, DIB5, DIB6, DIB7, DIB8, DIB9, DIB10, DIB11, DIB12, DIB13 );
  wire   vcc2I, gnd1I, DIA17_dly, CLKA_dly, DIA16_dly, DIA15_dly, DIA14_dly, 
         DIA13_dly, DIA12_dly, DIA11_dly, DIA10_dly, DIA9_dly, DIA8_dly, 
         DIA7_dly, DIA6_dly, DIA5_dly, DIA4_dly, DIA3_dly, DIA2_dly, DIA1_dly, 
         DIA0_dly, ADA13_dly, ADA12_dly, ADA11_dly, ADA10_dly, ADA9_dly, 
         ADA8_dly, ADA7_dly, ADA6_dly, ADA5_dly, CEA_dly, RSTA_dly, RSTB_dly, 
         CLKB_dly, OCEB_dly, CEB_dly, ADB5_dly, ADB6_dly, ADB7_dly, ADB8_dly, 
         ADB9_dly, ADB10_dly, ADB11_dly, ADB12_dly, ADB13_dly, DIB0_dly, 
         DIB1_dly, DIB2_dly, DIB3_dly, DIB4_dly, DIB5_dly, DIB6_dly, DIB7_dly, 
         DIB8_dly, DIB9_dly, DIB10_dly, DIB11_dly, DIB12_dly, DIB13_dly;

  PDPW16KD_B \u_PH_DLY_FIFO/pdp_ram_0_0_0_PDPW16KD ( .CEW(CEA_dly), 
    .CLKW(CLKA_dly), .CSW0(vcc2I), .CSW1(gnd1I), .CSW2(gnd1I), .CER(CEB_dly), 
    .OCER(OCEB_dly), .CLKR(CLKB_dly), .CSR0(gnd1I), .CSR1(gnd1I), .CSR2(gnd1I), 
    .RST(RSTB_dly), .BE0(vcc2I), .BE1(vcc2I), .BE2(vcc2I), .BE3(vcc2I), 
    .DI0(DIA0_dly), .DI1(DIA1_dly), .DI2(DIA2_dly), .DI3(DIA3_dly), 
    .DI4(DIA4_dly), .DI5(DIA5_dly), .DI6(DIA6_dly), .DI7(DIA7_dly), 
    .DI8(DIA8_dly), .DI9(DIA9_dly), .DI10(DIA10_dly), .DI11(DIA11_dly), 
    .DI12(DIA12_dly), .DI13(DIA13_dly), .DI14(DIA14_dly), .DI15(DIA15_dly), 
    .DI16(DIA16_dly), .DI17(DIA17_dly), .DI18(DIB0_dly), .DI19(DIB1_dly), 
    .DI20(DIB2_dly), .DI21(DIB3_dly), .DI22(DIB4_dly), .DI23(DIB5_dly), 
    .DI24(DIB6_dly), .DI25(DIB7_dly), .DI26(DIB8_dly), .DI27(DIB9_dly), 
    .DI28(DIB10_dly), .DI29(DIB11_dly), .DI30(DIB12_dly), .DI31(DIB13_dly), 
    .DI32(gnd1I), .DI33(gnd1I), .DI34(gnd1I), .DI35(gnd1I), .ADW0(ADA5_dly), 
    .ADW1(ADA6_dly), .ADW2(ADA7_dly), .ADW3(ADA8_dly), .ADW4(ADA9_dly), 
    .ADW5(ADA10_dly), .ADW6(ADA11_dly), .ADW7(ADA12_dly), .ADW8(ADA13_dly), 
    .ADR0(gnd1I), .ADR1(gnd1I), .ADR2(gnd1I), .ADR3(gnd1I), .ADR4(gnd1I), 
    .ADR5(ADB5_dly), .ADR6(ADB6_dly), .ADR7(ADB7_dly), .ADR8(ADB8_dly), 
    .ADR9(ADB9_dly), .ADR10(ADB10_dly), .ADR11(ADB11_dly), .ADR12(ADB12_dly), 
    .ADR13(ADB13_dly), .DO0(), .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), 
    .DO7(), .DO8(), .DO9(), .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), 
    .DO15(), .DO16(), .DO17(), .DO18(DOA0), .DO19(DOA1), .DO20(DOA2), 
    .DO21(DOA3), .DO22(DOA4), .DO23(DOA5), .DO24(DOA6), .DO25(DOA7), 
    .DO26(DOA8), .DO27(DOA9), .DO28(DOA10), .DO29(DOA11), .DO30(DOA12), 
    .DO31(DOA13), .DO32(DOA14), .DO33(DOA15), .DO34(), .DO35());
  vcc2 DRIVEvcc2( .PWR1(vcc2I));
  gnd1 DRIVEgnd1( .PWR0(gnd1I));

  specify
    (RSTA => DOA15) = (0:0:0,0:0:0);
    (RSTA => DOA14) = (0:0:0,0:0:0);
    (RSTA => DOA13) = (0:0:0,0:0:0);
    (RSTA => DOA12) = (0:0:0,0:0:0);
    (RSTA => DOA11) = (0:0:0,0:0:0);
    (RSTA => DOA10) = (0:0:0,0:0:0);
    (RSTA => DOA9) = (0:0:0,0:0:0);
    (RSTA => DOA8) = (0:0:0,0:0:0);
    (RSTA => DOA7) = (0:0:0,0:0:0);
    (RSTA => DOA6) = (0:0:0,0:0:0);
    (RSTA => DOA5) = (0:0:0,0:0:0);
    (RSTA => DOA4) = (0:0:0,0:0:0);
    (RSTA => DOA3) = (0:0:0,0:0:0);
    (RSTA => DOA2) = (0:0:0,0:0:0);
    (RSTA => DOA1) = (0:0:0,0:0:0);
    (RSTA => DOA0) = (0:0:0,0:0:0);
    (CLKB => DOA15) = (0:0:0,0:0:0);
    (CLKB => DOA14) = (0:0:0,0:0:0);
    (CLKB => DOA13) = (0:0:0,0:0:0);
    (CLKB => DOA12) = (0:0:0,0:0:0);
    (CLKB => DOA11) = (0:0:0,0:0:0);
    (CLKB => DOA10) = (0:0:0,0:0:0);
    (CLKB => DOA9) = (0:0:0,0:0:0);
    (CLKB => DOA8) = (0:0:0,0:0:0);
    (CLKB => DOA7) = (0:0:0,0:0:0);
    (CLKB => DOA6) = (0:0:0,0:0:0);
    (CLKB => DOA5) = (0:0:0,0:0:0);
    (CLKB => DOA4) = (0:0:0,0:0:0);
    (CLKB => DOA3) = (0:0:0,0:0:0);
    (CLKB => DOA2) = (0:0:0,0:0:0);
    (CLKB => DOA1) = (0:0:0,0:0:0);
    (CLKB => DOA0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA17, 0:0:0, 0:0:0,,,, CLKA_dly, DIA17_dly);
    $setuphold (posedge CLKA, DIA16, 0:0:0, 0:0:0,,,, CLKA_dly, DIA16_dly);
    $setuphold (posedge CLKA, DIA15, 0:0:0, 0:0:0,,,, CLKA_dly, DIA15_dly);
    $setuphold (posedge CLKA, DIA14, 0:0:0, 0:0:0,,,, CLKA_dly, DIA14_dly);
    $setuphold (posedge CLKA, DIA13, 0:0:0, 0:0:0,,,, CLKA_dly, DIA13_dly);
    $setuphold (posedge CLKA, DIA12, 0:0:0, 0:0:0,,,, CLKA_dly, DIA12_dly);
    $setuphold (posedge CLKA, DIA11, 0:0:0, 0:0:0,,,, CLKA_dly, DIA11_dly);
    $setuphold (posedge CLKA, DIA10, 0:0:0, 0:0:0,,,, CLKA_dly, DIA10_dly);
    $setuphold (posedge CLKA, DIA9, 0:0:0, 0:0:0,,,, CLKA_dly, DIA9_dly);
    $setuphold (posedge CLKA, DIA8, 0:0:0, 0:0:0,,,, CLKA_dly, DIA8_dly);
    $setuphold (posedge CLKA, DIA7, 0:0:0, 0:0:0,,,, CLKA_dly, DIA7_dly);
    $setuphold (posedge CLKA, DIA6, 0:0:0, 0:0:0,,,, CLKA_dly, DIA6_dly);
    $setuphold (posedge CLKA, DIA5, 0:0:0, 0:0:0,,,, CLKA_dly, DIA5_dly);
    $setuphold (posedge CLKA, DIA4, 0:0:0, 0:0:0,,,, CLKA_dly, DIA4_dly);
    $setuphold (posedge CLKA, DIA3, 0:0:0, 0:0:0,,,, CLKA_dly, DIA3_dly);
    $setuphold (posedge CLKA, DIA2, 0:0:0, 0:0:0,,,, CLKA_dly, DIA2_dly);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, DIA0, 0:0:0, 0:0:0,,,, CLKA_dly, DIA0_dly);
    $setuphold (posedge CLKA, ADA13, 0:0:0, 0:0:0,,,, CLKA_dly, ADA13_dly);
    $setuphold (posedge CLKA, ADA12, 0:0:0, 0:0:0,,,, CLKA_dly, ADA12_dly);
    $setuphold (posedge CLKA, ADA11, 0:0:0, 0:0:0,,,, CLKA_dly, ADA11_dly);
    $setuphold (posedge CLKA, ADA10, 0:0:0, 0:0:0,,,, CLKA_dly, ADA10_dly);
    $setuphold (posedge CLKA, ADA9, 0:0:0, 0:0:0,,,, CLKA_dly, ADA9_dly);
    $setuphold (posedge CLKA, ADA8, 0:0:0, 0:0:0,,,, CLKA_dly, ADA8_dly);
    $setuphold (posedge CLKA, ADA7, 0:0:0, 0:0:0,,,, CLKA_dly, ADA7_dly);
    $setuphold (posedge CLKA, ADA6, 0:0:0, 0:0:0,,,, CLKA_dly, ADA6_dly);
    $setuphold (posedge CLKA, ADA5, 0:0:0, 0:0:0,,,, CLKA_dly, ADA5_dly);
    $setuphold (posedge CLKA, CEA, 0:0:0, 0:0:0,,,, CLKA_dly, CEA_dly);
    $setuphold (posedge CLKA, RSTA, 0:0:0, 0:0:0,,,, CLKA_dly, RSTA_dly);
    $setuphold (posedge CLKB, RSTB, 0:0:0, 0:0:0,,,, CLKB_dly, RSTB_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKB, ADB5, 0:0:0, 0:0:0,,,, CLKB_dly, ADB5_dly);
    $setuphold (posedge CLKB, ADB6, 0:0:0, 0:0:0,,,, CLKB_dly, ADB6_dly);
    $setuphold (posedge CLKB, ADB7, 0:0:0, 0:0:0,,,, CLKB_dly, ADB7_dly);
    $setuphold (posedge CLKB, ADB8, 0:0:0, 0:0:0,,,, CLKB_dly, ADB8_dly);
    $setuphold (posedge CLKB, ADB9, 0:0:0, 0:0:0,,,, CLKB_dly, ADB9_dly);
    $setuphold (posedge CLKB, ADB10, 0:0:0, 0:0:0,,,, CLKB_dly, ADB10_dly);
    $setuphold (posedge CLKB, ADB11, 0:0:0, 0:0:0,,,, CLKB_dly, ADB11_dly);
    $setuphold (posedge CLKB, ADB12, 0:0:0, 0:0:0,,,, CLKB_dly, ADB12_dly);
    $setuphold (posedge CLKB, ADB13, 0:0:0, 0:0:0,,,, CLKB_dly, ADB13_dly);
    $setuphold (posedge CLKA, DIB0, 0:0:0, 0:0:0,,,, CLKA_dly, DIB0_dly);
    $setuphold (posedge CLKA, DIB1, 0:0:0, 0:0:0,,,, CLKA_dly, DIB1_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $setuphold (posedge CLKA, DIB3, 0:0:0, 0:0:0,,,, CLKA_dly, DIB3_dly);
    $setuphold (posedge CLKA, DIB4, 0:0:0, 0:0:0,,,, CLKA_dly, DIB4_dly);
    $setuphold (posedge CLKA, DIB5, 0:0:0, 0:0:0,,,, CLKA_dly, DIB5_dly);
    $setuphold (posedge CLKA, DIB6, 0:0:0, 0:0:0,,,, CLKA_dly, DIB6_dly);
    $setuphold (posedge CLKA, DIB7, 0:0:0, 0:0:0,,,, CLKA_dly, DIB7_dly);
    $setuphold (posedge CLKA, DIB8, 0:0:0, 0:0:0,,,, CLKA_dly, DIB8_dly);
    $setuphold (posedge CLKA, DIB9, 0:0:0, 0:0:0,,,, CLKA_dly, DIB9_dly);
    $setuphold (posedge CLKA, DIB10, 0:0:0, 0:0:0,,,, CLKA_dly, DIB10_dly);
    $setuphold (posedge CLKA, DIB11, 0:0:0, 0:0:0,,,, CLKA_dly, DIB11_dly);
    $setuphold (posedge CLKA, DIB12, 0:0:0, 0:0:0,,,, CLKA_dly, DIB12_dly);
    $setuphold (posedge CLKA, DIB13, 0:0:0, 0:0:0,,,, CLKA_dly, DIB13_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module PDPW16KD_B ( input CEW, CLKW, CSW0, CSW1, CSW2, CER, OCER, CLKR, CSR0, 
    CSR1, CSR2, RST, BE0, BE1, BE2, BE3, DI0, DI1, DI2, DI3, DI4, DI5, DI6, 
    DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, DI18, DI19, 
    DI20, DI21, DI22, DI23, DI24, DI25, DI26, DI27, DI28, DI29, DI30, DI31, 
    DI32, DI33, DI34, DI35, ADW0, ADW1, ADW2, ADW3, ADW4, ADW5, ADW6, ADW7, 
    ADW8, ADR0, ADR1, ADR2, ADR3, ADR4, ADR5, ADR6, ADR7, ADR8, ADR9, ADR10, 
    ADR11, ADR12, ADR13, output DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, 
    DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, DO17, DO18, DO19, DO20, 
    DO21, DO22, DO23, DO24, DO25, DO26, DO27, DO28, DO29, DO30, DO31, DO32, 
    DO33, DO34, DO35 );

  PDPW16KD INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .DI18(DI18), .DI19(DI19), .DI20(DI20), 
    .DI21(DI21), .DI22(DI22), .DI23(DI23), .DI24(DI24), .DI25(DI25), 
    .DI26(DI26), .DI27(DI27), .DI28(DI28), .DI29(DI29), .DI30(DI30), 
    .DI31(DI31), .DI32(DI32), .DI33(DI33), .DI34(DI34), .DI35(DI35), 
    .ADW0(ADW0), .ADW1(ADW1), .ADW2(ADW2), .ADW3(ADW3), .ADW4(ADW4), 
    .ADW5(ADW5), .ADW6(ADW6), .ADW7(ADW7), .ADW8(ADW8), .BE0(BE0), .BE1(BE1), 
    .BE2(BE2), .BE3(BE3), .CEW(CEW), .CLKW(CLKW), .CSW0(CSW0), .CSW1(CSW1), 
    .CSW2(CSW2), .ADR0(ADR0), .ADR1(ADR1), .ADR2(ADR2), .ADR3(ADR3), 
    .ADR4(ADR4), .ADR5(ADR5), .ADR6(ADR6), .ADR7(ADR7), .ADR8(ADR8), 
    .ADR9(ADR9), .ADR10(ADR10), .ADR11(ADR11), .ADR12(ADR12), .ADR13(ADR13), 
    .CER(CER), .CLKR(CLKR), .CSR0(CSR0), .CSR1(CSR1), .CSR2(CSR2), .RST(RST), 
    .OCER(OCER), .DO0(DO0), .DO1(DO1), .DO2(DO2), .DO3(DO3), .DO4(DO4), 
    .DO5(DO5), .DO6(DO6), .DO7(DO7), .DO8(DO8), .DO9(DO9), .DO10(DO10), 
    .DO11(DO11), .DO12(DO12), .DO13(DO13), .DO14(DO14), .DO15(DO15), 
    .DO16(DO16), .DO17(DO17), .DO18(DO18), .DO19(DO19), .DO20(DO20), 
    .DO21(DO21), .DO22(DO22), .DO23(DO23), .DO24(DO24), .DO25(DO25), 
    .DO26(DO26), .DO27(DO27), .DO28(DO28), .DO29(DO29), .DO30(DO30), 
    .DO31(DO31), .DO32(DO32), .DO33(DO33), .DO34(DO34), .DO35(DO35));
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b000";
  defparam INST10.CSDECODE_W = "0b001";
  defparam INST10.DATA_WIDTH_R = 36;
  defparam INST10.DATA_WIDTH_W = 36;
  defparam INST10.GSR = "DISABLED";

    defparam INST10.INITVAL_00 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_01 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_02 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_03 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_04 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_05 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_06 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_07 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_08 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_09 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_0A = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_0B = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_0C = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_0D = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_0E = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_0F = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_10 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_11 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_12 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_13 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_14 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_15 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_16 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_17 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_18 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_19 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1A = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1B = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1C = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1D = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1E = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1F = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_20 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_21 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_22 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_23 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_24 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_25 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_26 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_27 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_28 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_29 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_2A = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_2B = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_2C = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_2D = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_2E = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_2F = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_30 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_31 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_32 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_33 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_34 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_35 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_36 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_37 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_38 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_39 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_3A = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_3B = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_3C = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_3D = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_3E = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_3F = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";
  defparam INST10.INIT_DATA = "STATIC";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module GSR_INST1 ( input GSRNET );

  GSR5MODE2 GSR_INST1_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE2 ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
