
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 2.2.0.101

// ldbanno -n Verilog -o Parallel2MIPI_Parallel2MIPI_mapvo.vo -w -neg Parallel2MIPI_Parallel2MIPI_map.ncd 
// Netlist created on Mon Jul 22 15:26:21 2013
// Netlist written on Mon Jul 22 15:26:23 2013
// Design is for device LCMXO2-1200HC
// Design is for package TQFP100
// Design is for performance grade 6

`timescale 1 ns / 1 ps

module packetheader ( reset_n, short_en, long_en, byte_clk, byte_data, vc, dt, 
                      wc, chksum_rdy, chksum, bytepkt_en, bytepkt, EoTp );
  input  reset_n, short_en, long_en, byte_clk;
  input  [31:0] byte_data;
  input  [1:0] vc;
  input  [5:0] dt;
  input  [15:0] wc;
  input  chksum_rdy;
  input  [15:0] chksum;
  input  EoTp;
  output bytepkt_en;
  output [31:0] bytepkt;
  wire   \lpkt_cnt[0] , lpkt_cnt, \lpkt_cnt_s[0] , byte_clk_c, 
         \lpkt_cnt_cry[0] , \u_PH_DLY_FIFO/rcount_3 , \u_PH_DLY_FIFO/rcount_2 , 
         \u_PH_DLY_FIFO/ircount_3 , \u_PH_DLY_FIFO/ircount_2 , 
         \u_PH_DLY_FIFO/rden_i , un1_q_bytepkt_en_0, \u_PH_DLY_FIFO/co0_1 , 
         \u_PH_DLY_FIFO/full_d , \u_PH_DLY_FIFO/full_d_c , 
         \u_PH_DLY_FIFO/FF_0_Q , \u_PH_DLY_FIFO/wcount_r1 , 
         \u_PH_DLY_FIFO/rcount_1 , \u_PH_DLY_FIFO/w_g2b_xor_cluster_0 , 
         \u_PH_DLY_FIFO/rcount_0 , \u_PH_DLY_FIFO/r_gcount_0 , 
         \u_PH_DLY_FIFO/r_gcount_1 , \u_PH_DLY_FIFO/cmp_ci , 
         \u_PH_DLY_FIFO/r_gcount_w1 , \u_PH_DLY_FIFO/r_gcount_w0 , 
         \u_PH_DLY_FIFO/co0_2 , \u_PH_DLY_FIFO/w_gctr_ci , 
         \u_PH_DLY_FIFO/wcount_1 , \u_PH_DLY_FIFO/wcount_0 , 
         \u_PH_DLY_FIFO/iwcount_1 , \u_PH_DLY_FIFO/iwcount_0 , 
         \u_PH_DLY_FIFO/wren_i , \u_PH_DLY_FIFO/co0 , \u_PH_DLY_FIFO/wcount_3 , 
         \u_PH_DLY_FIFO/wcount_2 , \u_PH_DLY_FIFO/iwcount_3 , 
         \u_PH_DLY_FIFO/iwcount_2 , \u_PH_DLY_FIFO/w_gcount_r0 , 
         \u_PH_DLY_FIFO/w_gcount_r1 , \u_PH_DLY_FIFO/w_gcount_r21 , 
         \u_PH_DLY_FIFO/w_gcount_r20 , \u_PH_DLY_FIFO/r_gctr_ci , 
         \u_PH_DLY_FIFO/ircount_1 , \u_PH_DLY_FIFO/ircount_0 , 
         \u_PH_DLY_FIFO/w_gcount_0 , \u_PH_DLY_FIFO/w_gcount_1 , 
         \u_PH_DLY_FIFO/empty_d , \u_PH_DLY_FIFO/empty_d_c , 
         \u_PH_DLY_FIFO/FF_1_Q , \u_PH_DLY_FIFO/w_gcount_r2 , 
         \u_PH_DLY_FIFO/w_gcount_r3 , \u_PH_DLY_FIFO/w_gcount_r23 , 
         \u_PH_DLY_FIFO/w_gcount_r22 , \u_PH_DLY_FIFO/cmp_ci_1 , 
         \u_PH_DLY_FIFO/full_cmp_clr , \u_PH_DLY_FIFO/full_cmp_set , 
         \u_PH_DLY_FIFO/rcount_w2 , \u_PH_DLY_FIFO/co0_3 , 
         \u_PH_DLY_FIFO/r_gcount_w21 , \u_PH_DLY_FIFO/r_gcount_w20 , 
         \u_PH_DLY_FIFO/rcount_w1 , \u_PH_DLY_FIFO/r_g2b_xor_cluster_0 , 
         \u_PH_DLY_FIFO/r_gcount_w2 , \u_PH_DLY_FIFO/r_gcount_w3 , 
         \u_PH_DLY_FIFO/r_gcount_w23 , \u_PH_DLY_FIFO/r_gcount_w22 , 
         \u_PH_DLY_FIFO/empty_cmp_clr , \u_PH_DLY_FIFO/empty_cmp_set , 
         \u_PH_DLY_FIFO/wcount_r2 , \u_PH_DLY_FIFO/w_gcount_2 , 
         \u_PH_DLY_FIFO/w_gcount_3 , \lpkt_cnt[15] , 
         un8_wc_end_flag_a_4_cry_14, un8_wc_end_flag_15, 
         \un8_wc_end_flag_a_4_i[16] , \lpkt_cnt[14] , \q_wc[15] , 
         \lpkt_cnt[13] , \q_wc[14] , un8_wc_end_flag_a_4_cry_12, 
         un8_wc_end_flag_13, un8_wc_end_flag_14, \lpkt_cnt[12] , \q_wc[13] , 
         \lpkt_cnt[11] , \q_wc[12] , un8_wc_end_flag_a_4_cry_10, 
         un8_wc_end_flag_11, un8_wc_end_flag_12, \lpkt_cnt[10] , \q_wc[11] , 
         \lpkt_cnt[9] , \q_wc[10] , un8_wc_end_flag_a_4_cry_8, 
         un8_wc_end_flag_9, un8_wc_end_flag_10, \lpkt_cnt[8] , \q_wc[9] , 
         \lpkt_cnt[7] , \q_wc[8] , un8_wc_end_flag_a_4_cry_6, 
         un8_wc_end_flag_7, un8_wc_end_flag_8, \lpkt_cnt[6] , \q_wc[7] , 
         \lpkt_cnt[5] , \q_wc[6] , un8_wc_end_flag_a_4_cry_4, 
         un8_wc_end_flag_5, un8_wc_end_flag_6, \lpkt_cnt[4] , \q_wc[5] , 
         \lpkt_cnt[3] , \q_wc[4] , un8_wc_end_flag_a_4_cry_2, 
         un8_wc_end_flag_3, un8_wc_end_flag_4, \lpkt_cnt[2] , \q_wc[3] , 
         \lpkt_cnt[1] , \q_wc[2] , un8_wc_end_flag_a_4_cry_0, 
         un8_wc_end_flag_1, un8_wc_end_flag_2, \q_wc[1] , \lpkt_cnt_s[15] , 
         \lpkt_cnt_cry[14] , \lpkt_cnt_s[14] , \lpkt_cnt_s[13] , 
         \lpkt_cnt_cry[12] , \lpkt_cnt_s[12] , \lpkt_cnt_s[11] , 
         \lpkt_cnt_cry[10] , \lpkt_cnt_s[10] , \lpkt_cnt_s[9] , 
         \lpkt_cnt_cry[8] , \lpkt_cnt_s[8] , \lpkt_cnt_s[7] , 
         \lpkt_cnt_cry[6] , \lpkt_cnt_s[6] , \lpkt_cnt_s[5] , 
         \lpkt_cnt_cry[4] , \lpkt_cnt_s[4] , \lpkt_cnt_s[3] , 
         \lpkt_cnt_cry[2] , \lpkt_cnt_s[2] , \lpkt_cnt_s[1] , \q_byte_data[3] , 
         \q_byte_data[2] , \q_byte_data[1] , \q_byte_data[0] , 
         \u_PH_DLY_FIFO/wptr_2 , \u_PH_DLY_FIFO/wptr_1 , 
         \u_PH_DLY_FIFO/wptr_0 , \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT , \u_PH_DLY_FIFO/rptr_2 , 
         \u_PH_DLY_FIFO/rptr_1 , \u_PH_DLY_FIFO/rptr_0 , 
         \u_PH_DLY_FIFO/rdataout1 , \u_PH_DLY_FIFO/rdataout0 , 
         \byte_data_fifo[0] , \byte_data_fifo[1] , \u_PH_DLY_FIFO/rdataout3 , 
         \u_PH_DLY_FIFO/rdataout2 , \byte_data_fifo[2] , \byte_data_fifo[3] , 
         \q_byte_data[15] , \q_byte_data[14] , \q_byte_data[13] , 
         \q_byte_data[12] , \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD3_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_4/WD3_INT , \u_PH_DLY_FIFO/rdataout13 , 
         \u_PH_DLY_FIFO/rdataout12 , \byte_data_fifo[12] , 
         \byte_data_fifo[13] , \u_PH_DLY_FIFO/rdataout15 , 
         \u_PH_DLY_FIFO/rdataout14 , \byte_data_fifo[14] , 
         \byte_data_fifo[15] , \q_byte_data[11] , \q_byte_data[10] , 
         \q_byte_data[9] , \q_byte_data[8] , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD3_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_5/WD3_INT , \u_PH_DLY_FIFO/rdataout9 , 
         \u_PH_DLY_FIFO/rdataout8 , \byte_data_fifo[8] , \byte_data_fifo[9] , 
         \u_PH_DLY_FIFO/rdataout11 , \u_PH_DLY_FIFO/rdataout10 , 
         \byte_data_fifo[10] , \byte_data_fifo[11] , \q_byte_data[7] , 
         \q_byte_data[6] , \q_byte_data[5] , \q_byte_data[4] , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT , \u_PH_DLY_FIFO/rdataout5 , 
         \u_PH_DLY_FIFO/rdataout4 , \byte_data_fifo[4] , \byte_data_fifo[5] , 
         \u_PH_DLY_FIFO/rdataout7 , \u_PH_DLY_FIFO/rdataout6 , 
         \byte_data_fifo[6] , \byte_data_fifo[7] , \q_ECC[4] , WC_1_En, 
         WC_0_En, q_long_pkt_indicator, chksum_En, EoTp_c, \EoTp_En_2[0] , 
         \EoTp_En[0] , \bytepkt_2_0_iv_0[12] , \EoTp_En[1] , lngpkt_ofst, 
         \EoTp_En_4[2] , \EoTp_En[2] , short_en_c, q_short_en, q_long_en, 
         long_en_c, un1_q_long_pkt_indicator_1_1_i, 
         un1_q_long_pkt_indicator_1_i, PH_En, un1_q_long_pkt_indicator_1_1, 
         \PH_cnt[1] , \PH_cnt[0] , \un7_PH_cnt_0[1] , \un7_PH_cnt_0[0] , 
         \PH_cnt[3] , \PH_cnt[2] , \PH_cnt_RNO[3] , \un7_PH_cnt_0[2] , 
         DataID_En_2, ECC_En_2, hsSync_En, bytepkt_en_2_3_0, bytepkt_en_2_3, 
         bytepkt_en_2, bytepkt_en_c, un8_wc_end_flag_NE_12, 
         un8_wc_end_flag_NE_5, un8_wc_end_flag_NE_14, un8_wc_end_flag_NE_10, 
         un8_wc_end_flag_NE_9, un8_wc_end_flag_NE_i, hsSync_En_2, 
         un2_lpkt_cnt_En_1, \wc_c[0] , un2_lngpkt_ofst_0, un7_lngpkt_ofst_i, 
         un2_lpkt_cnt_En_0, un15_lpkt_cnt_En_i, un87_q_ECC_0_a2_4, 
         un87_q_ECC_0_a2_3, N_22, N_21, un108_q_ECC_0_a2_5, un108_q_ECC_0_a2_4, 
         un87_q_ECC_0_a2, un108_q_ECC_0_a2, un5_q_ECC_0, \q_ECC[0] , 
         \q_ECC[1] , un47_q_ECC_0_a2_5, un47_q_ECC_0_a2_4, un47_q_ECC_0_a2_3, 
         un7_q_ECC_0_a2_3, un67_q_ECC_4, un67_q_ECC_0_a2_5, un67_q_ECC_0_a2_4, 
         un47_q_ECC_0_a2, un67_q_ECC_0_a2, \q_ECC[2] , \q_ECC[3] , 
         un7_q_ECC_0_a2_4, un7_q_ECC_0_a2_2_0, un7_q_ECC_0_a2_2, 
         un27_q_ECC_0_a2_4, un27_q_ECC_0_a2_3, un7_q_ECC_0_a2_1, 
         un7_q_ECC_0_a2, un27_q_ECC_0_a2, \q_ECC[5] , 
         un2_q_long_pkt_indicator_i, \u_PH_DLY_FIFO/r_gdata_1 , 
         \u_PH_DLY_FIFO/r_gdata_0 , \u_PH_DLY_FIFO/r_gdata_2 , 
         \u_PH_DLY_FIFO/r_gcount_2 , \u_PH_DLY_FIFO/r_gcount_3 , 
         \u_PH_DLY_FIFO/w_gdata_1 , \u_PH_DLY_FIFO/w_gdata_0 , 
         \u_PH_DLY_FIFO/w_gdata_2 , GND, \u_PH_DLY_FIFO/wptr_3 , 
         hsSync_En_RNIIQCD1, \bytepkt_2_0_iv_0[14] , un38_bytepkt, q_chksum_En, 
         un13_bytepkt, un50_bytepkt, N_196, un1_bytepkt_1_1, un49_bytepkt_0, 
         \q_chksum[13] , \bytepkt_2_0[0] , un1_bytepkt_1, 
         \bytepkt_2_0_iv_2[5] , \bytepkt_2_0_iv_3[5] , \bytepkt_2[5] , 
         \byte_data_fifo_m[15] , un45_bytepkt_0, \bytepkt_2_0_iv_2[11] , 
         \bytepkt_2_0_iv_0[11] , \byte_data_fifo_i_m[11] , 
         \bytepkt_2_0_iv_4[11] , hsSync_En_m, \bytepkt_2_0_iv_2[13] , 
         \bytepkt_2_0_iv_0[13] , \byte_data_fifo_m[13] , \bytepkt_2[13] , 
         \bytepkt_2_0_iv_2[12] , \byte_data_fifo_m[12] , \bytepkt_2[12] , 
         un19_bytepkt_0, \bytepkt_2_0_iv_2[9] , \bytepkt_2_0_iv_0[9] , 
         \byte_data_fifo_m[9] , \bytepkt_2_0_iv_4[9] , \q_vc[0] , 
         \bytepkt_2_1_iv_2[6] , \bytepkt_2_1_iv_1[6] , \bytepkt_2_1_iv_RNO[6] , 
         \bytepkt_2[6] , \q_vc[1] , \q_vc_m[1] , \bytepkt_cnst[9] , 
         \bytepkt_2_0_iv_i[11] , \q_chksum[11] , \bytepkt_2_0_iv_3[3] , 
         \bytepkt_2_0_iv_2[3] , \bytepkt_2_0_iv_i[3] , \bytepkt_2_0_iv_2[15] , 
         \bytepkt_2[15] , \q_chksum[15] , \bytepkt_2_1_iv_2[7] , 
         \bytepkt_2_1_iv_1[7] , \bytepkt_2[7] , \bytepkt_2[9] , un40_bytepkt_0, 
         un15_bytepkt_0, \q_chksum[10] , \q_chksum[2] , \bytepkt_2_0_iv_3[10] , 
         \bytepkt_2_0_iv_2[10] , \bytepkt_2[10] , \q_chksum[9] , 
         \bytepkt_2_0_iv_3[1] , \bytepkt_2_0_iv_2[1] , \bytepkt_2[1] , 
         \bytepkt_2_0_iv_3[0] , \bytepkt_2_0_iv_2[0] , N_195, N_194, 
         \bytepkt_2[0] , \bytepkt_2_0_iv_3[2] , \bytepkt_2_0_iv_2[2] , 
         \bytepkt_2[2] , \q_chksum[8] , \q_chksum[0] , \bytepkt_2_0_iv_3[8] , 
         \bytepkt_2_0_iv_2[8] , \bytepkt_2[8] , \q_chksum[14] , \q_chksum[6] , 
         \bytepkt_2_0_iv_1[14] , \bytepkt_2[14] , un16_bytepkt, \q_wc[0] , 
         \bytepkt_2_0_iv_0[8] , \q_dt[3] , \q_chksum[3] , 
         \bytepkt_2_0_iv_0[3] , \q_dt[1] , \q_chksum[1] , 
         \bytepkt_2_0_iv_0[1] , \q_dt[2] , \bytepkt_2_0_iv_0[2] , \q_wc_m[14] , 
         \q_dt[0] , \bytepkt_2_0_iv_0[0] , \bytepkt_2_0_iv_0[10] , 
         \q_chksum[7] , \bytepkt_2_0_iv_1[15] , \q_wc_m[15] , 
         \bytepkt_2_0_iv_2[4] , \bytepkt_2_0_iv_3[4] , \q_chksum[4] , 
         \bytepkt_2_0_iv_0[4] , \bytepkt_2[4] , \q_dt[5] , \q_chksum[5] , 
         \bytepkt_2_0_iv_0[5] , un18_PH_En_2, un8_wc_end_flag_NE_8, 
         \u_PH_DLY_FIFO/rptr_3 , \q_chksum[12] , un3_q_wc_0, \q_dt[4] , 
         q_bytepkt_en, reset_n_c, \bytepkt_c[15] , \bytepkt_c[14] , 
         \bytepkt_c[13] , \bytepkt_c[12] , \bytepkt_c[11] , \bytepkt_c[10] , 
         \bytepkt_c[9] , \bytepkt_c[8] , \bytepkt_c[7] , \bytepkt_c[6] , 
         \bytepkt_c[5] , \bytepkt_c[4] , \bytepkt_c[3] , \bytepkt_c[2] , 
         \bytepkt_c[1] , \bytepkt_c[0] , \chksum_c[15] , chksum_rdy_c, 
         \chksum_c[14] , \chksum_c[13] , \chksum_c[12] , \chksum_c[11] , 
         \chksum_c[10] , \chksum_c[9] , \chksum_c[8] , \chksum_c[7] , 
         \chksum_c[6] , \chksum_c[5] , \chksum_c[4] , \chksum_c[3] , 
         \chksum_c[2] , \chksum_c[1] , \chksum_c[0] , \wc_c[15] , \wc_c[14] , 
         \wc_c[13] , \wc_c[12] , \wc_c[11] , \wc_c[10] , \wc_c[9] , \wc_c[8] , 
         \wc_c[7] , \wc_c[6] , \wc_c[5] , \wc_c[4] , \wc_c[3] , \wc_c[2] , 
         \wc_c[1] , \dt_c[5] , \dt_c[4] , \dt_c[3] , \dt_c[2] , \dt_c[1] , 
         \dt_c[0] , \vc_c[1] , \vc_c[0] , \byte_data_c[15] , \byte_data_c[14] , 
         \byte_data_c[13] , \byte_data_c[12] , \byte_data_c[11] , 
         \byte_data_c[10] , \byte_data_c[9] , \byte_data_c[8] , 
         \byte_data_c[7] , \byte_data_c[6] , \byte_data_c[5] , 
         \byte_data_c[4] , \byte_data_c[3] , \byte_data_c[2] , 
         \byte_data_c[1] , \byte_data_c[0] , VCCI;

  SLICE_0b SLICE_0( .B1(\lpkt_cnt[0] ), .A1(lpkt_cnt), .B0(lpkt_cnt), 
    .DI1(\lpkt_cnt_s[0] ), .CLK(byte_clk_c), .F1(\lpkt_cnt_s[0] ), 
    .Q1(\lpkt_cnt[0] ), .FCO(\lpkt_cnt_cry[0] ));
  u_PH_DLY_FIFO_SLICE_1b \u_PH_DLY_FIFO/SLICE_1b ( .A1(\u_PH_DLY_FIFO/rcount_3 ), 
    .A0(\u_PH_DLY_FIFO/rcount_2 ), .DI1(\u_PH_DLY_FIFO/ircount_3 ), 
    .DI0(\u_PH_DLY_FIFO/ircount_2 ), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0_1 ), 
    .F0(\u_PH_DLY_FIFO/ircount_2 ), .Q0(\u_PH_DLY_FIFO/rcount_2 ), 
    .F1(\u_PH_DLY_FIFO/ircount_3 ), .Q1(\u_PH_DLY_FIFO/rcount_3 ));
  u_PH_DLY_FIFO_SLICE_2b \u_PH_DLY_FIFO/SLICE_2b ( .DI0(\u_PH_DLY_FIFO/full_d ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/full_d_c ), 
    .F0(\u_PH_DLY_FIFO/full_d ), .Q0(\u_PH_DLY_FIFO/FF_0_Q ));
  u_PH_DLY_FIFO_SLICE_3b \u_PH_DLY_FIFO/SLICE_3b ( 
    .B1(\u_PH_DLY_FIFO/wcount_r1 ), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), .A0(\u_PH_DLY_FIFO/rcount_0 ), 
    .M1(\u_PH_DLY_FIFO/r_gcount_0 ), .M0(\u_PH_DLY_FIFO/r_gcount_1 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/cmp_ci ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w1 ), .Q1(\u_PH_DLY_FIFO/r_gcount_w0 ), 
    .FCO(\u_PH_DLY_FIFO/co0_2 ));
  u_PH_DLY_FIFO_SLICE_4b \u_PH_DLY_FIFO/SLICE_4b ( 
    .FCO(\u_PH_DLY_FIFO/w_gctr_ci ));
  u_PH_DLY_FIFO_SLICE_5b \u_PH_DLY_FIFO/SLICE_5b ( .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .A0(\u_PH_DLY_FIFO/wcount_0 ), .DI1(\u_PH_DLY_FIFO/iwcount_1 ), 
    .DI0(\u_PH_DLY_FIFO/iwcount_0 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .FCI(\u_PH_DLY_FIFO/w_gctr_ci ), .F0(\u_PH_DLY_FIFO/iwcount_0 ), 
    .Q0(\u_PH_DLY_FIFO/wcount_0 ), .F1(\u_PH_DLY_FIFO/iwcount_1 ), 
    .Q1(\u_PH_DLY_FIFO/wcount_1 ), .FCO(\u_PH_DLY_FIFO/co0 ));
  u_PH_DLY_FIFO_SLICE_6b \u_PH_DLY_FIFO/SLICE_6b ( .A1(\u_PH_DLY_FIFO/wcount_3 ), 
    .A0(\u_PH_DLY_FIFO/wcount_2 ), .DI1(\u_PH_DLY_FIFO/iwcount_3 ), 
    .DI0(\u_PH_DLY_FIFO/iwcount_2 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0 ), 
    .F0(\u_PH_DLY_FIFO/iwcount_2 ), .Q0(\u_PH_DLY_FIFO/wcount_2 ), 
    .F1(\u_PH_DLY_FIFO/iwcount_3 ), .Q1(\u_PH_DLY_FIFO/wcount_3 ));
  u_PH_DLY_FIFO_SLICE_7b \u_PH_DLY_FIFO/SLICE_7b ( 
    .M1(\u_PH_DLY_FIFO/w_gcount_r0 ), .M0(\u_PH_DLY_FIFO/w_gcount_r1 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r21 ), .Q1(\u_PH_DLY_FIFO/w_gcount_r20 ), 
    .FCO(\u_PH_DLY_FIFO/r_gctr_ci ));
  u_PH_DLY_FIFO_SLICE_8b \u_PH_DLY_FIFO/SLICE_8b ( .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .A0(\u_PH_DLY_FIFO/rcount_0 ), .DI1(\u_PH_DLY_FIFO/ircount_1 ), 
    .DI0(\u_PH_DLY_FIFO/ircount_0 ), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .FCI(\u_PH_DLY_FIFO/r_gctr_ci ), .F0(\u_PH_DLY_FIFO/ircount_0 ), 
    .Q0(\u_PH_DLY_FIFO/rcount_0 ), .F1(\u_PH_DLY_FIFO/ircount_1 ), 
    .Q1(\u_PH_DLY_FIFO/rcount_1 ), .FCO(\u_PH_DLY_FIFO/co0_1 ));
  u_PH_DLY_FIFO_SLICE_9b \u_PH_DLY_FIFO/SLICE_9b ( .B1(\u_PH_DLY_FIFO/rden_i ), 
    .A1(\u_PH_DLY_FIFO/rden_i ), .M1(\u_PH_DLY_FIFO/w_gcount_0 ), 
    .M0(\u_PH_DLY_FIFO/w_gcount_1 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .Q0(\u_PH_DLY_FIFO/w_gcount_r1 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r0 ), .FCO(\u_PH_DLY_FIFO/cmp_ci ));
  u_PH_DLY_FIFO_SLICE_10b \u_PH_DLY_FIFO/SLICE_10b ( 
    .DI0(\u_PH_DLY_FIFO/empty_d ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .FCI(\u_PH_DLY_FIFO/empty_d_c ), .F0(\u_PH_DLY_FIFO/empty_d ), 
    .Q0(\u_PH_DLY_FIFO/FF_1_Q ));
  u_PH_DLY_FIFO_SLICE_11b \u_PH_DLY_FIFO/SLICE_11b ( .B1(\u_PH_DLY_FIFO/wren_i ), 
    .A1(\u_PH_DLY_FIFO/wren_i ), .M1(\u_PH_DLY_FIFO/w_gcount_r2 ), 
    .M0(\u_PH_DLY_FIFO/w_gcount_r3 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .Q0(\u_PH_DLY_FIFO/w_gcount_r23 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r22 ), .FCO(\u_PH_DLY_FIFO/cmp_ci_1 ));
  u_PH_DLY_FIFO_SLICE_12b \u_PH_DLY_FIFO/SLICE_12b ( 
    .B1(\u_PH_DLY_FIFO/full_cmp_clr ), .A1(\u_PH_DLY_FIFO/full_cmp_set ), 
    .B0(\u_PH_DLY_FIFO/rcount_w2 ), .A0(\u_PH_DLY_FIFO/wcount_2 ), 
    .M1(\u_PH_DLY_FIFO/r_gcount_w0 ), .M0(\u_PH_DLY_FIFO/r_gcount_w1 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0_3 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w21 ), .Q1(\u_PH_DLY_FIFO/r_gcount_w20 ), 
    .FCO(\u_PH_DLY_FIFO/full_d_c ));
  u_PH_DLY_FIFO_SLICE_13b \u_PH_DLY_FIFO/SLICE_13b ( 
    .B1(\u_PH_DLY_FIFO/rcount_w1 ), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .A0(\u_PH_DLY_FIFO/wcount_0 ), 
    .M1(\u_PH_DLY_FIFO/r_gcount_w2 ), .M0(\u_PH_DLY_FIFO/r_gcount_w3 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/cmp_ci_1 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w23 ), .Q1(\u_PH_DLY_FIFO/r_gcount_w22 ), 
    .FCO(\u_PH_DLY_FIFO/co0_3 ));
  u_PH_DLY_FIFO_SLICE_14b \u_PH_DLY_FIFO/SLICE_14b ( 
    .B1(\u_PH_DLY_FIFO/empty_cmp_clr ), .A1(\u_PH_DLY_FIFO/empty_cmp_set ), 
    .B0(\u_PH_DLY_FIFO/wcount_r2 ), .A0(\u_PH_DLY_FIFO/rcount_2 ), 
    .M1(\u_PH_DLY_FIFO/w_gcount_2 ), .M0(\u_PH_DLY_FIFO/w_gcount_3 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0_2 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r3 ), .Q1(\u_PH_DLY_FIFO/w_gcount_r2 ), 
    .FCO(\u_PH_DLY_FIFO/empty_d_c ));
  SLICE_15b SLICE_15( .A0(\lpkt_cnt[15] ), .FCI(un8_wc_end_flag_a_4_cry_14), 
    .F0(un8_wc_end_flag_15), .F1(\un8_wc_end_flag_a_4_i[16] ));
  SLICE_16b SLICE_16( .B1(\lpkt_cnt[14] ), .A1(\q_wc[15] ), .B0(\lpkt_cnt[13] ), 
    .A0(\q_wc[14] ), .FCI(un8_wc_end_flag_a_4_cry_12), .F0(un8_wc_end_flag_13), 
    .F1(un8_wc_end_flag_14), .FCO(un8_wc_end_flag_a_4_cry_14));
  SLICE_17b SLICE_17( .B1(\lpkt_cnt[12] ), .A1(\q_wc[13] ), .B0(\lpkt_cnt[11] ), 
    .A0(\q_wc[12] ), .FCI(un8_wc_end_flag_a_4_cry_10), .F0(un8_wc_end_flag_11), 
    .F1(un8_wc_end_flag_12), .FCO(un8_wc_end_flag_a_4_cry_12));
  SLICE_18b SLICE_18( .B1(\lpkt_cnt[10] ), .A1(\q_wc[11] ), .B0(\lpkt_cnt[9] ), 
    .A0(\q_wc[10] ), .FCI(un8_wc_end_flag_a_4_cry_8), .F0(un8_wc_end_flag_9), 
    .F1(un8_wc_end_flag_10), .FCO(un8_wc_end_flag_a_4_cry_10));
  SLICE_19b SLICE_19( .B1(\lpkt_cnt[8] ), .A1(\q_wc[9] ), .B0(\lpkt_cnt[7] ), 
    .A0(\q_wc[8] ), .FCI(un8_wc_end_flag_a_4_cry_6), .F0(un8_wc_end_flag_7), 
    .F1(un8_wc_end_flag_8), .FCO(un8_wc_end_flag_a_4_cry_8));
  SLICE_20b SLICE_20( .B1(\lpkt_cnt[6] ), .A1(\q_wc[7] ), .B0(\lpkt_cnt[5] ), 
    .A0(\q_wc[6] ), .FCI(un8_wc_end_flag_a_4_cry_4), .F0(un8_wc_end_flag_5), 
    .F1(un8_wc_end_flag_6), .FCO(un8_wc_end_flag_a_4_cry_6));
  SLICE_21b SLICE_21( .B1(\lpkt_cnt[4] ), .A1(\q_wc[5] ), .B0(\lpkt_cnt[3] ), 
    .A0(\q_wc[4] ), .FCI(un8_wc_end_flag_a_4_cry_2), .F0(un8_wc_end_flag_3), 
    .F1(un8_wc_end_flag_4), .FCO(un8_wc_end_flag_a_4_cry_4));
  SLICE_22b SLICE_22( .B1(\lpkt_cnt[2] ), .A1(\q_wc[3] ), .B0(\lpkt_cnt[1] ), 
    .A0(\q_wc[2] ), .FCI(un8_wc_end_flag_a_4_cry_0), .F0(un8_wc_end_flag_1), 
    .F1(un8_wc_end_flag_2), .FCO(un8_wc_end_flag_a_4_cry_2));
  SLICE_23b SLICE_23( .B1(\lpkt_cnt[0] ), .A1(\q_wc[1] ), 
    .FCO(un8_wc_end_flag_a_4_cry_0));
  SLICE_24b SLICE_24( .B0(\lpkt_cnt[15] ), .A0(lpkt_cnt), 
    .DI0(\lpkt_cnt_s[15] ), .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[14] ), 
    .F0(\lpkt_cnt_s[15] ), .Q0(\lpkt_cnt[15] ));
  SLICE_25b SLICE_25( .B1(\lpkt_cnt[14] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[13] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[14] ), .DI0(\lpkt_cnt_s[13] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[12] ), .F0(\lpkt_cnt_s[13] ), 
    .Q0(\lpkt_cnt[13] ), .F1(\lpkt_cnt_s[14] ), .Q1(\lpkt_cnt[14] ), 
    .FCO(\lpkt_cnt_cry[14] ));
  SLICE_26b SLICE_26( .B1(\lpkt_cnt[12] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[11] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[12] ), .DI0(\lpkt_cnt_s[11] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[10] ), .F0(\lpkt_cnt_s[11] ), 
    .Q0(\lpkt_cnt[11] ), .F1(\lpkt_cnt_s[12] ), .Q1(\lpkt_cnt[12] ), 
    .FCO(\lpkt_cnt_cry[12] ));
  SLICE_27b SLICE_27( .B1(\lpkt_cnt[10] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[9] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[10] ), .DI0(\lpkt_cnt_s[9] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[8] ), .F0(\lpkt_cnt_s[9] ), 
    .Q0(\lpkt_cnt[9] ), .F1(\lpkt_cnt_s[10] ), .Q1(\lpkt_cnt[10] ), 
    .FCO(\lpkt_cnt_cry[10] ));
  SLICE_28b SLICE_28( .B1(\lpkt_cnt[8] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[7] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[8] ), .DI0(\lpkt_cnt_s[7] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[6] ), .F0(\lpkt_cnt_s[7] ), 
    .Q0(\lpkt_cnt[7] ), .F1(\lpkt_cnt_s[8] ), .Q1(\lpkt_cnt[8] ), 
    .FCO(\lpkt_cnt_cry[8] ));
  SLICE_29b SLICE_29( .B1(\lpkt_cnt[6] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[5] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[6] ), .DI0(\lpkt_cnt_s[5] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[4] ), .F0(\lpkt_cnt_s[5] ), 
    .Q0(\lpkt_cnt[5] ), .F1(\lpkt_cnt_s[6] ), .Q1(\lpkt_cnt[6] ), 
    .FCO(\lpkt_cnt_cry[6] ));
  SLICE_30b SLICE_30( .B1(\lpkt_cnt[4] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[3] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[4] ), .DI0(\lpkt_cnt_s[3] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[2] ), .F0(\lpkt_cnt_s[3] ), 
    .Q0(\lpkt_cnt[3] ), .F1(\lpkt_cnt_s[4] ), .Q1(\lpkt_cnt[4] ), 
    .FCO(\lpkt_cnt_cry[4] ));
  SLICE_31b SLICE_31( .B1(\lpkt_cnt[2] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[1] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[2] ), .DI0(\lpkt_cnt_s[1] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[0] ), .F0(\lpkt_cnt_s[1] ), 
    .Q0(\lpkt_cnt[1] ), .F1(\lpkt_cnt_s[2] ), .Q1(\lpkt_cnt[2] ), 
    .FCO(\lpkt_cnt_cry[2] ));
  u_PH_DLY_FIFO_fifo_pfu_0_7_6 \u_PH_DLY_FIFO/fifo_pfu_0_7.6 ( 
    .D1(\q_byte_data[3] ), .C1(\q_byte_data[2] ), .B1(\q_byte_data[1] ), 
    .A1(\q_byte_data[0] ), .C0(\u_PH_DLY_FIFO/wptr_2 ), 
    .B0(\u_PH_DLY_FIFO/wptr_1 ), .A0(\u_PH_DLY_FIFO/wptr_0 ), 
    .WADO0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ), 
    .WADO1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ), 
    .WADO2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ), 
    .WADO3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ), 
    .WDO0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT ), 
    .WDO1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT ), 
    .WDO2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT ), 
    .WDO3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_7_7 \u_PH_DLY_FIFO/fifo_pfu_0_7.7 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout1 ), .DI0(\u_PH_DLY_FIFO/rdataout0 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout0 ), .Q0(\byte_data_fifo[0] ), 
    .F1(\u_PH_DLY_FIFO/rdataout1 ), .Q1(\byte_data_fifo[1] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_7 \u_PH_DLY_FIFO/fifo_pfu_0_7 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout3 ), .DI0(\u_PH_DLY_FIFO/rdataout2 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout2 ), .Q0(\byte_data_fifo[2] ), 
    .F1(\u_PH_DLY_FIFO/rdataout3 ), .Q1(\byte_data_fifo[3] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_4_0 \u_PH_DLY_FIFO/fifo_pfu_0_4.0 ( 
    .D1(\q_byte_data[15] ), .C1(\q_byte_data[14] ), .B1(\q_byte_data[13] ), 
    .A1(\q_byte_data[12] ), .C0(\u_PH_DLY_FIFO/wptr_2 ), 
    .B0(\u_PH_DLY_FIFO/wptr_1 ), .A0(\u_PH_DLY_FIFO/wptr_0 ), 
    .WADO0(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD0_INT ), 
    .WADO1(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD1_INT ), 
    .WADO2(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD2_INT ), 
    .WADO3(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD3_INT ), 
    .WDO0(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD0_INT ), 
    .WDO1(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD1_INT ), 
    .WDO2(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD2_INT ), 
    .WDO3(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_4_1 \u_PH_DLY_FIFO/fifo_pfu_0_4.1 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout13 ), .DI0(\u_PH_DLY_FIFO/rdataout12 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout12 ), .Q0(\byte_data_fifo[12] ), 
    .F1(\u_PH_DLY_FIFO/rdataout13 ), .Q1(\byte_data_fifo[13] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD0_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD1_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_4 \u_PH_DLY_FIFO/fifo_pfu_0_4 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout15 ), .DI0(\u_PH_DLY_FIFO/rdataout14 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout14 ), .Q0(\byte_data_fifo[14] ), 
    .F1(\u_PH_DLY_FIFO/rdataout15 ), .Q1(\byte_data_fifo[15] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_4/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD2_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_4/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_5_3 \u_PH_DLY_FIFO/fifo_pfu_0_5.3 ( 
    .D1(\q_byte_data[11] ), .C1(\q_byte_data[10] ), .B1(\q_byte_data[9] ), 
    .A1(\q_byte_data[8] ), .C0(\u_PH_DLY_FIFO/wptr_2 ), 
    .B0(\u_PH_DLY_FIFO/wptr_1 ), .A0(\u_PH_DLY_FIFO/wptr_0 ), 
    .WADO0(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD0_INT ), 
    .WADO1(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD1_INT ), 
    .WADO2(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD2_INT ), 
    .WADO3(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD3_INT ), 
    .WDO0(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD0_INT ), 
    .WDO1(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD1_INT ), 
    .WDO2(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD2_INT ), 
    .WDO3(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_5_2 \u_PH_DLY_FIFO/fifo_pfu_0_5.2 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout9 ), .DI0(\u_PH_DLY_FIFO/rdataout8 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout8 ), .Q0(\byte_data_fifo[8] ), 
    .F1(\u_PH_DLY_FIFO/rdataout9 ), .Q1(\byte_data_fifo[9] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD0_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD1_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_5 \u_PH_DLY_FIFO/fifo_pfu_0_5 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout11 ), .DI0(\u_PH_DLY_FIFO/rdataout10 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout10 ), .Q0(\byte_data_fifo[10] ), 
    .F1(\u_PH_DLY_FIFO/rdataout11 ), .Q1(\byte_data_fifo[11] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_5/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD2_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_5/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_6_5 \u_PH_DLY_FIFO/fifo_pfu_0_6.5 ( 
    .D1(\q_byte_data[7] ), .C1(\q_byte_data[6] ), .B1(\q_byte_data[5] ), 
    .A1(\q_byte_data[4] ), .C0(\u_PH_DLY_FIFO/wptr_2 ), 
    .B0(\u_PH_DLY_FIFO/wptr_1 ), .A0(\u_PH_DLY_FIFO/wptr_0 ), 
    .WADO0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ), 
    .WADO1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ), 
    .WADO2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ), 
    .WADO3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ), 
    .WDO0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT ), 
    .WDO1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT ), 
    .WDO2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT ), 
    .WDO3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_6_4 \u_PH_DLY_FIFO/fifo_pfu_0_6.4 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout5 ), .DI0(\u_PH_DLY_FIFO/rdataout4 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout4 ), .Q0(\byte_data_fifo[4] ), 
    .F1(\u_PH_DLY_FIFO/rdataout5 ), .Q1(\byte_data_fifo[5] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_6 \u_PH_DLY_FIFO/fifo_pfu_0_6 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout7 ), .DI0(\u_PH_DLY_FIFO/rdataout6 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout6 ), .Q0(\byte_data_fifo[6] ), 
    .F1(\u_PH_DLY_FIFO/rdataout7 ), .Q1(\byte_data_fifo[7] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT ));
  SLICE_44 SLICE_44( .D1(\q_wc[4] ), .C1(\q_ECC[4] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(q_long_pkt_indicator), .C0(chksum_En), .B0(WC_1_En), 
    .A0(EoTp_c), .DI0(\EoTp_En_2[0] ), .M1(\EoTp_En[0] ), .CLK(byte_clk_c), 
    .F0(\EoTp_En_2[0] ), .Q0(\EoTp_En[0] ), .F1(\bytepkt_2_0_iv_0[12] ), 
    .Q1(\EoTp_En[1] ));
  SLICE_45 SLICE_45( .B0(lngpkt_ofst), .A0(\EoTp_En[1] ), .DI0(\EoTp_En_4[2] ), 
    .CLK(byte_clk_c), .F0(\EoTp_En_4[2] ), .Q0(\EoTp_En[2] ));
  SLICE_46 SLICE_46( .D1(short_en_c), .C1(q_short_en), .B1(q_long_en), 
    .A1(long_en_c), .D0(long_en_c), .C0(q_long_en), .B0(q_short_en), 
    .A0(short_en_c), .DI0(un1_q_long_pkt_indicator_1_1_i), 
    .CE(un1_q_long_pkt_indicator_1_i), .CLK(byte_clk_c), 
    .F0(un1_q_long_pkt_indicator_1_1_i), .Q0(PH_En), 
    .F1(un1_q_long_pkt_indicator_1_1));
  SLICE_47 SLICE_47( .C1(\PH_cnt[1] ), .B1(\PH_cnt[0] ), .A1(PH_En), 
    .B0(\PH_cnt[0] ), .A0(PH_En), .DI1(\un7_PH_cnt_0[1] ), 
    .DI0(\un7_PH_cnt_0[0] ), .CLK(byte_clk_c), .F0(\un7_PH_cnt_0[0] ), 
    .Q0(\PH_cnt[0] ), .F1(\un7_PH_cnt_0[1] ), .Q1(\PH_cnt[1] ));
  SLICE_48 SLICE_48( .D1(\PH_cnt[3] ), .C1(\PH_cnt[2] ), .B1(\PH_cnt[1] ), 
    .A1(\PH_cnt[0] ), .D0(\PH_cnt[2] ), .C0(\PH_cnt[1] ), .B0(\PH_cnt[0] ), 
    .A0(PH_En), .DI1(\PH_cnt_RNO[3] ), .DI0(\un7_PH_cnt_0[2] ), 
    .CLK(byte_clk_c), .F0(\un7_PH_cnt_0[2] ), .Q0(\PH_cnt[2] ), 
    .F1(\PH_cnt_RNO[3] ), .Q1(\PH_cnt[3] ));
  SLICE_49 SLICE_49( .D0(\PH_cnt[3] ), .C0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), 
    .A0(\PH_cnt[0] ), .DI0(DataID_En_2), .CLK(byte_clk_c), .F0(DataID_En_2), 
    .Q0(WC_0_En));
  SLICE_50 SLICE_50( .D0(\PH_cnt[3] ), .C0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), 
    .A0(\PH_cnt[0] ), .DI0(ECC_En_2), .CLK(byte_clk_c), .F0(ECC_En_2), 
    .Q0(WC_1_En));
  SLICE_51 SLICE_51( .D1(hsSync_En), .C1(\EoTp_En[2] ), .B1(\EoTp_En[1] ), 
    .A1(\EoTp_En[0] ), .D0(lpkt_cnt), .C0(chksum_En), .B0(bytepkt_en_2_3_0), 
    .A0(bytepkt_en_2_3), .DI0(bytepkt_en_2), .CLK(byte_clk_c), 
    .F0(bytepkt_en_2), .Q0(bytepkt_en_c), .F1(bytepkt_en_2_3_0));
  SLICE_52 SLICE_52( .D1(un8_wc_end_flag_NE_12), .C1(un8_wc_end_flag_NE_5), 
    .B1(un8_wc_end_flag_11), .A1(un8_wc_end_flag_10), 
    .C0(un8_wc_end_flag_NE_14), .B0(un8_wc_end_flag_NE_10), 
    .A0(un8_wc_end_flag_NE_9), .DI0(un8_wc_end_flag_NE_i), .CLK(byte_clk_c), 
    .F0(un8_wc_end_flag_NE_i), .Q0(chksum_En), .F1(un8_wc_end_flag_NE_14));
  SLICE_53 SLICE_53( .B1(\PH_cnt[2] ), .A1(\PH_cnt[1] ), .D0(\PH_cnt[1] ), 
    .C0(\PH_cnt[3] ), .B0(\PH_cnt[0] ), .A0(\PH_cnt[2] ), .DI0(hsSync_En_2), 
    .CLK(byte_clk_c), .F0(hsSync_En_2), .Q0(hsSync_En), .F1(un2_lpkt_cnt_En_1));
  SLICE_54 SLICE_54( .D1(long_en_c), .C1(q_long_en), .B1(\wc_c[0] ), 
    .A1(q_short_en), .C0(\wc_c[0] ), .B0(q_long_en), .A0(long_en_c), 
    .DI0(un2_lngpkt_ofst_0), .CE(un7_lngpkt_ofst_i), .CLK(byte_clk_c), 
    .F0(un2_lngpkt_ofst_0), .Q0(lngpkt_ofst), .F1(un7_lngpkt_ofst_i));
  SLICE_55 SLICE_55( .D1(un8_wc_end_flag_NE_14), .C1(un8_wc_end_flag_NE_10), 
    .B1(un8_wc_end_flag_NE_9), .A1(un2_lpkt_cnt_En_0), .D0(un2_lpkt_cnt_En_1), 
    .C0(q_long_pkt_indicator), .B0(\PH_cnt[3] ), .A0(\PH_cnt[0] ), 
    .DI0(un2_lpkt_cnt_En_0), .CE(un15_lpkt_cnt_En_i), .CLK(byte_clk_c), 
    .F0(un2_lpkt_cnt_En_0), .Q0(lpkt_cnt), .F1(un15_lpkt_cnt_En_i));
  SLICE_56 SLICE_56( .D1(un87_q_ECC_0_a2_4), .C1(un87_q_ECC_0_a2_3), .B1(N_22), 
    .A1(N_21), .D0(un108_q_ECC_0_a2_5), .C0(un108_q_ECC_0_a2_4), .B0(N_22), 
    .A0(N_21), .DI1(un87_q_ECC_0_a2), .DI0(un108_q_ECC_0_a2), .CE(un5_q_ECC_0), 
    .CLK(byte_clk_c), .F0(un108_q_ECC_0_a2), .Q0(\q_ECC[0] ), 
    .F1(un87_q_ECC_0_a2), .Q1(\q_ECC[1] ));
  SLICE_57 SLICE_57( .D1(un47_q_ECC_0_a2_5), .C1(un47_q_ECC_0_a2_4), 
    .B1(un47_q_ECC_0_a2_3), .A1(un7_q_ECC_0_a2_3), .D0(un67_q_ECC_4), 
    .C0(un67_q_ECC_0_a2_5), .B0(un67_q_ECC_0_a2_4), .A0(N_21), 
    .DI1(un47_q_ECC_0_a2), .DI0(un67_q_ECC_0_a2), .CE(un5_q_ECC_0), 
    .CLK(byte_clk_c), .F0(un67_q_ECC_0_a2), .Q0(\q_ECC[2] ), 
    .F1(un47_q_ECC_0_a2), .Q1(\q_ECC[3] ));
  SLICE_58 SLICE_58( .D1(un7_q_ECC_0_a2_4), .C1(un7_q_ECC_0_a2_3), 
    .B1(un7_q_ECC_0_a2_2_0), .A1(un7_q_ECC_0_a2_2), .D0(un27_q_ECC_0_a2_4), 
    .C0(un27_q_ECC_0_a2_3), .B0(un7_q_ECC_0_a2_1), .A0(N_22), 
    .DI1(un7_q_ECC_0_a2), .DI0(un27_q_ECC_0_a2), .CE(un5_q_ECC_0), 
    .CLK(byte_clk_c), .F0(un27_q_ECC_0_a2), .Q0(\q_ECC[4] ), 
    .F1(un7_q_ECC_0_a2), .Q1(\q_ECC[5] ));
  SLICE_61 SLICE_61( .B1(\u_PH_DLY_FIFO/FF_0_Q ), .A1(q_long_en), 
    .B0(short_en_c), .A0(q_short_en), .DI0(un2_q_long_pkt_indicator_i), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), 
    .F0(un2_q_long_pkt_indicator_i), .Q0(q_long_pkt_indicator), 
    .F1(\u_PH_DLY_FIFO/wren_i ));
  u_PH_DLY_FIFO_SLICE_62 \u_PH_DLY_FIFO/SLICE_62 ( 
    .B1(\u_PH_DLY_FIFO/rcount_2 ), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B0(\u_PH_DLY_FIFO/rcount_1 ), .A0(\u_PH_DLY_FIFO/rcount_0 ), 
    .DI1(\u_PH_DLY_FIFO/r_gdata_1 ), .DI0(\u_PH_DLY_FIFO/r_gdata_0 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/r_gdata_0 ), .Q0(\u_PH_DLY_FIFO/r_gcount_0 ), 
    .F1(\u_PH_DLY_FIFO/r_gdata_1 ), .Q1(\u_PH_DLY_FIFO/r_gcount_1 ));
  u_PH_DLY_FIFO_SLICE_63 \u_PH_DLY_FIFO/SLICE_63 ( 
    .B1(\u_PH_DLY_FIFO/w_gcount_r22 ), .A1(\u_PH_DLY_FIFO/w_gcount_r23 ), 
    .B0(\u_PH_DLY_FIFO/rcount_3 ), .A0(\u_PH_DLY_FIFO/rcount_2 ), 
    .DI0(\u_PH_DLY_FIFO/r_gdata_2 ), .M1(\u_PH_DLY_FIFO/rcount_3 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/r_gdata_2 ), .Q0(\u_PH_DLY_FIFO/r_gcount_2 ), 
    .F1(\u_PH_DLY_FIFO/wcount_r2 ), .Q1(\u_PH_DLY_FIFO/r_gcount_3 ));
  u_PH_DLY_FIFO_SLICE_70 \u_PH_DLY_FIFO/SLICE_70 ( 
    .B1(\u_PH_DLY_FIFO/wcount_2 ), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B0(\u_PH_DLY_FIFO/wcount_1 ), .A0(\u_PH_DLY_FIFO/wcount_0 ), 
    .DI1(\u_PH_DLY_FIFO/w_gdata_1 ), .DI0(\u_PH_DLY_FIFO/w_gdata_0 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/w_gdata_0 ), .Q0(\u_PH_DLY_FIFO/w_gcount_0 ), 
    .F1(\u_PH_DLY_FIFO/w_gdata_1 ), .Q1(\u_PH_DLY_FIFO/w_gcount_1 ));
  u_PH_DLY_FIFO_SLICE_71 \u_PH_DLY_FIFO/SLICE_71 ( 
    .B1(\u_PH_DLY_FIFO/r_gcount_w22 ), .A1(\u_PH_DLY_FIFO/r_gcount_w23 ), 
    .B0(\u_PH_DLY_FIFO/wcount_3 ), .A0(\u_PH_DLY_FIFO/wcount_2 ), 
    .DI0(\u_PH_DLY_FIFO/w_gdata_2 ), .M1(\u_PH_DLY_FIFO/wcount_3 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/w_gdata_2 ), .Q0(\u_PH_DLY_FIFO/w_gcount_2 ), 
    .F1(\u_PH_DLY_FIFO/rcount_w2 ), .Q1(\u_PH_DLY_FIFO/w_gcount_3 ));
  SLICE_77 SLICE_77( .B0(\q_wc[7] ), .A0(\q_wc[6] ), 
    .M1(\u_PH_DLY_FIFO/wcount_3 ), .M0(\u_PH_DLY_FIFO/wcount_2 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(un7_q_ECC_0_a2_3), .Q0(\u_PH_DLY_FIFO/wptr_2 ), .F1(GND), 
    .Q1(\u_PH_DLY_FIFO/wptr_3 ));
  SLICE_78 SLICE_78( .D1(hsSync_En_RNIIQCD1), .C1(\q_wc[6] ), 
    .B1(\byte_data_fifo[14] ), .A1(WC_0_En), .D0(WC_0_En), .C0(WC_1_En), 
    .B0(hsSync_En), .A0(lpkt_cnt), .F0(hsSync_En_RNIIQCD1), 
    .F1(\bytepkt_2_0_iv_0[14] ));
  SLICE_79 SLICE_79( .C1(un38_bytepkt), .B1(q_chksum_En), .A1(chksum_En), 
    .D0(chksum_En), .C0(un13_bytepkt), .B0(\EoTp_En[0] ), .A0(un50_bytepkt), 
    .F0(N_196), .F1(un50_bytepkt));
  SLICE_80 SLICE_80( .D1(bytepkt_en_2_3), .C1(chksum_En), .B1(un13_bytepkt), 
    .A1(\EoTp_En[0] ), .D0(lpkt_cnt), .C0(lngpkt_ofst), .B0(hsSync_En), 
    .A0(bytepkt_en_2_3), .F0(un13_bytepkt), .F1(un1_bytepkt_1_1));
  SLICE_81 SLICE_81( .D1(un49_bytepkt_0), .C1(\q_chksum[13] ), 
    .B1(\byte_data_fifo[5] ), .A1(\bytepkt_2_0[0] ), .D0(hsSync_En), 
    .C0(un1_bytepkt_1), .B0(\bytepkt_2_0_iv_2[5] ), .A0(\bytepkt_2_0_iv_3[5] ), 
    .F0(\bytepkt_2[5] ), .F1(\bytepkt_2_0_iv_3[5] ));
  SLICE_82 SLICE_82( .B1(WC_1_En), .A1(WC_0_En), .D0(bytepkt_en_2_3), 
    .C0(hsSync_En), .B0(lpkt_cnt), .A0(\byte_data_fifo[15] ), 
    .F0(\byte_data_fifo_m[15] ), .F1(bytepkt_en_2_3));
  SLICE_83 SLICE_83( .D1(un45_bytepkt_0), .C1(\bytepkt_2_0_iv_2[11] ), 
    .B1(\bytepkt_2_0_iv_0[11] ), .A1(\byte_data_fifo_i_m[11] ), 
    .D0(bytepkt_en_2_3), .C0(hsSync_En), .B0(lpkt_cnt), 
    .A0(\byte_data_fifo[11] ), .F0(\byte_data_fifo_i_m[11] ), 
    .F1(\bytepkt_2_0_iv_4[11] ));
  SLICE_84 SLICE_84( .D1(hsSync_En_m), .C1(\bytepkt_2_0_iv_2[13] ), 
    .B1(\bytepkt_2_0_iv_0[13] ), .A1(\byte_data_fifo_m[13] ), 
    .D0(bytepkt_en_2_3), .C0(hsSync_En), .B0(lpkt_cnt), 
    .A0(\byte_data_fifo[13] ), .F0(\byte_data_fifo_m[13] ), 
    .F1(\bytepkt_2[13] ));
  SLICE_85 SLICE_85( .D1(hsSync_En_m), .C1(\bytepkt_2_0_iv_2[12] ), 
    .B1(\bytepkt_2_0_iv_0[12] ), .A1(\byte_data_fifo_m[12] ), 
    .D0(bytepkt_en_2_3), .C0(hsSync_En), .B0(lpkt_cnt), 
    .A0(\byte_data_fifo[12] ), .F0(\byte_data_fifo_m[12] ), 
    .F1(\bytepkt_2[12] ));
  SLICE_86 SLICE_86( .D1(un19_bytepkt_0), .C1(\bytepkt_2_0_iv_2[9] ), 
    .B1(\bytepkt_2_0_iv_0[9] ), .A1(\byte_data_fifo_m[9] ), 
    .D0(bytepkt_en_2_3), .C0(hsSync_En), .B0(lpkt_cnt), 
    .A0(\byte_data_fifo[9] ), .F0(\byte_data_fifo_m[9] ), 
    .F1(\bytepkt_2_0_iv_4[9] ));
  SLICE_87 SLICE_87( .D1(\q_vc[0] ), .C1(\bytepkt_2_1_iv_2[6] ), 
    .B1(\bytepkt_2_1_iv_1[6] ), .A1(\bytepkt_2_1_iv_RNO[6] ), 
    .D0(\EoTp_En[0] ), .C0(un13_bytepkt), .B0(chksum_En), .A0(WC_0_En), 
    .F0(\bytepkt_2_1_iv_RNO[6] ), .F1(\bytepkt_2[6] ));
  SLICE_88 SLICE_88( .C1(chksum_En), .B1(un13_bytepkt), .A1(\EoTp_En[0] ), 
    .C0(WC_0_En), .B0(un19_bytepkt_0), .A0(\q_vc[1] ), .F0(\q_vc_m[1] ), 
    .F1(un19_bytepkt_0));
  SLICE_89 SLICE_89( .C1(un38_bytepkt), .B1(chksum_En), .A1(\EoTp_En[1] ), 
    .D0(un1_bytepkt_1), .C0(hsSync_En), .B0(\bytepkt_cnst[9] ), 
    .A0(\bytepkt_2_0_iv_4[11] ), .F0(\bytepkt_2_0_iv_i[11] ), 
    .F1(\bytepkt_cnst[9] ));
  SLICE_90 SLICE_90( .D1(un49_bytepkt_0), .C1(\q_chksum[11] ), 
    .B1(\byte_data_fifo[3] ), .A1(\bytepkt_2_0[0] ), 
    .D0(\bytepkt_2_0_iv_3[3] ), .C0(\bytepkt_2_0_iv_2[3] ), .B0(N_196), 
    .A0(\EoTp_En[1] ), .F0(\bytepkt_2_0_iv_i[3] ), .F1(\bytepkt_2_0_iv_3[3] ));
  SLICE_91 SLICE_91( .D1(un38_bytepkt), .C1(q_chksum_En), .B1(chksum_En), 
    .A1(EoTp_c), .D0(un49_bytepkt_0), .C0(\q_vc[1] ), .B0(hsSync_En_m), 
    .A0(\bytepkt_2_0_iv_2[15] ), .F0(\bytepkt_2[15] ), .F1(un49_bytepkt_0));
  SLICE_92 SLICE_92( .D1(un49_bytepkt_0), .C1(\q_chksum[15] ), 
    .B1(\byte_data_fifo[7] ), .A1(\bytepkt_2_0[0] ), .D0(\q_vc_m[1] ), 
    .C0(hsSync_En_m), .B0(\bytepkt_2_1_iv_2[7] ), .A0(\bytepkt_2_1_iv_1[7] ), 
    .F0(\bytepkt_2[7] ), .F1(\bytepkt_2_1_iv_2[7] ));
  SLICE_93 SLICE_93( .D1(un49_bytepkt_0), .C1(un45_bytepkt_0), 
    .B1(un1_bytepkt_1_1), .A1(\bytepkt_2_0[0] ), .C0(un1_bytepkt_1), 
    .B0(\bytepkt_cnst[9] ), .A0(\bytepkt_2_0_iv_4[9] ), .F0(\bytepkt_2[9] ), 
    .F1(un1_bytepkt_1));
  SLICE_94 SLICE_94( .D1(un40_bytepkt_0), .C1(un15_bytepkt_0), 
    .B1(\q_chksum[10] ), .A1(\q_chksum[2] ), .D0(un1_bytepkt_1), 
    .C0(\bytepkt_cnst[9] ), .B0(\bytepkt_2_0_iv_3[10] ), 
    .A0(\bytepkt_2_0_iv_2[10] ), .F0(\bytepkt_2[10] ), 
    .F1(\bytepkt_2_0_iv_2[10] ));
  SLICE_95 SLICE_95( .D1(un49_bytepkt_0), .C1(\q_chksum[9] ), 
    .B1(\byte_data_fifo[1] ), .A1(\bytepkt_2_0[0] ), 
    .D0(\bytepkt_2_0_iv_3[1] ), .C0(\bytepkt_2_0_iv_2[1] ), .B0(N_196), 
    .A0(\EoTp_En[1] ), .F0(\bytepkt_2[1] ), .F1(\bytepkt_2_0_iv_3[1] ));
  SLICE_96 SLICE_96( .B1(\EoTp_En[2] ), .A1(\EoTp_En[1] ), 
    .D0(\bytepkt_2_0_iv_3[0] ), .C0(\bytepkt_2_0_iv_2[0] ), .B0(N_195), 
    .A0(N_194), .F0(\bytepkt_2[0] ), .F1(N_195));
  SLICE_97 SLICE_97( .D1(un49_bytepkt_0), .C1(\q_chksum[10] ), 
    .B1(\byte_data_fifo[2] ), .A1(\bytepkt_2_0[0] ), 
    .D0(\bytepkt_2_0_iv_3[2] ), .C0(\bytepkt_2_0_iv_2[2] ), .B0(N_196), 
    .A0(\EoTp_En[1] ), .F0(\bytepkt_2[2] ), .F1(\bytepkt_2_0_iv_3[2] ));
  SLICE_98 SLICE_98( .D1(un40_bytepkt_0), .C1(un15_bytepkt_0), 
    .B1(\q_chksum[8] ), .A1(\q_chksum[0] ), .D0(\bytepkt_2_0_iv_3[8] ), 
    .C0(\bytepkt_2_0_iv_2[8] ), .B0(N_196), .A0(\EoTp_En[1] ), 
    .F0(\bytepkt_2[8] ), .F1(\bytepkt_2_0_iv_2[8] ));
  SLICE_99 SLICE_99( .D1(un40_bytepkt_0), .C1(un15_bytepkt_0), 
    .B1(\q_chksum[14] ), .A1(\q_chksum[6] ), .D0(un49_bytepkt_0), 
    .C0(\q_vc[0] ), .B0(\bytepkt_2_0_iv_1[14] ), .A0(\bytepkt_2_0_iv_0[14] ), 
    .F0(\bytepkt_2[14] ), .F1(\bytepkt_2_0_iv_1[14] ));
  SLICE_100 SLICE_100( .B1(un13_bytepkt), .A1(chksum_En), .D0(un50_bytepkt), 
    .C0(un16_bytepkt), .B0(\EoTp_En[1] ), .A0(\EoTp_En[0] ), .F0(N_194), 
    .F1(un16_bytepkt));
  SLICE_101 SLICE_101( .D1(\q_wc[0] ), .C1(\q_ECC[0] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un19_bytepkt_0), .C0(hsSync_En_RNIIQCD1), 
    .B0(\bytepkt_2_0_iv_0[8] ), .A0(\byte_data_fifo[8] ), 
    .F0(\bytepkt_2_0_iv_3[8] ), .F1(\bytepkt_2_0_iv_0[8] ));
  SLICE_102 SLICE_102( .D1(\q_wc[11] ), .C1(\q_dt[3] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un45_bytepkt_0), .C0(un15_bytepkt_0), .B0(\q_chksum[3] ), 
    .A0(\bytepkt_2_0_iv_0[3] ), .F0(\bytepkt_2_0_iv_2[3] ), 
    .F1(\bytepkt_2_0_iv_0[3] ));
  SLICE_103 SLICE_103( .D1(\q_wc[9] ), .C1(\q_dt[1] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un45_bytepkt_0), .C0(un15_bytepkt_0), .B0(\q_chksum[1] ), 
    .A0(\bytepkt_2_0_iv_0[1] ), .F0(\bytepkt_2_0_iv_2[1] ), 
    .F1(\bytepkt_2_0_iv_0[1] ));
  SLICE_104 SLICE_104( .D1(\q_wc[10] ), .C1(\q_dt[2] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un45_bytepkt_0), .C0(un15_bytepkt_0), .B0(\q_chksum[2] ), 
    .A0(\bytepkt_2_0_iv_0[2] ), .F0(\bytepkt_2_0_iv_2[2] ), 
    .F1(\bytepkt_2_0_iv_0[2] ));
  SLICE_105 SLICE_105( .B1(\q_wc[14] ), .A1(WC_1_En), .D0(un45_bytepkt_0), 
    .C0(un15_bytepkt_0), .B0(\q_wc_m[14] ), .A0(\q_chksum[6] ), 
    .F0(\bytepkt_2_1_iv_1[6] ), .F1(\q_wc_m[14] ));
  SLICE_106 SLICE_106( .C1(chksum_En), .B1(un38_bytepkt), 
    .A1(hsSync_En_RNIIQCD1), .D0(un49_bytepkt_0), .C0(\q_chksum[14] ), 
    .B0(\byte_data_fifo[6] ), .A0(\bytepkt_2_0[0] ), 
    .F0(\bytepkt_2_1_iv_2[6] ), .F1(\bytepkt_2_0[0] ));
  SLICE_107 SLICE_107( .D1(\q_wc[8] ), .C1(\q_dt[0] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un45_bytepkt_0), .C0(un15_bytepkt_0), .B0(\q_chksum[0] ), 
    .A0(\bytepkt_2_0_iv_0[0] ), .F0(\bytepkt_2_0_iv_2[0] ), 
    .F1(\bytepkt_2_0_iv_0[0] ));
  SLICE_108 SLICE_108( .D1(\q_wc[2] ), .C1(\q_ECC[2] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un19_bytepkt_0), .C0(hsSync_En_RNIIQCD1), 
    .B0(\bytepkt_2_0_iv_0[10] ), .A0(\byte_data_fifo[10] ), 
    .F0(\bytepkt_2_0_iv_3[10] ), .F1(\bytepkt_2_0_iv_0[10] ));
  SLICE_109 SLICE_109( .D1(un40_bytepkt_0), .C1(un15_bytepkt_0), 
    .B1(\q_chksum[15] ), .A1(\q_chksum[7] ), .D0(\q_wc[7] ), 
    .C0(\bytepkt_2_0_iv_1[15] ), .B0(\byte_data_fifo_m[15] ), .A0(WC_0_En), 
    .F0(\bytepkt_2_0_iv_2[15] ), .F1(\bytepkt_2_0_iv_1[15] ));
  SLICE_110 SLICE_110( .B1(\q_wc[15] ), .A1(WC_1_En), .D0(un45_bytepkt_0), 
    .C0(un15_bytepkt_0), .B0(\q_wc_m[15] ), .A0(\q_chksum[7] ), 
    .F0(\bytepkt_2_1_iv_1[7] ), .F1(\q_wc_m[15] ));
  SLICE_111 SLICE_111( .D1(hsSync_En), .C1(un1_bytepkt_1), 
    .B1(\bytepkt_2_0_iv_2[4] ), .A1(\bytepkt_2_0_iv_3[4] ), 
    .D0(un45_bytepkt_0), .C0(un15_bytepkt_0), .B0(\q_chksum[4] ), 
    .A0(\bytepkt_2_0_iv_0[4] ), .F0(\bytepkt_2_0_iv_2[4] ), 
    .F1(\bytepkt_2[4] ));
  SLICE_112 SLICE_112( .D1(\q_wc[13] ), .C1(\q_dt[5] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un45_bytepkt_0), .C0(un15_bytepkt_0), .B0(\q_chksum[5] ), 
    .A0(\bytepkt_2_0_iv_0[5] ), .F0(\bytepkt_2_0_iv_2[5] ), 
    .F1(\bytepkt_2_0_iv_0[5] ));
  SLICE_113 SLICE_113( .B1(un38_bytepkt), .A1(chksum_En), .D0(un40_bytepkt_0), 
    .C0(un15_bytepkt_0), .B0(\q_chksum[9] ), .A0(\q_chksum[1] ), 
    .F0(\bytepkt_2_0_iv_2[9] ), .F1(un40_bytepkt_0));
  SLICE_114 SLICE_114( .B1(un13_bytepkt), .A1(chksum_En), .D0(un40_bytepkt_0), 
    .C0(un15_bytepkt_0), .B0(\q_chksum[13] ), .A0(\q_chksum[5] ), 
    .F0(\bytepkt_2_0_iv_2[13] ), .F1(un15_bytepkt_0));
  SLICE_115 SLICE_115( .D1(lpkt_cnt), .C1(lngpkt_ofst), .B1(hsSync_En), 
    .A1(bytepkt_en_2_3), .D0(un38_bytepkt), .C0(q_chksum_En), .B0(chksum_En), 
    .A0(EoTp_c), .F0(un45_bytepkt_0), .F1(un38_bytepkt));
  SLICE_116 SLICE_116( .B1(\PH_cnt[3] ), .A1(\PH_cnt[1] ), .D0(un18_PH_En_2), 
    .C0(un1_q_long_pkt_indicator_1_1), .B0(\PH_cnt[2] ), .A0(\PH_cnt[0] ), 
    .F0(un1_q_long_pkt_indicator_1_i), .F1(un18_PH_En_2));
  SLICE_117 SLICE_117( .B1(\q_wc[11] ), .A1(\q_wc[10] ), .D0(un7_q_ECC_0_a2_1), 
    .C0(\q_wc[13] ), .B0(\q_wc[5] ), .A0(\q_wc[2] ), .F0(un7_q_ECC_0_a2_4), 
    .F1(un7_q_ECC_0_a2_1));
  SLICE_118 SLICE_118( .C1(un8_wc_end_flag_13), .B1(un8_wc_end_flag_4), 
    .A1(un8_wc_end_flag_3), .D0(\un8_wc_end_flag_a_4_i[16] ), 
    .C0(un8_wc_end_flag_NE_8), .B0(un8_wc_end_flag_12), .A0(un8_wc_end_flag_2), 
    .F0(un8_wc_end_flag_NE_12), .F1(un8_wc_end_flag_NE_8));
  u_PH_DLY_FIFO_SLICE_119 \u_PH_DLY_FIFO/SLICE_119 ( 
    .C1(\u_PH_DLY_FIFO/wptr_3 ), .B1(\u_PH_DLY_FIFO/wcount_3 ), 
    .A1(\u_PH_DLY_FIFO/r_gcount_w23 ), .C0(\u_PH_DLY_FIFO/wptr_3 ), 
    .B0(\u_PH_DLY_FIFO/wcount_3 ), .A0(\u_PH_DLY_FIFO/r_gcount_w23 ), 
    .M1(\u_PH_DLY_FIFO/rcount_2 ), .M0(\u_PH_DLY_FIFO/rcount_3 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/full_cmp_clr ), .Q0(\u_PH_DLY_FIFO/rptr_3 ), 
    .F1(\u_PH_DLY_FIFO/full_cmp_set ), .Q1(\u_PH_DLY_FIFO/rptr_2 ));
  u_PH_DLY_FIFO_SLICE_120 \u_PH_DLY_FIFO/SLICE_120 ( 
    .C1(\u_PH_DLY_FIFO/w_gcount_r21 ), .B1(\u_PH_DLY_FIFO/w_gcount_r22 ), 
    .A1(\u_PH_DLY_FIFO/w_gcount_r23 ), .D0(\u_PH_DLY_FIFO/w_gcount_r20 ), 
    .C0(\u_PH_DLY_FIFO/w_gcount_r21 ), .B0(\u_PH_DLY_FIFO/w_gcount_r22 ), 
    .A0(\u_PH_DLY_FIFO/w_gcount_r23 ), .M1(\u_PH_DLY_FIFO/r_gcount_2 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_3 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .F0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w3 ), .F1(\u_PH_DLY_FIFO/wcount_r1 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w2 ));
  u_PH_DLY_FIFO_SLICE_121 \u_PH_DLY_FIFO/SLICE_121 ( 
    .C1(\u_PH_DLY_FIFO/r_gcount_w21 ), .B1(\u_PH_DLY_FIFO/r_gcount_w22 ), 
    .A1(\u_PH_DLY_FIFO/r_gcount_w23 ), .D0(\u_PH_DLY_FIFO/r_gcount_w20 ), 
    .C0(\u_PH_DLY_FIFO/r_gcount_w21 ), .B0(\u_PH_DLY_FIFO/r_gcount_w22 ), 
    .A0(\u_PH_DLY_FIFO/r_gcount_w23 ), .M1(\u_PH_DLY_FIFO/wcount_0 ), 
    .M0(\u_PH_DLY_FIFO/wcount_1 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .Q0(\u_PH_DLY_FIFO/wptr_1 ), 
    .F1(\u_PH_DLY_FIFO/rcount_w1 ), .Q1(\u_PH_DLY_FIFO/wptr_0 ));
  u_PH_DLY_FIFO_SLICE_122 \u_PH_DLY_FIFO/SLICE_122 ( 
    .C1(\u_PH_DLY_FIFO/rptr_3 ), .B1(\u_PH_DLY_FIFO/rcount_3 ), 
    .A1(\u_PH_DLY_FIFO/w_gcount_r23 ), .C0(\u_PH_DLY_FIFO/rptr_3 ), 
    .B0(\u_PH_DLY_FIFO/rcount_3 ), .A0(\u_PH_DLY_FIFO/w_gcount_r23 ), 
    .M1(\u_PH_DLY_FIFO/rcount_0 ), .M0(\u_PH_DLY_FIFO/rcount_1 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/empty_cmp_set ), .Q0(\u_PH_DLY_FIFO/rptr_1 ), 
    .F1(\u_PH_DLY_FIFO/empty_cmp_clr ), .Q1(\u_PH_DLY_FIFO/rptr_0 ));
  SLICE_123 SLICE_123( .B1(\q_wc[9] ), .A1(\q_wc[8] ), .D0(\q_wc[8] ), 
    .C0(\q_wc[9] ), .B0(\q_wc[1] ), .A0(\q_wc[12] ), .F0(un27_q_ECC_0_a2_4), 
    .F1(un7_q_ECC_0_a2_2));
  SLICE_124 SLICE_124( .B1(\q_wc[4] ), .A1(\q_wc[3] ), .D0(\q_wc[3] ), 
    .C0(\q_wc[4] ), .B0(\q_wc[14] ), .A0(\q_wc[15] ), .F0(un7_q_ECC_0_a2_2_0), 
    .F1(un67_q_ECC_4));
  SLICE_125 SLICE_125( .D1(un49_bytepkt_0), .C1(\q_chksum[12] ), 
    .B1(\byte_data_fifo[4] ), .A1(\bytepkt_2_0[0] ), .D0(un49_bytepkt_0), 
    .C0(\q_chksum[8] ), .B0(\byte_data_fifo[0] ), .A0(\bytepkt_2_0[0] ), 
    .F0(\bytepkt_2_0_iv_3[0] ), .F1(\bytepkt_2_0_iv_3[4] ));
  SLICE_126 SLICE_126( .D1(un40_bytepkt_0), .C1(un15_bytepkt_0), 
    .B1(\q_chksum[11] ), .A1(\q_chksum[3] ), .D0(un40_bytepkt_0), 
    .C0(un15_bytepkt_0), .B0(\q_chksum[12] ), .A0(\q_chksum[4] ), 
    .F0(\bytepkt_2_0_iv_2[12] ), .F1(\bytepkt_2_0_iv_2[11] ));
  SLICE_127 SLICE_127( .B1(q_short_en), .A1(q_long_en), .C0(q_short_en), 
    .B0(q_long_en), .A0(long_en_c), .F0(un3_q_wc_0), .F1(un5_q_ECC_0));
  SLICE_128 SLICE_128( .D1(\q_wc[13] ), .C1(\q_wc[12] ), .B1(\q_wc[0] ), 
    .A1(\q_dt[3] ), .C0(\q_wc[13] ), .B0(\q_wc[12] ), .A0(\q_dt[0] ), 
    .F0(N_21), .F1(un47_q_ECC_0_a2_5));
  SLICE_129 SLICE_129( .D1(\q_wc[8] ), .C1(\q_dt[5] ), .B1(\q_dt[2] ), 
    .A1(\q_dt[1] ), .D0(\q_vc[0] ), .C0(\q_dt[5] ), .B0(\q_dt[3] ), 
    .A0(\q_dt[2] ), .F0(un67_q_ECC_0_a2_4), .F1(un108_q_ECC_0_a2_4));
  SLICE_130 SLICE_130( .D1(\q_wc[3] ), .C1(\q_ECC[3] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(\q_wc[1] ), .C0(\q_ECC[1] ), .B0(WC_1_En), .A0(WC_0_En), 
    .F0(\bytepkt_2_0_iv_0[9] ), .F1(\bytepkt_2_0_iv_0[11] ));
  SLICE_131 SLICE_131( .D1(\q_wc[12] ), .C1(\q_dt[4] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(\q_wc[5] ), .C0(\q_ECC[5] ), .B0(WC_1_En), .A0(WC_0_En), 
    .F0(\bytepkt_2_0_iv_0[13] ), .F1(\bytepkt_2_0_iv_0[4] ));
  SLICE_132 SLICE_132( .B1(q_bytepkt_en), .A1(bytepkt_en_c), 
    .B0(\u_PH_DLY_FIFO/FF_1_Q ), .A0(bytepkt_en_c), .M1(chksum_En), 
    .M0(bytepkt_en_c), .CLK(byte_clk_c), .F0(\u_PH_DLY_FIFO/rden_i ), 
    .Q0(q_bytepkt_en), .F1(un1_q_bytepkt_en_0), .Q1(q_chksum_En));
  SLICE_133 SLICE_133( .D1(\q_wc[15] ), .C1(\q_wc[11] ), .B1(\q_wc[1] ), 
    .A1(\q_vc[1] ), .D0(un8_wc_end_flag_9), .C0(un8_wc_end_flag_1), 
    .B0(\q_wc[1] ), .A0(\lpkt_cnt[0] ), .F0(un8_wc_end_flag_NE_5), 
    .F1(un47_q_ECC_0_a2_4));
  SLICE_134 SLICE_134( .D1(\q_wc[14] ), .C1(\q_wc[10] ), .B1(\q_wc[7] ), 
    .A1(\q_wc[1] ), .C0(\q_wc[15] ), .B0(\q_wc[14] ), .A0(\q_dt[4] ), 
    .F0(N_22), .F1(un67_q_ECC_0_a2_5));
  SLICE_135 SLICE_135( .D1(\q_wc[9] ), .C1(\q_wc[6] ), .B1(\q_vc[0] ), 
    .A1(\q_dt[1] ), .C0(\q_wc[5] ), .B0(\q_dt[2] ), .A0(\q_dt[1] ), 
    .F0(un47_q_ECC_0_a2_3), .F1(un87_q_ECC_0_a2_3));
  SLICE_136 SLICE_136( .D1(\q_wc[4] ), .C1(\q_wc[2] ), .B1(\q_wc[0] ), 
    .A1(\q_dt[3] ), .D0(\q_wc[0] ), .C0(\q_vc[1] ), .B0(\q_vc[0] ), 
    .A0(\q_dt[5] ), .F0(un27_q_ECC_0_a2_3), .F1(un87_q_ECC_0_a2_4));
  SLICE_137 SLICE_137( .C1(un8_wc_end_flag_14), .B1(un8_wc_end_flag_6), 
    .A1(un8_wc_end_flag_5), .C0(un8_wc_end_flag_15), .B0(un8_wc_end_flag_8), 
    .A0(un8_wc_end_flag_7), .F0(un8_wc_end_flag_NE_10), 
    .F1(un8_wc_end_flag_NE_9));
  SLICE_138 SLICE_138( .D1(\q_wc[5] ), .C1(\q_wc[3] ), .B1(\q_wc[2] ), 
    .A1(\q_vc[1] ), .B0(un1_bytepkt_1), .A0(hsSync_En), .F0(hsSync_En_m), 
    .F1(un108_q_ECC_0_a2_5));
  bytepkt_en bytepkt_en_I( .PADDO(bytepkt_en_c), .bytepkt_en(bytepkt_en));
  reset_nb reset_n_I( .PADDI(reset_n_c), .reset_n(reset_n));
  EoTp EoTp_I( .PADDI(EoTp_c), .EoTp(EoTp));
  bytepkt_31_ \bytepkt[31]_I ( .PADDO(GND), .bytepkt31(bytepkt[31]));
  bytepkt_30_ \bytepkt[30]_I ( .PADDO(GND), .bytepkt30(bytepkt[30]));
  bytepkt_29_ \bytepkt[29]_I ( .PADDO(GND), .bytepkt29(bytepkt[29]));
  bytepkt_28_ \bytepkt[28]_I ( .PADDO(GND), .bytepkt28(bytepkt[28]));
  bytepkt_27_ \bytepkt[27]_I ( .PADDO(GND), .bytepkt27(bytepkt[27]));
  bytepkt_26_ \bytepkt[26]_I ( .PADDO(GND), .bytepkt26(bytepkt[26]));
  bytepkt_25_ \bytepkt[25]_I ( .PADDO(GND), .bytepkt25(bytepkt[25]));
  bytepkt_24_ \bytepkt[24]_I ( .PADDO(GND), .bytepkt24(bytepkt[24]));
  bytepkt_23_ \bytepkt[23]_I ( .PADDO(GND), .bytepkt23(bytepkt[23]));
  bytepkt_22_ \bytepkt[22]_I ( .PADDO(GND), .bytepkt22(bytepkt[22]));
  bytepkt_21_ \bytepkt[21]_I ( .PADDO(GND), .bytepkt21(bytepkt[21]));
  bytepkt_20_ \bytepkt[20]_I ( .PADDO(GND), .bytepkt20(bytepkt[20]));
  bytepkt_19_ \bytepkt[19]_I ( .PADDO(GND), .bytepkt19(bytepkt[19]));
  bytepkt_18_ \bytepkt[18]_I ( .PADDO(GND), .bytepkt18(bytepkt[18]));
  bytepkt_17_ \bytepkt[17]_I ( .PADDO(GND), .bytepkt17(bytepkt[17]));
  bytepkt_16_ \bytepkt[16]_I ( .PADDO(GND), .bytepkt16(bytepkt[16]));
  bytepkt_15_ \bytepkt[15]_I ( .IOLDO(\bytepkt_c[15] ), 
    .bytepkt15(bytepkt[15]));
  bytepkt_15__MGIOL \bytepkt[15]_MGIOL ( .IOLDO(\bytepkt_c[15] ), 
    .OPOS(\bytepkt_2[15] ), .CLK(byte_clk_c));
  bytepkt_14_ \bytepkt[14]_I ( .IOLDO(\bytepkt_c[14] ), 
    .bytepkt14(bytepkt[14]));
  bytepkt_14__MGIOL \bytepkt[14]_MGIOL ( .IOLDO(\bytepkt_c[14] ), 
    .OPOS(\bytepkt_2[14] ), .CLK(byte_clk_c));
  bytepkt_13_ \bytepkt[13]_I ( .IOLDO(\bytepkt_c[13] ), 
    .bytepkt13(bytepkt[13]));
  bytepkt_13__MGIOL \bytepkt[13]_MGIOL ( .IOLDO(\bytepkt_c[13] ), 
    .OPOS(\bytepkt_2[13] ), .CLK(byte_clk_c));
  bytepkt_12_ \bytepkt[12]_I ( .IOLDO(\bytepkt_c[12] ), 
    .bytepkt12(bytepkt[12]));
  bytepkt_12__MGIOL \bytepkt[12]_MGIOL ( .IOLDO(\bytepkt_c[12] ), 
    .OPOS(\bytepkt_2[12] ), .CLK(byte_clk_c));
  bytepkt_11_ \bytepkt[11]_I ( .IOLDO(\bytepkt_c[11] ), 
    .bytepkt11(bytepkt[11]));
  bytepkt_11__MGIOL \bytepkt[11]_MGIOL ( .IOLDO(\bytepkt_c[11] ), 
    .OPOS(\bytepkt_2_0_iv_i[11] ), .CLK(byte_clk_c));
  bytepkt_10_ \bytepkt[10]_I ( .IOLDO(\bytepkt_c[10] ), 
    .bytepkt10(bytepkt[10]));
  bytepkt_10__MGIOL \bytepkt[10]_MGIOL ( .IOLDO(\bytepkt_c[10] ), 
    .OPOS(\bytepkt_2[10] ), .CLK(byte_clk_c));
  bytepkt_9_ \bytepkt[9]_I ( .IOLDO(\bytepkt_c[9] ), .bytepkt9(bytepkt[9]));
  bytepkt_9__MGIOL \bytepkt[9]_MGIOL ( .IOLDO(\bytepkt_c[9] ), 
    .OPOS(\bytepkt_2[9] ), .CLK(byte_clk_c));
  bytepkt_8_ \bytepkt[8]_I ( .IOLDO(\bytepkt_c[8] ), .bytepkt8(bytepkt[8]));
  bytepkt_8__MGIOL \bytepkt[8]_MGIOL ( .IOLDO(\bytepkt_c[8] ), 
    .OPOS(\bytepkt_2[8] ), .CLK(byte_clk_c));
  bytepkt_7_ \bytepkt[7]_I ( .IOLDO(\bytepkt_c[7] ), .bytepkt7(bytepkt[7]));
  bytepkt_7__MGIOL \bytepkt[7]_MGIOL ( .IOLDO(\bytepkt_c[7] ), 
    .OPOS(\bytepkt_2[7] ), .CLK(byte_clk_c));
  bytepkt_6_ \bytepkt[6]_I ( .IOLDO(\bytepkt_c[6] ), .bytepkt6(bytepkt[6]));
  bytepkt_6__MGIOL \bytepkt[6]_MGIOL ( .IOLDO(\bytepkt_c[6] ), 
    .OPOS(\bytepkt_2[6] ), .CLK(byte_clk_c));
  bytepkt_5_ \bytepkt[5]_I ( .IOLDO(\bytepkt_c[5] ), .bytepkt5(bytepkt[5]));
  bytepkt_5__MGIOL \bytepkt[5]_MGIOL ( .IOLDO(\bytepkt_c[5] ), 
    .OPOS(\bytepkt_2[5] ), .CLK(byte_clk_c));
  bytepkt_4_ \bytepkt[4]_I ( .IOLDO(\bytepkt_c[4] ), .bytepkt4(bytepkt[4]));
  bytepkt_4__MGIOL \bytepkt[4]_MGIOL ( .IOLDO(\bytepkt_c[4] ), 
    .OPOS(\bytepkt_2[4] ), .CLK(byte_clk_c));
  bytepkt_3_ \bytepkt[3]_I ( .IOLDO(\bytepkt_c[3] ), .bytepkt3(bytepkt[3]));
  bytepkt_3__MGIOL \bytepkt[3]_MGIOL ( .IOLDO(\bytepkt_c[3] ), 
    .OPOS(\bytepkt_2_0_iv_i[3] ), .CLK(byte_clk_c));
  bytepkt_2_ \bytepkt[2]_I ( .IOLDO(\bytepkt_c[2] ), .bytepkt2(bytepkt[2]));
  bytepkt_2__MGIOL \bytepkt[2]_MGIOL ( .IOLDO(\bytepkt_c[2] ), 
    .OPOS(\bytepkt_2[2] ), .CLK(byte_clk_c));
  bytepkt_1_ \bytepkt[1]_I ( .IOLDO(\bytepkt_c[1] ), .bytepkt1(bytepkt[1]));
  bytepkt_1__MGIOL \bytepkt[1]_MGIOL ( .IOLDO(\bytepkt_c[1] ), 
    .OPOS(\bytepkt_2[1] ), .CLK(byte_clk_c));
  bytepkt_0_ \bytepkt[0]_I ( .IOLDO(\bytepkt_c[0] ), .bytepkt0(bytepkt[0]));
  bytepkt_0__MGIOL \bytepkt[0]_MGIOL ( .IOLDO(\bytepkt_c[0] ), 
    .OPOS(\bytepkt_2[0] ), .CLK(byte_clk_c));
  chksum_15_ \chksum[15]_I ( .PADDI(\chksum_c[15] ), .chksum15(chksum[15]));
  chksum_15__MGIOL \chksum[15]_MGIOL ( .DI(\chksum_c[15] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[15] ));
  chksum_14_ \chksum[14]_I ( .PADDI(\chksum_c[14] ), .chksum14(chksum[14]));
  chksum_14__MGIOL \chksum[14]_MGIOL ( .DI(\chksum_c[14] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[14] ));
  chksum_13_ \chksum[13]_I ( .PADDI(\chksum_c[13] ), .chksum13(chksum[13]));
  chksum_13__MGIOL \chksum[13]_MGIOL ( .DI(\chksum_c[13] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[13] ));
  chksum_12_ \chksum[12]_I ( .PADDI(\chksum_c[12] ), .chksum12(chksum[12]));
  chksum_12__MGIOL \chksum[12]_MGIOL ( .DI(\chksum_c[12] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[12] ));
  chksum_11_ \chksum[11]_I ( .PADDI(\chksum_c[11] ), .chksum11(chksum[11]));
  chksum_11__MGIOL \chksum[11]_MGIOL ( .DI(\chksum_c[11] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[11] ));
  chksum_10_ \chksum[10]_I ( .PADDI(\chksum_c[10] ), .chksum10(chksum[10]));
  chksum_10__MGIOL \chksum[10]_MGIOL ( .DI(\chksum_c[10] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[10] ));
  chksum_9_ \chksum[9]_I ( .PADDI(\chksum_c[9] ), .chksum9(chksum[9]));
  chksum_9__MGIOL \chksum[9]_MGIOL ( .DI(\chksum_c[9] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[9] ));
  chksum_8_ \chksum[8]_I ( .PADDI(\chksum_c[8] ), .chksum8(chksum[8]));
  chksum_8__MGIOL \chksum[8]_MGIOL ( .DI(\chksum_c[8] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[8] ));
  chksum_7_ \chksum[7]_I ( .PADDI(\chksum_c[7] ), .chksum7(chksum[7]));
  chksum_7__MGIOL \chksum[7]_MGIOL ( .DI(\chksum_c[7] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[7] ));
  chksum_6_ \chksum[6]_I ( .PADDI(\chksum_c[6] ), .chksum6(chksum[6]));
  chksum_6__MGIOL \chksum[6]_MGIOL ( .DI(\chksum_c[6] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[6] ));
  chksum_5_ \chksum[5]_I ( .PADDI(\chksum_c[5] ), .chksum5(chksum[5]));
  chksum_5__MGIOL \chksum[5]_MGIOL ( .DI(\chksum_c[5] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[5] ));
  chksum_4_ \chksum[4]_I ( .PADDI(\chksum_c[4] ), .chksum4(chksum[4]));
  chksum_4__MGIOL \chksum[4]_MGIOL ( .DI(\chksum_c[4] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[4] ));
  chksum_3_ \chksum[3]_I ( .PADDI(\chksum_c[3] ), .chksum3(chksum[3]));
  chksum_3__MGIOL \chksum[3]_MGIOL ( .DI(\chksum_c[3] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[3] ));
  chksum_2_ \chksum[2]_I ( .PADDI(\chksum_c[2] ), .chksum2(chksum[2]));
  chksum_2__MGIOL \chksum[2]_MGIOL ( .DI(\chksum_c[2] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[2] ));
  chksum_1_ \chksum[1]_I ( .PADDI(\chksum_c[1] ), .chksum1(chksum[1]));
  chksum_1__MGIOL \chksum[1]_MGIOL ( .DI(\chksum_c[1] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[1] ));
  chksum_0_ \chksum[0]_I ( .PADDI(\chksum_c[0] ), .chksum0(chksum[0]));
  chksum_0__MGIOL \chksum[0]_MGIOL ( .DI(\chksum_c[0] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[0] ));
  chksum_rdy chksum_rdy_I( .PADDI(chksum_rdy_c), .chksum_rdy(chksum_rdy));
  wc_15_ \wc[15]_I ( .PADDI(\wc_c[15] ), .wc15(wc[15]));
  wc_15__MGIOL \wc[15]_MGIOL ( .DI(\wc_c[15] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[15] ));
  wc_14_ \wc[14]_I ( .PADDI(\wc_c[14] ), .wc14(wc[14]));
  wc_14__MGIOL \wc[14]_MGIOL ( .DI(\wc_c[14] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[14] ));
  wc_13_ \wc[13]_I ( .PADDI(\wc_c[13] ), .wc13(wc[13]));
  wc_13__MGIOL \wc[13]_MGIOL ( .DI(\wc_c[13] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[13] ));
  wc_12_ \wc[12]_I ( .PADDI(\wc_c[12] ), .wc12(wc[12]));
  wc_12__MGIOL \wc[12]_MGIOL ( .DI(\wc_c[12] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[12] ));
  wc_11_ \wc[11]_I ( .PADDI(\wc_c[11] ), .wc11(wc[11]));
  wc_11__MGIOL \wc[11]_MGIOL ( .DI(\wc_c[11] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[11] ));
  wc_10_ \wc[10]_I ( .PADDI(\wc_c[10] ), .wc10(wc[10]));
  wc_10__MGIOL \wc[10]_MGIOL ( .DI(\wc_c[10] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[10] ));
  wc_9_ \wc[9]_I ( .PADDI(\wc_c[9] ), .wc9(wc[9]));
  wc_9__MGIOL \wc[9]_MGIOL ( .DI(\wc_c[9] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[9] ));
  wc_8_ \wc[8]_I ( .PADDI(\wc_c[8] ), .wc8(wc[8]));
  wc_8__MGIOL \wc[8]_MGIOL ( .DI(\wc_c[8] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[8] ));
  wc_7_ \wc[7]_I ( .PADDI(\wc_c[7] ), .wc7(wc[7]));
  wc_7__MGIOL \wc[7]_MGIOL ( .DI(\wc_c[7] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[7] ));
  wc_6_ \wc[6]_I ( .PADDI(\wc_c[6] ), .wc6(wc[6]));
  wc_6__MGIOL \wc[6]_MGIOL ( .DI(\wc_c[6] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[6] ));
  wc_5_ \wc[5]_I ( .PADDI(\wc_c[5] ), .wc5(wc[5]));
  wc_5__MGIOL \wc[5]_MGIOL ( .DI(\wc_c[5] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[5] ));
  wc_4_ \wc[4]_I ( .PADDI(\wc_c[4] ), .wc4(wc[4]));
  wc_4__MGIOL \wc[4]_MGIOL ( .DI(\wc_c[4] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[4] ));
  wc_3_ \wc[3]_I ( .PADDI(\wc_c[3] ), .wc3(wc[3]));
  wc_3__MGIOL \wc[3]_MGIOL ( .DI(\wc_c[3] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[3] ));
  wc_2_ \wc[2]_I ( .PADDI(\wc_c[2] ), .wc2(wc[2]));
  wc_2__MGIOL \wc[2]_MGIOL ( .DI(\wc_c[2] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[2] ));
  wc_1_ \wc[1]_I ( .PADDI(\wc_c[1] ), .wc1(wc[1]));
  wc_1__MGIOL \wc[1]_MGIOL ( .DI(\wc_c[1] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[1] ));
  wc_0_ \wc[0]_I ( .PADDI(\wc_c[0] ), .wc0(wc[0]));
  wc_0__MGIOL \wc[0]_MGIOL ( .DI(\wc_c[0] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[0] ));
  dt_5_ \dt[5]_I ( .PADDI(\dt_c[5] ), .dt5(dt[5]));
  dt_5__MGIOL \dt[5]_MGIOL ( .DI(\dt_c[5] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[5] ));
  dt_4_ \dt[4]_I ( .PADDI(\dt_c[4] ), .dt4(dt[4]));
  dt_4__MGIOL \dt[4]_MGIOL ( .DI(\dt_c[4] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[4] ));
  dt_3_ \dt[3]_I ( .PADDI(\dt_c[3] ), .dt3(dt[3]));
  dt_3__MGIOL \dt[3]_MGIOL ( .DI(\dt_c[3] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[3] ));
  dt_2_ \dt[2]_I ( .PADDI(\dt_c[2] ), .dt2(dt[2]));
  dt_2__MGIOL \dt[2]_MGIOL ( .DI(\dt_c[2] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[2] ));
  dt_1_ \dt[1]_I ( .PADDI(\dt_c[1] ), .dt1(dt[1]));
  dt_1__MGIOL \dt[1]_MGIOL ( .DI(\dt_c[1] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[1] ));
  dt_0_ \dt[0]_I ( .PADDI(\dt_c[0] ), .dt0(dt[0]));
  dt_0__MGIOL \dt[0]_MGIOL ( .DI(\dt_c[0] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[0] ));
  vc_1_ \vc[1]_I ( .PADDI(\vc_c[1] ), .vc1(vc[1]));
  vc_1__MGIOL \vc[1]_MGIOL ( .DI(\vc_c[1] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_vc[1] ));
  vc_0_ \vc[0]_I ( .PADDI(\vc_c[0] ), .vc0(vc[0]));
  vc_0__MGIOL \vc[0]_MGIOL ( .DI(\vc_c[0] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_vc[0] ));
  byte_data_15_b \byte_data[15]_I ( .PADDI(\byte_data_c[15] ), 
    .bytedata15(byte_data[15]));
  byte_data_15__MGIOLb \byte_data[15]_MGIOL ( .DI(\byte_data_c[15] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[15] ));
  byte_data_14_b \byte_data[14]_I ( .PADDI(\byte_data_c[14] ), 
    .bytedata14(byte_data[14]));
  byte_data_14__MGIOLb \byte_data[14]_MGIOL ( .DI(\byte_data_c[14] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[14] ));
  byte_data_13_b \byte_data[13]_I ( .PADDI(\byte_data_c[13] ), 
    .bytedata13(byte_data[13]));
  byte_data_13__MGIOLb \byte_data[13]_MGIOL ( .DI(\byte_data_c[13] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[13] ));
  byte_data_12_b \byte_data[12]_I ( .PADDI(\byte_data_c[12] ), 
    .bytedata12(byte_data[12]));
  byte_data_12__MGIOLb \byte_data[12]_MGIOL ( .DI(\byte_data_c[12] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[12] ));
  byte_data_11_b \byte_data[11]_I ( .PADDI(\byte_data_c[11] ), 
    .bytedata11(byte_data[11]));
  byte_data_11__MGIOLb \byte_data[11]_MGIOL ( .DI(\byte_data_c[11] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[11] ));
  byte_data_10_b \byte_data[10]_I ( .PADDI(\byte_data_c[10] ), 
    .bytedata10(byte_data[10]));
  byte_data_10__MGIOLb \byte_data[10]_MGIOL ( .DI(\byte_data_c[10] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[10] ));
  byte_data_9_b \byte_data[9]_I ( .PADDI(\byte_data_c[9] ), 
    .bytedata9(byte_data[9]));
  byte_data_9__MGIOLb \byte_data[9]_MGIOL ( .DI(\byte_data_c[9] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[9] ));
  byte_data_8_b \byte_data[8]_I ( .PADDI(\byte_data_c[8] ), 
    .bytedata8(byte_data[8]));
  byte_data_8__MGIOLb \byte_data[8]_MGIOL ( .DI(\byte_data_c[8] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[8] ));
  byte_data_7_b \byte_data[7]_I ( .PADDI(\byte_data_c[7] ), 
    .bytedata7(byte_data[7]));
  byte_data_7__MGIOLb \byte_data[7]_MGIOL ( .DI(\byte_data_c[7] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[7] ));
  byte_data_6_b \byte_data[6]_I ( .PADDI(\byte_data_c[6] ), 
    .bytedata6(byte_data[6]));
  byte_data_6__MGIOLb \byte_data[6]_MGIOL ( .DI(\byte_data_c[6] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[6] ));
  byte_data_5_b \byte_data[5]_I ( .PADDI(\byte_data_c[5] ), 
    .bytedata5(byte_data[5]));
  byte_data_5__MGIOLb \byte_data[5]_MGIOL ( .DI(\byte_data_c[5] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[5] ));
  byte_data_4_b \byte_data[4]_I ( .PADDI(\byte_data_c[4] ), 
    .bytedata4(byte_data[4]));
  byte_data_4__MGIOLb \byte_data[4]_MGIOL ( .DI(\byte_data_c[4] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[4] ));
  byte_data_3_b \byte_data[3]_I ( .PADDI(\byte_data_c[3] ), 
    .bytedata3(byte_data[3]));
  byte_data_3__MGIOLb \byte_data[3]_MGIOL ( .DI(\byte_data_c[3] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[3] ));
  byte_data_2_b \byte_data[2]_I ( .PADDI(\byte_data_c[2] ), 
    .bytedata2(byte_data[2]));
  byte_data_2__MGIOLb \byte_data[2]_MGIOL ( .DI(\byte_data_c[2] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[2] ));
  byte_data_1_b \byte_data[1]_I ( .PADDI(\byte_data_c[1] ), 
    .bytedata1(byte_data[1]));
  byte_data_1__MGIOLb \byte_data[1]_MGIOL ( .DI(\byte_data_c[1] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[1] ));
  byte_data_0_b \byte_data[0]_I ( .PADDI(\byte_data_c[0] ), 
    .bytedata0(byte_data[0]));
  byte_data_0__MGIOLb \byte_data[0]_MGIOL ( .DI(\byte_data_c[0] ), 
    .CLK(byte_clk_c), .IN(\q_byte_data[0] ));
  byte_clkb byte_clk_I( .PADDI(byte_clk_c), .byte_clk(byte_clk));
  long_en long_en_I( .PADDI(long_en_c), .long_en(long_en));
  long_en_MGIOL long_en_MGIOL( .DI(long_en_c), .CLK(byte_clk_c), 
    .IN(q_long_en));
  short_en short_en_I( .PADDI(short_en_c), .short_en(short_en));
  short_en_MGIOL short_en_MGIOL( .DI(short_en_c), .CLK(byte_clk_c), 
    .IN(q_short_en));
  GSR_INSTb GSR_INST( .GSRNET(reset_n_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0b ( input B1, A1, B0, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsreb \lpkt_cnt[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  ccu2 \lpkt_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsreb ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vccb ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gndb ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_PH_DLY_FIFO_SLICE_1b ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_58 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_59 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/r_gctr_1 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0001 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module alu2_mult ( input A0, A1, CI, output S0, S1, CO1 );

  CU2 INST01( .CI(CI), .PC0(A0), .PC1(A1), .CO(CO1), .NC0(S0), .NC1(S1));
endmodule

module u_PH_DLY_FIFO_SLICE_2b ( input DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  alu2_mult0002 \u_PH_DLY_FIFO/a1 ( .A0(GNDI), .A1(GNDI), .B0(GNDI), .B1(GNDI), 
    .CI(FCI), .S0(F0), .S1(), .CO1());
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module alu2_mult0002 ( input A0, A1, B0, B1, CI, output S0, S1, CO1 );

  FADD2B INST01( .A0(A0), .A1(A1), .B0(B0), .B1(B1), .CI(CI), .COUT(CO1), 
    .S0(S0), .S1(S1));
endmodule

module u_PH_DLY_FIFO_SLICE_3b ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_13 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_12 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/empty_cmp_0 ( .A0(A0), .A1(A1), .B0(B0), 
    .B1(B1), .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module alu2_mult0003 ( input A0, A1, B0, B1, CI, output CO1 );

  AGEB2 INST01( .A0(A0), .A1(A1), .B0(B0), .B1(B1), .CI(CI), .GE(CO1));
endmodule

module u_PH_DLY_FIFO_SLICE_4b ( output FCO );
  wire   GNDI, VCCI;

  alu2_mult0002 \u_PH_DLY_FIFO/w_gctr_cia ( .A0(GNDI), .A1(VCCI), .B0(GNDI), 
    .B1(VCCI), .CI(), .S0(), .S1(), .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));
  vccb DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_5b ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_72 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \u_PH_DLY_FIFO/FF_73 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/w_gctr_0 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0004 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module u_PH_DLY_FIFO_SLICE_6b ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_70 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_71 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/w_gctr_1 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_7b ( input M1, M0, LSR, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_9 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_8 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0002 \u_PH_DLY_FIFO/r_gctr_cia ( .A0(GNDI), .A1(VCCI), .B0(GNDI), 
    .B1(VCCI), .CI(), .S0(), .S1(), .CO1(FCO));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_8b ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_60 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \u_PH_DLY_FIFO/FF_61 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/r_gctr_0 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_9b ( input B1, A1, M1, M0, LSR, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_17 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_16 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0002 \u_PH_DLY_FIFO/empty_cmp_ci_a ( .A0(GNDI), .A1(A1), .B0(GNDI), 
    .B1(B1), .CI(), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_10b ( input DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \u_PH_DLY_FIFO/FF_1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  alu2_mult0002 \u_PH_DLY_FIFO/a0 ( .A0(GNDI), .A1(GNDI), .B0(GNDI), .B1(GNDI), 
    .CI(FCI), .S0(F0), .S1(), .CO1());
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_11b ( input B1, A1, M1, M0, LSR, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0002 \u_PH_DLY_FIFO/full_cmp_ci_a ( .A0(GNDI), .A1(A1), .B0(GNDI), 
    .B1(B1), .CI(), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_12b ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/full_cmp_1 ( .A0(A0), .A1(A1), .B0(B0), .B1(B1), 
    .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_13b ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/full_cmp_0 ( .A0(A0), .A1(A1), .B0(B0), .B1(B1), 
    .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_14b ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0001 \u_PH_DLY_FIFO/FF_15 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_14 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/empty_cmp_1 ( .A0(A0), .A1(A1), .B0(B0), 
    .B1(B1), .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_15b ( input A0, FCI, output F0, F1 );
  wire   GNDI;

  ccu20005 un8_wc_end_flag_a_4_cry_15_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF001;
  defparam inst1.INIT1 = 16'h300F;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_16b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_13_0( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_17b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_11_0( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_18b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_9_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_19b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_7_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_20b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_5_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_21b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_3_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_22b ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20006 un8_wc_end_flag_a_4_cry_1_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_23b ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20007 un8_wc_end_flag_a_4_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_24b ( input B0, A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsreb \lpkt_cnt[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  ccu20008 \lpkt_cnt_s_0[15] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_25b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[13] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_26b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[11] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_27b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[9] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_28b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_29b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_30b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_31b ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \lpkt_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_7_6 ( input D1, C1, B1, A1, C0, B0, A0, 
    output WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   GNDI;

  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ( .I(C0), .Z(WADO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ( .I(GNDI), .Z(WADO3));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (C0 => WADO2) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module buffer ( input I, output Z );

  BUFBA INST1( .A(I), .Z(Z));
endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_7_7 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram \u_PH_DLY_FIFO/fifo_pfu_0_7/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_48 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_49 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ec2dpram ( input DI0, DI1, RA0, RA1, RA2, RA3, WA0, WA1, WA2, WA3, WRE, 
    WCK, output DO0, DO1 );
  wire   TIELO;

  VLO GND1( .Z(TIELO));
  DPR16X4C #("0x0000000000000000") inst0( .DI0(DI0), .DI1(DI1), .DI2(TIELO), 
    .DI3(TIELO), .WAD0(WA0), .WAD1(WA1), .WAD2(WA2), .WAD3(WA3), .WRE(WRE), 
    .WCK(WCK), .RAD0(RA0), .RAD1(RA1), .RAD2(RA2), .RAD3(RA3), .DO0(DO0), 
    .DO1(DO1), .DO2(), .DO3());
endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_7 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram0010 \u_PH_DLY_FIFO/fifo_pfu_0_7/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_46 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_47 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ec2dpram0010 ( input DI0, DI1, RA0, RA1, RA2, RA3, WA0, WA1, WA2, WA3, 
    WRE, WCK, output DO0, DO1 );
  wire   TIELO;

  VLO GND1( .Z(TIELO));
  DPR16X4C #("0x0000000000000000") inst0( .DI0(TIELO), .DI1(TIELO), .DI2(DI0), 
    .DI3(DI1), .WAD0(WA0), .WAD1(WA1), .WAD2(WA2), .WAD3(WA3), .WRE(WRE), 
    .WCK(WCK), .RAD0(RA0), .RAD1(RA1), .RAD2(RA2), .RAD3(RA3), .DO0(), .DO1(), 
    .DO2(DO0), .DO3(DO1));
endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_4_0 ( input D1, C1, B1, A1, C0, B0, A0, 
    output WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   GNDI;

  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD2_INT ( .I(C0), .Z(WADO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_4/WAD3_INT ( .I(GNDI), .Z(WADO3));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (C0 => WADO2) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_4_1 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram \u_PH_DLY_FIFO/fifo_pfu_0_4/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_36 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_37 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_4 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram0010 \u_PH_DLY_FIFO/fifo_pfu_0_4/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_34 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_35 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_5_3 ( input D1, C1, B1, A1, C0, B0, A0, 
    output WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   GNDI;

  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD2_INT ( .I(C0), .Z(WADO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_5/WAD3_INT ( .I(GNDI), .Z(WADO3));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (C0 => WADO2) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_5_2 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram \u_PH_DLY_FIFO/fifo_pfu_0_5/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_40 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_41 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_5 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram0010 \u_PH_DLY_FIFO/fifo_pfu_0_5/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_38 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_39 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_6_5 ( input D1, C1, B1, A1, C0, B0, A0, 
    output WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   GNDI;

  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ( .I(C0), .Z(WADO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ( .I(GNDI), .Z(WADO3));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (C0 => WADO2) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_6_4 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram \u_PH_DLY_FIFO/fifo_pfu_0_6/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_44 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_45 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_6 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram0010 \u_PH_DLY_FIFO/fifo_pfu_0_6/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(GNDI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_42 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_43 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_44 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M1, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut4b \bytepkt_2_0_iv_0[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40011b \EoTp_En_2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \EoTp_En[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \EoTp_En[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40011b ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_45 ( input B0, A0, DI0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40012b \EoTp_En_4[2] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \EoTp_En[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_46 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40013b un1_q_long_pkt_indicator_1_1( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40014b short_en_pad_RNIUEQP( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb PH_En( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013b ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0DD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40014b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2F22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_47 ( input C1, B1, A1, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40015b \un7_PH_cnt[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40016b \un7_PH_cnt[0] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsreb \PH_cnt[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsreb \PH_cnt[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2828) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40016b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_48 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40017b \PH_cnt_RNO[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018b \un7_PH_cnt[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \PH_cnt[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \PH_cnt[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40017b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40018b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2A80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_49 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40019b DataID_En_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb WC_0_En( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_50 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40020b ECC_En_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb WC_1_En( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_51 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40021 bytepkt_en_2_3_0( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40021 bytepkt_en_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb bytepkt_en( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_52 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40021 un8_wc_end_flag_a_4_cry_11_0_RNIJI771( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40022 chksum_En_RNO( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb chksum_En( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_53 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40023 un2_lpkt_cnt_En_1( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40019b hsSync_En_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb hsSync_En( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_54 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40024 lngpkt_ofst_RNO( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 un2_lngpkt_ofst( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb lngpkt_ofst( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_55 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40026 lpkt_cnt_En_RNO( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40027 un2_lpkt_cnt_En( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb lpkt_cnt_En( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_56 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40028 un87_q_ECC_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 un108_q_ECC_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \q_ECC[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \q_ECC[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6996) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_57 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40028 un47_q_ECC_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 un67_q_ECC_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \q_ECC[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \q_ECC[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_58 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40028 un7_q_ECC_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 un27_q_ECC_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \q_ECC[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));
  vmuxregsreb \q_ECC[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_61 ( input B1, A1, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40016b \u_PH_DLY_FIFO/AND2_t8 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40029 q_long_pkt_indicator_RNO( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsreb q_long_pkt_indicator( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vccb DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICE_62 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40030 \u_PH_DLY_FIFO/XOR2_t1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40030 \u_PH_DLY_FIFO/XOR2_t2 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_56 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_57 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICE_63 ( input B1, A1, B0, A0, DI0, M1, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40030 \u_PH_DLY_FIFO/LUT4_8 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40030 \u_PH_DLY_FIFO/XOR2_t0 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_54 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_55 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_70 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40030 \u_PH_DLY_FIFO/XOR2_t4 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40030 \u_PH_DLY_FIFO/XOR2_t5 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_68 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_69 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_71 ( input B1, A1, B0, A0, DI0, M1, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40030 \u_PH_DLY_FIFO/LUT4_5 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40030 \u_PH_DLY_FIFO/XOR2_t3 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_66 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_67 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_77 ( input B0, A0, M1, M0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40031 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40030 un47_q_ECC_0_a2_4( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_62 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_63 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_78 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \bytepkt_2_0_iv_0[14] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40033 hsSync_En_RNIIQCD1( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_79 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40034 un50_bytepkt( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40035 un50_bytepkt_RNI2ENP( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5545) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_80 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40036 un1_bytepkt_1_RNO( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 un13_bytepkt( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFC8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_81 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 \bytepkt_2_0_iv_3[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40039 \bytepkt_2_0_iv[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_82 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40040 bytepkt_en_2_3( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40020b \bytepkt_2_0_iv_2_RNO[15] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_83 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40021 \bytepkt_2_0_iv_4[11] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40019b \bytepkt_2_0_iv_4_RNO[11] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_84 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40021 \bytepkt_2_0_iv[13] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020b \bytepkt_2_0_iv_RNO[13] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_85 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40021 \bytepkt_2_0_iv[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020b \bytepkt_2_0_iv_RNO[12] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_86 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40021 \bytepkt_2_0_iv_4[9] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020b \bytepkt_2_0_iv_4_RNO[9] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_87 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40041 \bytepkt_2_1_iv[6] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40042 \bytepkt_2_1_iv_RNO[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_88 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40043 un19_bytepkt( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40044 \bytepkt_2_1_iv_RNO[7] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_89 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40025 \bytepkt_cnst_0_a2[9] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40045 \bytepkt_2_0_iv_i[11] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_90 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40014b \bytepkt_2_0_iv_3[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40046 \bytepkt_2_0_iv_i[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_91 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40047 un49_bytepkt( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 \bytepkt_2_0_iv[15] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_92 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 \bytepkt_2_1_iv_2[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40021 \bytepkt_2_1_iv[7] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_93 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40021 un1_bytepkt_1( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40049 \bytepkt_2_0_iv[9] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAEAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_94 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b \bytepkt_2_0_iv_2[10] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 \bytepkt_2_0_iv[10] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_95 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 \bytepkt_2_0_iv_3[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40051 \bytepkt_2_0_iv[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_96 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40052 \bytepkt_cnst_i_a2_0[0] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40053 \bytepkt_2_0_iv[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_97 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 \bytepkt_2_0_iv_3[2] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40051 \bytepkt_2_0_iv[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_98 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b \bytepkt_2_0_iv_2[8] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40051 \bytepkt_2_0_iv[8] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_99 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b \bytepkt_2_0_iv_1[14] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 \bytepkt_2_0_iv[14] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_100 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40023 un16_bytepkt( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40054 \bytepkt_cnst_i_a2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00BF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_101 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b \bytepkt_2_0_iv_0[8] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \bytepkt_2_0_iv_3[8] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_102 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40056 \bytepkt_2_0_iv_0[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 \bytepkt_2_0_iv_2[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_103 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \bytepkt_2_0_iv_0[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \bytepkt_2_0_iv_2[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_104 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \bytepkt_2_0_iv_0[2] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \bytepkt_2_0_iv_2[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_105 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40012b \bytepkt_2_1_iv_1_RNO[6] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40059 \bytepkt_2_1_iv_1[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_106 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40060 \bytepkt_2[0] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40038 \bytepkt_2_1_iv_2[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_107 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \bytepkt_2_0_iv_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \bytepkt_2_0_iv_2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_108 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b \bytepkt_2_0_iv_0[10] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \bytepkt_2_0_iv_3[10] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_109 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b \bytepkt_2_0_iv_1[15] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40041 \bytepkt_2_0_iv_2[15] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_110 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40012b \bytepkt_2_1_iv_1_RNO[7] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40059 \bytepkt_2_1_iv_1[7] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_111 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40039 \bytepkt_2_0_iv[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \bytepkt_2_0_iv_2[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_112 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \bytepkt_2_0_iv_0[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \bytepkt_2_0_iv_2[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_113 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40012b un40_bytepkt( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut4b \bytepkt_2_0_iv_2[9] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_114 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40012b un15_bytepkt( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut4b \bytepkt_2_0_iv_2[13] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_115 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40061 un38_bytepkt( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40027 un45_bytepkt( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_116 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40052 un18_PH_En_2( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40062 PH_En_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_117 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40030 un7_q_ECC_0_a2_1( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40028 un7_q_ECC_0_a2_4( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_118 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40063 un8_wc_end_flag_a_4_cry_13_0_RNIT9I5( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40021 un8_wc_end_flag_a_4_cry_11_0_RNI9609( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICE_119 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40064 \u_PH_DLY_FIFO/LUT4_1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40065 \u_PH_DLY_FIFO/LUT4_0 ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_51 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_50 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1818) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8181) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICE_120 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40066 \u_PH_DLY_FIFO/LUT4_7 ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40028 \u_PH_DLY_FIFO/LUT4_9 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_11 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_10 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9696) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICE_121 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40066 \u_PH_DLY_FIFO/LUT4_4 ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40028 \u_PH_DLY_FIFO/LUT4_6 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_65 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_64 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICE_122 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40067 \u_PH_DLY_FIFO/LUT4_2 ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40068 \u_PH_DLY_FIFO/LUT4_3 ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_53 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \u_PH_DLY_FIFO/FF_52 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4242) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2424) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_123 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40030 un7_q_ECC_0_a2_2( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40028 un27_q_ECC_0_a2_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_124 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40030 un67_q_ECC_0_a2_4( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40028 un7_q_ECC_0_a2_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_125 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 \bytepkt_2_0_iv_3[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40038 \bytepkt_2_0_iv_3[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_126 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40069 \bytepkt_2_0_iv_2[11] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b \bytepkt_2_0_iv_2[12] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7530) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_127 ( input B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40040 un5_q_ECC( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40070 un3_q_wc( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_128 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40028 un47_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40066 un67_q_ECC_0_a2_0( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_129 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40028 un108_q_ECC_0_a2_4( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 un67_q_ECC_0_a2_4_0( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_130 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40071 \bytepkt_2_0_iv_0[11] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b \bytepkt_2_0_iv_0[9] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_131 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \bytepkt_2_0_iv_0[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b \bytepkt_2_0_iv_0[13] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_132 ( input B1, A1, B0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40023 un1_q_bytepkt_en( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40016b \u_PH_DLY_FIFO/AND2_t7 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsreb q_chksum_En( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vccb DRIVEVCC( .PWR1(VCCI));
  vmuxregsreb q_bytepkt_en( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_133 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40028 un47_q_ECC_0_a2_4_0( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40072 un8_wc_end_flag_a_4_cry_1_0_RNIDB2R( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_134 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40028 un67_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40066 un27_q_ECC_0_a2_0( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_135 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40028 un87_q_ECC_0_a2_3( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40066 un47_q_ECC_0_a2_3( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_136 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40028 un87_q_ECC_0_a2_4( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 un27_q_ECC_0_a2_3( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_137 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40063 un8_wc_end_flag_a_4_cry_13_0_RNI1IM5( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gndb DRIVEGND( .PWR0(GNDI));
  lut40063 un8_wc_end_flag_a_4_cry_15_0_RNI7US5( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_138 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40028 un108_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016b un1_bytepkt_1_RNIGBC3( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_en ( input PADDO, output bytepkt_en );
  wire   GNDI;

  xo2iobufb bytepkt_en_pad( .I(PADDO), .T(GNDI), .PAD(bytepkt_en));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt_en) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobufb ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module reset_nb ( output PADDI, input reset_n );

  xo2iobuf0073 reset_n_pad( .Z(PADDI), .PAD(reset_n));

  specify
    (reset_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge reset_n, 0:0:0);
    $width (negedge reset_n, 0:0:0);
  endspecify

endmodule

module xo2iobuf0073 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module EoTp ( output PADDI, input EoTp );

  xo2iobuf0074 EoTp_pad( .Z(PADDI), .PAD(EoTp));

  specify
    (EoTp => PADDI) = (0:0:0,0:0:0);
    $width (posedge EoTp, 0:0:0);
    $width (negedge EoTp, 0:0:0);
  endspecify

endmodule

module xo2iobuf0074 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module bytepkt_31_ ( input PADDO, output bytepkt31 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[31] ( .I(PADDO), .T(GNDI), .PAD(bytepkt31));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt31) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_30_ ( input PADDO, output bytepkt30 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[30] ( .I(PADDO), .T(GNDI), .PAD(bytepkt30));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt30) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_29_ ( input PADDO, output bytepkt29 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[29] ( .I(PADDO), .T(GNDI), .PAD(bytepkt29));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt29) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_28_ ( input PADDO, output bytepkt28 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[28] ( .I(PADDO), .T(GNDI), .PAD(bytepkt28));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt28) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_27_ ( input PADDO, output bytepkt27 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[27] ( .I(PADDO), .T(GNDI), .PAD(bytepkt27));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt27) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_26_ ( input PADDO, output bytepkt26 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[26] ( .I(PADDO), .T(GNDI), .PAD(bytepkt26));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt26) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_25_ ( input PADDO, output bytepkt25 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[25] ( .I(PADDO), .T(GNDI), .PAD(bytepkt25));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt25) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_24_ ( input PADDO, output bytepkt24 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[24] ( .I(PADDO), .T(GNDI), .PAD(bytepkt24));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt24) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_23_ ( input PADDO, output bytepkt23 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[23] ( .I(PADDO), .T(GNDI), .PAD(bytepkt23));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt23) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_22_ ( input PADDO, output bytepkt22 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[22] ( .I(PADDO), .T(GNDI), .PAD(bytepkt22));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt22) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_21_ ( input PADDO, output bytepkt21 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[21] ( .I(PADDO), .T(GNDI), .PAD(bytepkt21));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt21) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_20_ ( input PADDO, output bytepkt20 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[20] ( .I(PADDO), .T(GNDI), .PAD(bytepkt20));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt20) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_19_ ( input PADDO, output bytepkt19 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[19] ( .I(PADDO), .T(GNDI), .PAD(bytepkt19));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt19) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_18_ ( input PADDO, output bytepkt18 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[18] ( .I(PADDO), .T(GNDI), .PAD(bytepkt18));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt18) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_17_ ( input PADDO, output bytepkt17 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[17] ( .I(PADDO), .T(GNDI), .PAD(bytepkt17));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt17) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_16_ ( input PADDO, output bytepkt16 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[16] ( .I(PADDO), .T(GNDI), .PAD(bytepkt16));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bytepkt16) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_15_ ( input IOLDO, output bytepkt15 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[15] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt15));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt15) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_15__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[15] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsreb ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module bytepkt_14_ ( input IOLDO, output bytepkt14 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[14] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt14));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt14) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_14__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[14] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_13_ ( input IOLDO, output bytepkt13 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[13] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt13));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt13) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_13__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[13] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_12_ ( input IOLDO, output bytepkt12 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[12] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt12));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt12) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_12__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[12] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_11_ ( input IOLDO, output bytepkt11 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[11] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt11));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt11) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_11__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[11] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_10_ ( input IOLDO, output bytepkt10 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[10] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt10));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt10) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_10__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[10] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_9_ ( input IOLDO, output bytepkt9 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[9] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt9));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt9) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_9__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[9] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_8_ ( input IOLDO, output bytepkt8 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[8] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt8));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt8) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_8__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[8] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_7_ ( input IOLDO, output bytepkt7 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt7));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt7) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_7__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[7] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_6_ ( input IOLDO, output bytepkt6 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt6));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt6) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_6__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[6] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_5_ ( input IOLDO, output bytepkt5 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt5));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt5) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_5__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[5] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_4_ ( input IOLDO, output bytepkt4 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt4));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt4) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_4__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[4] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_3_ ( input IOLDO, output bytepkt3 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt3));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt3) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_3__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[3] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_2_ ( input IOLDO, output bytepkt2 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt2));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt2) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_2__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[2] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_1_ ( input IOLDO, output bytepkt1 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt1));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt1) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_1__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[1] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_0_ ( input IOLDO, output bytepkt0 );
  wire   GNDI;

  xo2iobufb \bytepkt_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(bytepkt0));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bytepkt0) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_0__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[0] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_15_ ( output PADDI, input chksum15 );

  xo2iobuf0074 \chksum_pad[15] ( .Z(PADDI), .PAD(chksum15));

  specify
    (chksum15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum15, 0:0:0);
    $width (negedge chksum15, 0:0:0);
  endspecify

endmodule

module chksum_15__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsreb ( input D0, SP, CK, LSR, output Q );

  IFS1P3BX INST01( .D(D0), .SP(SP), .SCLK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module chksum_14_ ( output PADDI, input chksum14 );

  xo2iobuf0074 \chksum_pad[14] ( .Z(PADDI), .PAD(chksum14));

  specify
    (chksum14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum14, 0:0:0);
    $width (negedge chksum14, 0:0:0);
  endspecify

endmodule

module chksum_14__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_13_ ( output PADDI, input chksum13 );

  xo2iobuf0074 \chksum_pad[13] ( .Z(PADDI), .PAD(chksum13));

  specify
    (chksum13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum13, 0:0:0);
    $width (negedge chksum13, 0:0:0);
  endspecify

endmodule

module chksum_13__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_12_ ( output PADDI, input chksum12 );

  xo2iobuf0074 \chksum_pad[12] ( .Z(PADDI), .PAD(chksum12));

  specify
    (chksum12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum12, 0:0:0);
    $width (negedge chksum12, 0:0:0);
  endspecify

endmodule

module chksum_12__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_11_ ( output PADDI, input chksum11 );

  xo2iobuf0074 \chksum_pad[11] ( .Z(PADDI), .PAD(chksum11));

  specify
    (chksum11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum11, 0:0:0);
    $width (negedge chksum11, 0:0:0);
  endspecify

endmodule

module chksum_11__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_10_ ( output PADDI, input chksum10 );

  xo2iobuf0074 \chksum_pad[10] ( .Z(PADDI), .PAD(chksum10));

  specify
    (chksum10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum10, 0:0:0);
    $width (negedge chksum10, 0:0:0);
  endspecify

endmodule

module chksum_10__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_9_ ( output PADDI, input chksum9 );

  xo2iobuf0074 \chksum_pad[9] ( .Z(PADDI), .PAD(chksum9));

  specify
    (chksum9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum9, 0:0:0);
    $width (negedge chksum9, 0:0:0);
  endspecify

endmodule

module chksum_9__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_8_ ( output PADDI, input chksum8 );

  xo2iobuf0074 \chksum_pad[8] ( .Z(PADDI), .PAD(chksum8));

  specify
    (chksum8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum8, 0:0:0);
    $width (negedge chksum8, 0:0:0);
  endspecify

endmodule

module chksum_8__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_7_ ( output PADDI, input chksum7 );

  xo2iobuf0074 \chksum_pad[7] ( .Z(PADDI), .PAD(chksum7));

  specify
    (chksum7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum7, 0:0:0);
    $width (negedge chksum7, 0:0:0);
  endspecify

endmodule

module chksum_7__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_6_ ( output PADDI, input chksum6 );

  xo2iobuf0074 \chksum_pad[6] ( .Z(PADDI), .PAD(chksum6));

  specify
    (chksum6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum6, 0:0:0);
    $width (negedge chksum6, 0:0:0);
  endspecify

endmodule

module chksum_6__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_5_ ( output PADDI, input chksum5 );

  xo2iobuf0074 \chksum_pad[5] ( .Z(PADDI), .PAD(chksum5));

  specify
    (chksum5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum5, 0:0:0);
    $width (negedge chksum5, 0:0:0);
  endspecify

endmodule

module chksum_5__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_4_ ( output PADDI, input chksum4 );

  xo2iobuf0074 \chksum_pad[4] ( .Z(PADDI), .PAD(chksum4));

  specify
    (chksum4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum4, 0:0:0);
    $width (negedge chksum4, 0:0:0);
  endspecify

endmodule

module chksum_4__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_3_ ( output PADDI, input chksum3 );

  xo2iobuf0074 \chksum_pad[3] ( .Z(PADDI), .PAD(chksum3));

  specify
    (chksum3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum3, 0:0:0);
    $width (negedge chksum3, 0:0:0);
  endspecify

endmodule

module chksum_3__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_2_ ( output PADDI, input chksum2 );

  xo2iobuf0074 \chksum_pad[2] ( .Z(PADDI), .PAD(chksum2));

  specify
    (chksum2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum2, 0:0:0);
    $width (negedge chksum2, 0:0:0);
  endspecify

endmodule

module chksum_2__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_1_ ( output PADDI, input chksum1 );

  xo2iobuf0074 \chksum_pad[1] ( .Z(PADDI), .PAD(chksum1));

  specify
    (chksum1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum1, 0:0:0);
    $width (negedge chksum1, 0:0:0);
  endspecify

endmodule

module chksum_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_0_ ( output PADDI, input chksum0 );

  xo2iobuf0074 \chksum_pad[0] ( .Z(PADDI), .PAD(chksum0));

  specify
    (chksum0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum0, 0:0:0);
    $width (negedge chksum0, 0:0:0);
  endspecify

endmodule

module chksum_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_rdy ( output PADDI, input chksum_rdy );

  xo2iobuf0074 chksum_rdy_pad( .Z(PADDI), .PAD(chksum_rdy));

  specify
    (chksum_rdy => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum_rdy, 0:0:0);
    $width (negedge chksum_rdy, 0:0:0);
  endspecify

endmodule

module wc_15_ ( output PADDI, input wc15 );

  xo2iobuf0074 \wc_pad[15] ( .Z(PADDI), .PAD(wc15));

  specify
    (wc15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc15, 0:0:0);
    $width (negedge wc15, 0:0:0);
  endspecify

endmodule

module wc_15__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre0075 ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module wc_14_ ( output PADDI, input wc14 );

  xo2iobuf0074 \wc_pad[14] ( .Z(PADDI), .PAD(wc14));

  specify
    (wc14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc14, 0:0:0);
    $width (negedge wc14, 0:0:0);
  endspecify

endmodule

module wc_14__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_13_ ( output PADDI, input wc13 );

  xo2iobuf0074 \wc_pad[13] ( .Z(PADDI), .PAD(wc13));

  specify
    (wc13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc13, 0:0:0);
    $width (negedge wc13, 0:0:0);
  endspecify

endmodule

module wc_13__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_12_ ( output PADDI, input wc12 );

  xo2iobuf0074 \wc_pad[12] ( .Z(PADDI), .PAD(wc12));

  specify
    (wc12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc12, 0:0:0);
    $width (negedge wc12, 0:0:0);
  endspecify

endmodule

module wc_12__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_11_ ( output PADDI, input wc11 );

  xo2iobuf0074 \wc_pad[11] ( .Z(PADDI), .PAD(wc11));

  specify
    (wc11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc11, 0:0:0);
    $width (negedge wc11, 0:0:0);
  endspecify

endmodule

module wc_11__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_10_ ( output PADDI, input wc10 );

  xo2iobuf0074 \wc_pad[10] ( .Z(PADDI), .PAD(wc10));

  specify
    (wc10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc10, 0:0:0);
    $width (negedge wc10, 0:0:0);
  endspecify

endmodule

module wc_10__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_9_ ( output PADDI, input wc9 );

  xo2iobuf0074 \wc_pad[9] ( .Z(PADDI), .PAD(wc9));

  specify
    (wc9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc9, 0:0:0);
    $width (negedge wc9, 0:0:0);
  endspecify

endmodule

module wc_9__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_8_ ( output PADDI, input wc8 );

  xo2iobuf0074 \wc_pad[8] ( .Z(PADDI), .PAD(wc8));

  specify
    (wc8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc8, 0:0:0);
    $width (negedge wc8, 0:0:0);
  endspecify

endmodule

module wc_8__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_7_ ( output PADDI, input wc7 );

  xo2iobuf0074 \wc_pad[7] ( .Z(PADDI), .PAD(wc7));

  specify
    (wc7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc7, 0:0:0);
    $width (negedge wc7, 0:0:0);
  endspecify

endmodule

module wc_7__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_6_ ( output PADDI, input wc6 );

  xo2iobuf0074 \wc_pad[6] ( .Z(PADDI), .PAD(wc6));

  specify
    (wc6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc6, 0:0:0);
    $width (negedge wc6, 0:0:0);
  endspecify

endmodule

module wc_6__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_5_ ( output PADDI, input wc5 );

  xo2iobuf0074 \wc_pad[5] ( .Z(PADDI), .PAD(wc5));

  specify
    (wc5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc5, 0:0:0);
    $width (negedge wc5, 0:0:0);
  endspecify

endmodule

module wc_5__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_4_ ( output PADDI, input wc4 );

  xo2iobuf0074 \wc_pad[4] ( .Z(PADDI), .PAD(wc4));

  specify
    (wc4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc4, 0:0:0);
    $width (negedge wc4, 0:0:0);
  endspecify

endmodule

module wc_4__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_3_ ( output PADDI, input wc3 );

  xo2iobuf0074 \wc_pad[3] ( .Z(PADDI), .PAD(wc3));

  specify
    (wc3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc3, 0:0:0);
    $width (negedge wc3, 0:0:0);
  endspecify

endmodule

module wc_3__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_2_ ( output PADDI, input wc2 );

  xo2iobuf0074 \wc_pad[2] ( .Z(PADDI), .PAD(wc2));

  specify
    (wc2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc2, 0:0:0);
    $width (negedge wc2, 0:0:0);
  endspecify

endmodule

module wc_2__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_1_ ( output PADDI, input wc1 );

  xo2iobuf0074 \wc_pad[1] ( .Z(PADDI), .PAD(wc1));

  specify
    (wc1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc1, 0:0:0);
    $width (negedge wc1, 0:0:0);
  endspecify

endmodule

module wc_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_0_ ( output PADDI, input wc0 );

  xo2iobuf0074 \wc_pad[0] ( .Z(PADDI), .PAD(wc0));

  specify
    (wc0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc0, 0:0:0);
    $width (negedge wc0, 0:0:0);
  endspecify

endmodule

module wc_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_wc_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_5_ ( output PADDI, input dt5 );

  xo2iobuf0074 \dt_pad[5] ( .Z(PADDI), .PAD(dt5));

  specify
    (dt5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt5, 0:0:0);
    $width (negedge dt5, 0:0:0);
  endspecify

endmodule

module dt_5__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_dt_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_4_ ( output PADDI, input dt4 );

  xo2iobuf0074 \dt_pad[4] ( .Z(PADDI), .PAD(dt4));

  specify
    (dt4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt4, 0:0:0);
    $width (negedge dt4, 0:0:0);
  endspecify

endmodule

module dt_4__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_dt_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_3_ ( output PADDI, input dt3 );

  xo2iobuf0074 \dt_pad[3] ( .Z(PADDI), .PAD(dt3));

  specify
    (dt3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt3, 0:0:0);
    $width (negedge dt3, 0:0:0);
  endspecify

endmodule

module dt_3__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_dt_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_2_ ( output PADDI, input dt2 );

  xo2iobuf0074 \dt_pad[2] ( .Z(PADDI), .PAD(dt2));

  specify
    (dt2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt2, 0:0:0);
    $width (negedge dt2, 0:0:0);
  endspecify

endmodule

module dt_2__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_dt_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_1_ ( output PADDI, input dt1 );

  xo2iobuf0074 \dt_pad[1] ( .Z(PADDI), .PAD(dt1));

  specify
    (dt1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt1, 0:0:0);
    $width (negedge dt1, 0:0:0);
  endspecify

endmodule

module dt_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_dt_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_0_ ( output PADDI, input dt0 );

  xo2iobuf0074 \dt_pad[0] ( .Z(PADDI), .PAD(dt0));

  specify
    (dt0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt0, 0:0:0);
    $width (negedge dt0, 0:0:0);
  endspecify

endmodule

module dt_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_dt_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vc_1_ ( output PADDI, input vc1 );

  xo2iobuf0074 \vc_pad[1] ( .Z(PADDI), .PAD(vc1));

  specify
    (vc1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge vc1, 0:0:0);
    $width (negedge vc1, 0:0:0);
  endspecify

endmodule

module vc_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_vc_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vc_0_ ( output PADDI, input vc0 );

  xo2iobuf0074 \vc_pad[0] ( .Z(PADDI), .PAD(vc0));

  specify
    (vc0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge vc0, 0:0:0);
    $width (negedge vc0, 0:0:0);
  endspecify

endmodule

module vc_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre0075 \q_vc_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_15_b ( output PADDI, input bytedata15 );

  xo2iobuf0074 \byte_data_pad[15] ( .Z(PADDI), .PAD(bytedata15));

  specify
    (bytedata15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata15, 0:0:0);
    $width (negedge bytedata15, 0:0:0);
  endspecify

endmodule

module byte_data_15__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[15] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_14_b ( output PADDI, input bytedata14 );

  xo2iobuf0074 \byte_data_pad[14] ( .Z(PADDI), .PAD(bytedata14));

  specify
    (bytedata14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata14, 0:0:0);
    $width (negedge bytedata14, 0:0:0);
  endspecify

endmodule

module byte_data_14__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[14] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_13_b ( output PADDI, input bytedata13 );

  xo2iobuf0074 \byte_data_pad[13] ( .Z(PADDI), .PAD(bytedata13));

  specify
    (bytedata13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata13, 0:0:0);
    $width (negedge bytedata13, 0:0:0);
  endspecify

endmodule

module byte_data_13__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[13] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_12_b ( output PADDI, input bytedata12 );

  xo2iobuf0074 \byte_data_pad[12] ( .Z(PADDI), .PAD(bytedata12));

  specify
    (bytedata12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata12, 0:0:0);
    $width (negedge bytedata12, 0:0:0);
  endspecify

endmodule

module byte_data_12__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[12] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_11_b ( output PADDI, input bytedata11 );

  xo2iobuf0074 \byte_data_pad[11] ( .Z(PADDI), .PAD(bytedata11));

  specify
    (bytedata11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata11, 0:0:0);
    $width (negedge bytedata11, 0:0:0);
  endspecify

endmodule

module byte_data_11__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[11] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_10_b ( output PADDI, input bytedata10 );

  xo2iobuf0074 \byte_data_pad[10] ( .Z(PADDI), .PAD(bytedata10));

  specify
    (bytedata10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata10, 0:0:0);
    $width (negedge bytedata10, 0:0:0);
  endspecify

endmodule

module byte_data_10__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[10] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_9_b ( output PADDI, input bytedata9 );

  xo2iobuf0074 \byte_data_pad[9] ( .Z(PADDI), .PAD(bytedata9));

  specify
    (bytedata9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata9, 0:0:0);
    $width (negedge bytedata9, 0:0:0);
  endspecify

endmodule

module byte_data_9__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[9] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_8_b ( output PADDI, input bytedata8 );

  xo2iobuf0074 \byte_data_pad[8] ( .Z(PADDI), .PAD(bytedata8));

  specify
    (bytedata8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata8, 0:0:0);
    $width (negedge bytedata8, 0:0:0);
  endspecify

endmodule

module byte_data_8__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[8] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_7_b ( output PADDI, input bytedata7 );

  xo2iobuf0074 \byte_data_pad[7] ( .Z(PADDI), .PAD(bytedata7));

  specify
    (bytedata7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata7, 0:0:0);
    $width (negedge bytedata7, 0:0:0);
  endspecify

endmodule

module byte_data_7__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[7] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_6_b ( output PADDI, input bytedata6 );

  xo2iobuf0074 \byte_data_pad[6] ( .Z(PADDI), .PAD(bytedata6));

  specify
    (bytedata6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata6, 0:0:0);
    $width (negedge bytedata6, 0:0:0);
  endspecify

endmodule

module byte_data_6__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[6] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_5_b ( output PADDI, input bytedata5 );

  xo2iobuf0074 \byte_data_pad[5] ( .Z(PADDI), .PAD(bytedata5));

  specify
    (bytedata5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata5, 0:0:0);
    $width (negedge bytedata5, 0:0:0);
  endspecify

endmodule

module byte_data_5__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[5] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_4_b ( output PADDI, input bytedata4 );

  xo2iobuf0074 \byte_data_pad[4] ( .Z(PADDI), .PAD(bytedata4));

  specify
    (bytedata4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata4, 0:0:0);
    $width (negedge bytedata4, 0:0:0);
  endspecify

endmodule

module byte_data_4__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[4] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_3_b ( output PADDI, input bytedata3 );

  xo2iobuf0074 \byte_data_pad[3] ( .Z(PADDI), .PAD(bytedata3));

  specify
    (bytedata3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata3, 0:0:0);
    $width (negedge bytedata3, 0:0:0);
  endspecify

endmodule

module byte_data_3__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[3] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_2_b ( output PADDI, input bytedata2 );

  xo2iobuf0074 \byte_data_pad[2] ( .Z(PADDI), .PAD(bytedata2));

  specify
    (bytedata2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata2, 0:0:0);
    $width (negedge bytedata2, 0:0:0);
  endspecify

endmodule

module byte_data_2__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[2] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_1_b ( output PADDI, input bytedata1 );

  xo2iobuf0074 \byte_data_pad[1] ( .Z(PADDI), .PAD(bytedata1));

  specify
    (bytedata1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata1, 0:0:0);
    $width (negedge bytedata1, 0:0:0);
  endspecify

endmodule

module byte_data_1__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[1] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_data_0_b ( output PADDI, input bytedata0 );

  xo2iobuf0074 \byte_data_pad[0] ( .Z(PADDI), .PAD(bytedata0));

  specify
    (bytedata0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata0, 0:0:0);
    $width (negedge bytedata0, 0:0:0);
  endspecify

endmodule

module byte_data_0__MGIOLb ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 \q_byte_data_0io[0] ( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_clkb ( output PADDI, input byte_clk );

  xo2iobuf0074 byte_clk_pad( .Z(PADDI), .PAD(byte_clk));

  specify
    (byte_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge byte_clk, 0:0:0);
    $width (negedge byte_clk, 0:0:0);
  endspecify

endmodule

module long_en ( output PADDI, input long_en );

  xo2iobuf0074 long_en_pad( .Z(PADDI), .PAD(long_en));

  specify
    (long_en => PADDI) = (0:0:0,0:0:0);
    $width (posedge long_en, 0:0:0);
    $width (negedge long_en, 0:0:0);
  endspecify

endmodule

module long_en_MGIOL ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 q_long_en_0io( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module short_en ( output PADDI, input short_en );

  xo2iobuf0074 short_en_pad( .Z(PADDI), .PAD(short_en));

  specify
    (short_en => PADDI) = (0:0:0,0:0:0);
    $width (posedge short_en, 0:0:0);
    $width (negedge short_en, 0:0:0);
  endspecify

endmodule

module short_en_MGIOL ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre0075 q_short_en_0io( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vccb DRIVEVCC( .PWR1(VCCI));
  gndb DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module GSR_INSTb ( input GSRNET );

  GSR5MODEb GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODEb ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
